/*
NIEM UML 
Copyright ï¿½ 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
*/
//import niemcommon;
import pimSubsetReferenceN20;

modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype ECORE  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation pimSubsetReference(inout pimUml:UML,inout blackboxAdapter:CMOF)
//	extends transformation niemcommon;
	extends transformation pimSubsetReferenceN20;
	
	main() {
//		log('Start Subset Reference Models ');
//		var pimPackages:Set(UML::Package)=initPimSubsetReference();
		pimPackages:=initPimSubsetReference();
if(false)then{log('SUPPRESS all NIEM conversions');}else{		
	
if(false)then{log('SUPPRESS NIEM 2.0 to 2.1 conversion');}else{		
		niem20to21();
		niem21to30();
}endif;		
		pimPackages->forEach(pimPackage){
			var matchedReferencePackage:UML::Package=pimPackage.findMatchedReferencePackage();	
			if(matchedReferencePackage.oclIsUndefined())then{
				if(pimPackage.getTargetNamespace().startsWith(baseNiemNamespace))then{
					log('WARNING domain package not matched with reference model: '+pimPackage.qualifiedName+', namespace '+pimPackage.getTargetNamespace());
					// if this was a "subset", change it to "extension"
					var informationModelInstance:Stdlib::Element=pimPackage.GetStereotypeApplication(NIEMInformationModelStereotype).oclAsType(Stdlib::Element);
					var purposeCode:String=informationModelInstance.getInformationModelDefaultPurpose();
					
					if(purposeCode='subset')then{
						informationModelInstance.setInformationModelDefaultPurpose('extension');
					}endif;
					
				}else{
					// scan for augmentation properties in non-subset schemas and handle as required
					/*
					pimPackage.ownedType
						->select(t|not(t.isPropertyHolder())and t.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
						->forEach(p){
							p.baseNiem21to30Property();
						};
					*/
				}endif;
			}else{
				matchedReferencePackage.createPackageReference(pimPackage);
			}endif;		
		};
		
		// generalizations
		var pimClassifiers:Set(UML::Classifier)=
			pimDomainModel.allSubobjectsOfKind(UML::Classifier).oclAsType(UML::Classifier)
//			->select(c|not(c.isStereotypeApplied(NIEMPropertyHolderStereotype)))	
			->select(c|c.getNearestPackage().referencesReferencePackage() and not(c.isStereotypeApplied(NIEMPropertyHolderStereotype)))	
			->asSet();
//		referenceClassifiers:=pimReferenceModel.allSubobjectsOfKind(UML::Classifier).oclAsType(UML::Classifier)->asSet();
		referenceClassifiers:=pimReferenceSchemas.ownedType.oclAsType(UML::Classifier)->asSet();
		log('pimClassifiers count: '+pimClassifiers->size().repr()+', referenceClassifiers : '+referenceClassifiers->size().repr());
		pimClassifiers->forEach(pimClassifier){
			var matchedReferenceClassifier:UML::Classifier=pimClassifier.findMatchedReferenceClassifier();	
			if(matchedReferenceClassifier.oclIsUndefined())then{
				if(pimClassifier.getNearestPackage().getTargetNamespace().startsWith(baseNiemNamespace))then{
//				if(pimClassifier.getNearestPackage().getDomainTargetNamespace().startsWith('http://niem.gov/niem/'))then{
//				log('WARNING domain classifier not matched with reference model: '+pimClassifier.qualifiedName+', namespace '+pimClassifier.getNearestPackage().getDomainTargetNamespace());
				log('WARNING domain classifier not matched with reference model: '+pimClassifier.qualifiedName+', namespace '+pimClassifier.getNearestPackage().getTargetNamespace());
				}else{}endif;
			}else{
				matchedReferenceClassifier.createSubsetGeneralization(pimClassifier);
			}endif;		
		};
		pimClassifiers
		->forEach(pimClassifier){
			var matchedReferenceClassifier:UML::Classifier=pimClassifier.findMatchedReferenceClassifier();	
			if(matchedReferenceClassifier.oclIsUndefined())then{}else{
				matchedReferenceClassifier.createSubsetRedefinition(pimClassifier);
			}endif;		
		};
}endif;		
	}
//property subsetsStereotype:UML::Stereotype=null;	
//property referenceSchemaComponent:UML::Component=null;
property domainSchemaComponent:UML::Component=null;
//property logicalProfile:UML::Profile=null; // the niem logical uml profile
//property provisioningProfile:UML::Profile=null; // the niem logical uml profile
//property pimReferenceModel:UML::Package=null; // 
property pimReferenceModels:Set(UML::Package)=null; // 
property pimReferenceSchemas:Set(UML::Package)=null; // 
property pimDomainModel:UML::Package=null; // 
property umlModel:UML::Package=null; // 
property referenceClassifiers:Set(UML::Classifier)=Set{};
helper initPimSubsetReference():Set(UML::Package) {
		blackboxHook:=blackboxAdapter.objectsOfType(CMOF::EPackage)->asSequence()->first();
		// in-place modification for pim uml
		// generalize from pim to pimReference
		// explicitly hook in redefinitions
		//  also redefine zero cardinality any missing
		// report any discrepencies
		log('Start Subset Reference Models ');
//		umlModel:=pimUml.objectsOfType(UML::Model)->asSequence()->first();
		umlModel:=pimUml.rootObjects()
			->select(m|m.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)->asSequence()->first();
			/*
//		var allTargetProfiles:Set(UML::Profile)=pimUml.objectsOfType(UML::Profile);
		var allTargetProfiles:Set(UML::Profile)=umlModel.allSubobjectsOfType(UML::Profile).oclAsType(UML::Profile)->asSet();
		allTargetProfiles
			->select(p|p.name=provisioningProfileName)->asSequence()->first().initProvisioningProfileStereotypes();//getProvisioningProfile();
		allTargetProfiles->select(p|p.name=logicalProfileName)
			->asSequence()->first().initLogicalProfileStereotypes();//getLogicalProfile();
		allTargetProfiles->select(p|p.name=structureProfileName)
			->asSequence()->first().initStructureProfileStereotypes();//getLogicalProfile();
		allTargetProfiles->select(p|p.name=niemXsdProfileName)
			->asSequence()->first().initNiemXsdProfileStereotypes();//getLogicalProfile();
			*/
		umlModel.oclAsType(UML::Model).initializeProfileGlobals();	
		// 
		pimReferenceModels:=umlModel.packagedElement
			->select(p|
				//not(p.isEditable()) 
				'niem'=p.name
				and p.oclIsKindOf(UML::Package)
				)
			.oclAsType(UML::Package)->asSet();
		pimReferenceSchemas:=pimReferenceModels
			.allSubobjectsOfKind(UML::Package).oclAsType(UML::Package)
			->select(p|p.isStereotypeApplied(NIEMSchemaStereotype))->asSet();
		/*
		pimReferenceModel:=umlModel.packagedElement
			->select(p|(p.name=niemReferenceModelName)and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)->asSequence()->first();
		*/	
			/*
		referenceSchemaComponent:=umlModel.packagedElement
			->select(p|(p.name.startsWith(niemReferenceModelName))and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)
			.packagedElement->select(p|p.oclIsKindOf(UML::Component))
			.oclAsType(UML::Component)
			->asSequence()->first();
			*/
		pimDomainModel:=umlModel.packagedElement
			->select(p|p.oclIsKindOf(UML::Model) 
//				and (p<>pimReferenceModel) 
				and (p.isEditable()) 
				and p.oclAsType(UML::Model).nestedPackage->notEmpty()
//				and (p.name<>'XMLPrimitiveTypes')
				)
			.oclAsType(UML::Model)->asSequence()->first();
//		domainSchemaComponent:=pimDomainModel.getSchemaComponent();
		domainSchemaComponent:=umlModel.packagedElement
//			->select(p|not(p.name.startsWith(niemReferenceModelName))and p.oclIsKindOf(UML::Model))
			->select(p|p.isEditable() and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)
			.packagedElement->select(p|p.oclIsKindOf(UML::Component))
			.oclAsType(UML::Component)
			->asSequence()->first();
		/*
		logicalProfile:=pimUml.objectsOfType(UML::Profile)->select(p|p.name=logicalProfileName)->asSequence()->first();
		provisioningProfile:=pimUml.objectsOfType(UML::Profile)->select(p|p.name=provisioningProfileName)->asSequence()->first();
		subsetsStereotype:=logicalProfile.getOwnedStereotype('References');
		*/
		
		log('domain Component '+domainSchemaComponent.qualifiedName+', domain model '+pimDomainModel.qualifiedName+', root model '+umlModel.qualifiedName);
//		log('domain Component '+domainSchemaComponent.qualifiedName+', reference component '+referenceSchemaComponent.qualifiedName+', domain model '+pimDomainModel.qualifiedName);
//		log('model '+umlModel.qualifiedName+', referenceModel '+pimReferenceModel.qualifiedName+', '+subsetsStereotype.qualifiedName);
//		log('model '+umlModel.qualifiedName+', referenceModel '+pimReferenceModel.qualifiedName+', '+NIEMReferencesStereotype.qualifiedName);
		log('model '+umlModel.qualifiedName+', '+NIEMReferencesStereotype.qualifiedName);
		
		// package references
		var pimPackages:Set(UML::Package)=
			pimDomainModel.allSubobjectsOfKind(UML::Package).oclAsType(UML::Package)
			->select(p|p.isStereotypeApplied(NIEMSchemaStereotype))
			->asSet();
		log('pimPackages count: '+pimPackages->size().repr()+', referenceModels : '+pimReferenceModels->size().repr()+', referencePackages : '+pimReferenceSchemas->size().repr());
		return pimPackages;
	}
/*
query UML::Package::getSchemaComponent():UML::Component{
	var mdpComponent:UML::Component=self._directedRelationshipOfTarget
	->select(r|r.oclIsKindOf(UML::ElementImport) and r.oclAsType(UML::ElementImport).importingNamespace.oclIsKindOf(UML::Component))
	.oclAsType(UML::ElementImport).importingNamespace.oclAsType(UML::Component)
	->asSequence()->first();
	return mdpComponent;	
}
*/
query UML::Classifier::findMatchedReferenceClassifier():UML::Classifier=referenceClassifiers
	->select(c|c.isMatchedReferenceClassifier(self))->asSequence()->first();
query UML::Classifier::isMatchedReferenceClassifier(umlClassifier:UML::Classifier):Boolean=
//	(self.oclType()=umlClassifier.oclType())
	// if enumerations are empty, they may end up as PrimitiveTypes in subset
	(self.oclIsKindOf(DataType)=umlClassifier.oclIsKindOf(DataType))
	and (self.oclIsKindOf(Class)=umlClassifier.oclIsKindOf(Class))
	and (self.name=umlClassifier.name)
//	and self.owner.oclIsKindOf(UML::Package)
//	and umlClassifier.owner.oclIsKindOf(UML::Package)
	and self.getNearestPackage().isMatchedReferencePackage(umlClassifier.getNearestPackage())
//	and (self.stereotypedBy('Association')=umlClassifier.stereotypedBy('Association'))
	and (self.isStereotypeApplied(NIEMAssociationStereotype)=umlClassifier.isStereotypeApplied(NIEMAssociationStereotype))
	;
query UML::Package::findMatchedReferencePackage():UML::Package=pimReferenceSchemas
	->select(c|c.isMatchedReferencePackage(self))->asSequence()->first();
query UML::Package::isMatchedReferencePackage(umlPackage:UML::Package):Boolean=
	// this should be based on namespace match
	(self.oclType()=umlPackage.oclType())
//	and (self.name=umlPackage.name)
//	and (self.getReferenceTargetNamespace()=umlPackage.getDomainTargetNamespace())
	and (self.getTargetNamespace()=umlPackage.getTargetNamespace())
	;
	/*
query UML::Package::getReferenceTargetNamespace():String=self.getTargetNamespace(referenceSchemaComponent);	
query UML::Package::getDomainTargetNamespace():String=self.getTargetNamespace(domainSchemaComponent);	
query UML::Package::getTargetNamespace(schemaComponent:UML::Component):String=
	schemaComponent.elementImport->select(e|e.importedElement=self).alias->asSequence()->first();
*/
query OclAny::oclType():ECORE::EClass=self.oclAsType(ECORE::EObject).eClass();	
helper UML::Classifier::createSubsetGeneralization(umlClassifier:UML::Classifier){
	if(umlClassifier.getReferences()->includes(self))then{}else{
		var realization:UML::Realization=new UML::Realization@pimUml();
		realization.client:=umlClassifier;
		realization.supplier:=self;
		umlClassifier.getNearestPackage().packagedElement+=realization;
//		realization.applyStereotype(subsetsStereotype);
		realization.applyStereotype(NIEMReferencesStereotype);
		
	}endif;
/*
	if(umlClassifier.general->includes(self))then{}else{
		var generalization:UML::Generalization=new UML::Generalization();
		generalization.specific:=umlClassifier;
		generalization.general:=self;
	}endif;
	umlClassifier.generalization->select(g|g.general=self)->forEach(generalization){
		if(generalization.isStereotypeApplied(subsetsStereotype))then{}else{
			generalization.applyStereotype(subsetsStereotype);
		}endif;
	};
	*/
}
helper UML::Package::createPackageReference(inout umlPackage:UML::Package){
	if(umlPackage.getPackageReferences()->includes(self))then{}else{
		var realization:UML::Realization=umlPackage.createRealizes();
		realization.client:=umlPackage;
		realization.supplier:=self;
	}endif;
}
helper UML::Package::referencesReferencePackage():Boolean{
	return self.getPackageReferences()->notEmpty();
}
	
query UML::Property::isRedefinedPropertyMatch(umlProperty:UML::Property):Boolean{
	return (self.name=umlProperty.name)
		and(
			((umlProperty.subsettedProperty->size()=0) and (self.subsettedProperty->size()=0))
			or (
				(umlProperty.subsettedProperty->size()=1) and (self.subsettedProperty->size()=1)
				and (umlProperty.subsettedProperty->asSequence()->first().name = self.subsettedProperty->asSequence()->first().name)
				)
		)
		and(
			((umlProperty.type=null) and (self.type=null))
			or (
				((umlProperty.type<>null)and(self.type<>null))
				and (umlProperty.type.name=self.type.name)
				and (umlProperty.type.getNearestPackage().name=self.type.getNearestPackage().name)
				)
		)
		; 
}
query UML::Property::getRedefinedProperty(umlClassifier:UML::Classifier):UML::Property{
	var umlAttributes:Sequence(UML::Property)=umlClassifier.attribute->select(a|self.isRedefinedPropertyMatch(a))->asSequence();
	if(umlAttributes->isEmpty())then{return null;}else{
		if(umlAttributes->size()=1)then{
			return umlAttributes->first();
		}else{}endif;
	}endif;
	// check for type match
	return null;
}
helper UML::Classifier::createSubsetRedefinition(umlClassifier:UML::Classifier){
	// redefinitions
	self.attribute->forEach(referenceAttribute){
		var umlAttribute:UML::Property=referenceAttribute.getRedefinedProperty(umlClassifier);
		if(umlAttribute.oclIsUndefined())then{
			//log('createSubsetGeneralization missing referenceAttribute '+referenceAttribute.qualifiedName);
			referenceAttribute.suppressProperty(umlClassifier);
		}else{
			//log('createSubsetGeneralization matched referenceAttribute '+referenceAttribute.qualifiedName);
			referenceAttribute.redefineProperty(umlAttribute);
		}endif;
	};
	// check for extra attributes
	umlClassifier.attribute->forEach(umlAttribute){
		var referenceAttribute:UML::Property=self.attribute->select(a|a.name=umlAttribute.name)->asSequence()->first();
		if(referenceAttribute.oclIsUndefined())then{
			// this is not an error at this level, may be substitutionGroup override
			//log('ERROR: added attribute undefined in reference model: '+umlAttribute.qualifiedName+', reference class: '+self.qualifiedName);
		}else{
		}endif;
	};
	//log('createSubsetRedefinition for '+self.qualifiedName+' from reference '+umlClassifier.qualifiedName);
}
helper UML::Property::redefineProperty(inout umlAttribute:UML::Property){
	// set redefinedProperty (if not already) and verify cardinality, type
	/*
	if(umlAttribute.redefinedProperty->includes(self))then{}else{
		umlAttribute.redefinedProperty+=self;
	}endif;
	*/
	if(umlAttribute.lower<self.lower)then{
		log('ERROR: redefineProperty minimum cardinality violation for '+self.qualifiedName+', reference lower='+self.lower.repr()+', redefined to '+umlAttribute.lower.repr());
	}else{}endif;
	if((self.upper>=0) and (umlAttribute.upper>self.upper))then{
		log('ERROR: redefineProperty maximum cardinality violation for '+self.qualifiedName);
	}else{}endif;
	if(self.type.oclIsUndefined() or self.type.isConsistentWith(umlAttribute.type))then{}else{
		log('ERROR: redefineProperty type inconsistent for '+self.qualifiedName+', reference type '
			+self.type.qualifiedName+', redefined to '+umlAttribute.type.qualifiedName
			+', domain references='+umlAttribute.type.oclAsType(UML::Classifier).getReferences()->size().repr()
//			+', domain type namespace '+umlAttribute.type.getNearestPackage().getDomainTargetNamespace()+', reference type namespace '+self.type.getNearestPackage().getReferenceTargetNamespace());
			+', domain type namespace '+umlAttribute.type.getNearestPackage().getTargetNamespace()+', reference type namespace '+self.type.getNearestPackage().getTargetNamespace());
	}endif;
}
query UML::Type::isConsistentWith(umlClassifier:UML::Type):Boolean=
	self.oclIsKindOf(UML::Classifier)
	and umlClassifier.oclIsKindOf(UML::Classifier)
	and (
		(self=umlClassifier) 
		or (umlClassifier.oclAsType(UML::Classifier).allReferenceParents()
			->includes(self.oclAsType(UML::Classifier))
			)
		);
query UML::Classifier::allReferenceParents():Set(UML::Classifier)=
	self.allParents()
	->union(self.getReferences())
	->union(self.getReferences().allReferenceParents())
	->select(g|(g<>null)and not(g.oclIsUndefined()))->asSet();
query UML::Classifier::getReferences():Set(UML::Classifier)=
	self.clientDependency
//	->select(r|r.isStereotypeApplied(subsetsStereotype)).target
	->select(r|r.isStereotypeApplied(NIEMReferencesStereotype)).target
	
	->select(t|t.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier)
	->asSet();
query UML::Package::getPackageReferences():Set(UML::Package)=
	self.clientDependency
	->select(r|r.isStereotypeApplied(NIEMReferencesStereotype)).target
	->select(t|t.oclIsKindOf(UML::Package)).oclAsType(UML::Package)
	->asSet();
	
helper UML::Property::suppressProperty(inout umlClassifier:UML::Classifier){
/*
	// clone property, set cardinality 0, and set redefinedProperty
	var targetPimProperty:UML::Property=self.deepclone().oclAsType(UML::Property);
	//targetPimProperty.lower:=0;
	//targetPimProperty.upper:=0;
	0.setLower(targetPimProperty);
	0.setUpper(targetPimProperty);
	
	targetPimProperty.redefinedProperty+=self;
	targetPimProperty.ownedAttribute(umlClassifier);
	*/
	if(not(umlClassifier.stereotypedBy('PropertyHolder')) and self.lower<>0)then{
		// this is not error in subset
		//log('ERROR: suppressProperty cardinality violation for '+self.qualifiedName+', lower = '+self.lower.repr());
	}else{}endif;
}
/*
helper UML::Property::ownedAttribute(inout umlClassifier:UML::Classifier){
	if(umlClassifier.oclIsKindOf(UML::Class))then{
		umlClassifier.oclAsType(UML::Class).ownedAttribute+=self;
	}else{
		if(umlClassifier.oclIsKindOf(UML::DataType))then{
			umlClassifier.oclAsType(UML::DataType).ownedAttribute+=self;
		}else{
		}endif;
	}endif;
}
*/	
//////////////////////////////niem2.1 to 3.0
helper niem21to30(){
		// initial pass: adjust names, add types, etc.
		// get and check Classifiers, properties
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier)
		.niem21to30Type();
		// find 2.0 namespaces and adjust each; including targetNamespace
		pimPackages.niem21to30NamespacePreprocess();
		pimPackages.niem21to30Namespace();
		// check for lost types from associations and properties
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Association)).oclAsType(UML::Association)
		->forEach(association){
			if(association.memberEnd.type->select(t|((t<>null)and not(t.oclIsUndefined()))and t.isLost())->notEmpty())then{
				association.removeElement();				
			}endif;
		};
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
		->forEach(attr){
			
			if((attr.type<>null)and not(attr.type.oclIsUndefined()) and attr.type.isLost())then{
				attr.type:=null;
			}endif;
		};
		return;
}
helper UML::Package::niem21to30Namespace(){
			// process by namespace
		var pimNdrSchemaInstance:Stdlib::Element=self.getStereotypeApplication(NIEMSchemaStereotype).oclAsType(Stdlib::Element);
		//log('niem21to21Namespace '+self.qualifiedName+', instance '+pimNdrSchemaInstance.repr());
		if(pimNdrSchemaInstance.oclIsUndefined())then return endif;
		var namespace=self.getTargetNamespace();
		namespace21to3->select(ns|ns.n21=namespace)->forEach(n21namespace){
				log('niem21to30Namespace targetNamespace '+namespace+' to '+n21namespace.n3);
				pimNdrSchemaInstance.setSchemaNamespace(n21namespace.n3);
		};
		return;
}
helper UML::Package::niem21to30NamespacePreprocess(){
			// process by namespace
		var pimNdrSchemaInstance:Stdlib::Element=self.getStereotypeApplication(NIEMSchemaStereotype).oclAsType(Stdlib::Element);
		//log('niem21to21Namespace '+self.qualifiedName+', instance '+pimNdrSchemaInstance.repr());
		if(pimNdrSchemaInstance.oclIsUndefined())then return endif;
		var namespace=self.getTargetNamespace();
	// handle nonauth to utoffend move
	if(namespace=niem21_nonauth_URI)then{
		var offender:UML::Package=	niem21_ut_offender_URI.findOrCreateNamespace();
		// check for duplicate names (i.e., propertyHolders)
		self.ownedType->select(t|t.IsStereotypeApplied(NIEMPropertyHolderStereotype))
			->select(t|offender.ownedType->select(o|o.name=t.name)->notEmpty())
			->forEach(type){
				type.name:=self.name+'_'+type.name;
			};
		offender.packagedElement+=self.packagedElement;
		self.removeElement();
	}endif;
		return;
}

helper UML::Classifier::niem21to30Type(){
			// process by classifier
			// get and check properties
				self.attribute.niem21to30Property();
	// base processing on resolved propertyName/namespace
	var myself:UML::Classifier:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedNamespace:String=self.getResolvedNamespace();
		type21to3->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			//log('INFO: renaming  Classifier '+self.qualifiedName);
			// if the name already exists, then move all refs to existing classifier and remove this one
			var existingClassifier:UML::Classifier=self.getNearestPackage().ownedType
				->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name=n21name.n3))
				->oclAsType(UML::Classifier)->asSequence()->first();
			if(existingClassifier.oclIsUndefined())	then{
					myself.name:=n21name.n3;
				}else{
					// move refs and delete
					if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and myself.oclIsKindOf(UML::StructuredClassifier))then{
						// copy attribute, unless it already exists
						existingClassifier.oclAsType(UML::StructuredClassifier).ownedAttribute+=
							myself.oclAsType(UML::StructuredClassifier).ownedAttribute
							->select(p|existingClassifier.oclAsType(UML::StructuredClassifier).ownedAttribute
								->select(existingp|existingp.name=p.name)->isEmpty());
						}endif;
						log('INFO: removing redundant  Classifier '+self.qualifiedName);
						// move type refs
						myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
						// move subtypes
						myself._generalizationOfGeneral->forEach(generalization){generalization.general:=existingClassifier;};
						myself.removeElement();
				}endif;
			};
		
	switch{
		
		case((resolvedName='FingerprintSetType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='FingerprintSetAugmentationType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='PersonFingerprintSetType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='ImmediateFamilyAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='TelecommunicationDeviceType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='GuardianAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='AuthorityFigureAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		
		case((resolvedName='PXSCodeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='PXSCodeSimpleType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='POSCodeSimpleType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='POSCodeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='FaceImageAttributeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
	
		case((resolvedName='PCSCodeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='PCSCodeSimpleType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		
		case((resolvedName='AdoptedChildAssociationType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					myself.removeElement();
		};
		case((resolvedName='ReligionCategoryCodeType') and (resolvedNamespace=niem21_scr_URI)){
		//	myself.name:='ReligionCodeType';
		//	myself.changeNamespace(niem21_hl7_URI);
					myself.removeElement();
		};
		case((resolvedName='ReligionCategoryCodeSimpleType') and (resolvedNamespace=niem21_scr_URI)){
			//myself.name:='ReligionCodeSimpleType';
			//yself.changeNamespace(niem21_hl7_URI);
					myself.removeElement();
		};
		
		case((resolvedName='SubstanceMeasureType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					// move refs and delete
					// move subtypes, type refs
			var existingClassifier:UML::Classifier=findOrCreateClass('MeasureType',niem21_nc_URI);
					myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
					myself.removeElement();
		};
		// MarriageStatusType
		//   <xs:element name="MaritalStatusCode" type="ndex:MaritalStatusCodeType" substitutionGroup="nc:PersonUnionStatusAbstract">
		case((resolvedName='MarriageStatusType') and (resolvedNamespace=niem21_nc_URI)){
			// change any reference to this to be a reference to type of underlying PersonUnionStatusCode and remove this
			//var PersonUnionStatusCode:UML::Type=myself.oclAsType(UML::Class).ownedAttribute
			//	->select(p|(p.name='PersonUnionStatusCode')or(p.name='MaritalStatusCode')).type
			//	->asSequence()->first();
			//myself._typedElementOfType->forEach(typedElement){typedElement.type:=PersonUnionStatusCode;};	
			myself.removeElement();
		};
		case((resolvedName='MeasurePointValueType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					// move refs and delete
					// move subtypes, type refs
					var existingClassifier:UML::Classifier=getXMLPrimitiveType('decimal');
					myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
					myself.removeElement();
		};
		//		Tuple{n21:String='StructuredAddressType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'},
		case((resolvedName='StructuredAddressType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: adjusting  Classifier '+self.qualifiedName);
			// rename to AddressType, remove existing AddressType and move any of its refs to this
			var existingClassifier:UML::Classifier=findOrCreateClass('AddressType',niem21_nc_URI);
			existingClassifier.typedElementTypes()->forEach(typedElement){typedElement.type:=myself;};
			existingClassifier.removeElement();
			myself.name:='AddressType';
			// remove AddressRepresentation, remove subsets from AddressFullText, StructuredAddress becomes Address
		};
		
		case((resolvedName='TelephoneNumberAugmentationType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: renaming  Classifier '+self.qualifiedName);
			//	myself.name:='TelephoneNumberType';
			// if the name already exists, then move all refs to existing classifier and remove this one
			// this needs to be in nc namespace and augmentation type removed
			var nc:UML::Package=niem21_nc_URI.findOrCreateNamespace();
			var existingClassifier:UML::Classifier=nc.ownedType
				->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name='TelephoneNumberType'))
				->oclAsType(UML::Classifier)->asSequence()->first();
			if(existingClassifier.oclIsUndefined())	then{
					myself.name:='TelephoneNumberType';
					nc.packagedElement+=myself;
					
					myself.removeStereotype('AugmentationType');
				}else{
					// move refs and delete
					if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and myself.oclIsKindOf(UML::StructuredClassifier))then{
						log('INFO: removing redundant  Classifier '+self.qualifiedName);
						// TODO: move subtypes, type refs
						myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
						myself.removeElement();
				}endif;
			}endif;
							
		};
		
		
		
		case((resolvedName='CaseDispositionDecisionCategoryCodeSimpleType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='CaseDispositionDecisionCategoryCodeType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='MilitaryDischargeCategoryCodeSimpleType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='MilitaryDischargeCategoryCodeType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='PleaCategoryCodeSimpleType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='PleaCategoryCodeType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='SupervisionLevelCodeSimpleType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='SupervisionLevelCodeType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='SupervisionRestrictionCodeSimpleType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		case((resolvedName='SupervisionRestrictionCodeType') and (resolvedNamespace=niem21_ut_offender_URI)){
			myself.changeNamespace(niem21_nonauth_URI);
		};
		// change namespace
		case((resolvedName='AggravatedAssaultHomicideFactorsCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='IdentificationRangeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='DriverLicenseType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ItemTitleAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ItemTitleReplacementAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ItemTitleType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		// ItemRegistrationType
		case((resolvedName='ItemRegistrationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='DrivingRestrictionType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='DriverLicensePermitType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		// DriverLicenseBaseType
		case((resolvedName='DriverLicenseBaseType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		// FirearmType
		case((resolvedName='FirearmType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='JewelryType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='LesseeType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='LessorType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='LienHolderType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='LienType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='TitleStatusType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='VehicleBranderType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='VehicleBrandType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='VehicleEmissionInspectionType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='VehicleSafetyInspectionType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		// JewelryStoneType
		case((resolvedName='JewelryStoneType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		// ConveyanceRegistrationType
		case((resolvedName='ConveyanceRegistrationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='PersonNameCategoryCodeSimpleType') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='PersonNameCategoryCodeType') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ClothingType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ConveyanceEngineAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ConveyancePartAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='DriverLicenseAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		/*
FamilyKinshipCodeSimpleType - no match
FamilyKinshipCodeType - no match
cyfs ParentChildKinshipCategoryCodeSimpleType
niem30_nonauth_URI to
niem30_fs_URI
PersonUnionCategoryCodeSimpleType nc
MarriageCategoryCodeSimpleType
PersonUnionStatusCodeSimpleType nc
MarriageStatusCodeSimpleType
PersonNameCategoryCodeSimpleType
*/
		case(((resolvedName='ContainerISO6346CodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ContainerISO6346CodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ContainerKindCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ContainerKindCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ConveyanceRelationshipKindCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ConveyanceRelationshipKindCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DocumentCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DocumentCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DutyTaxFeeCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DutyTaxFeeCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DutyTaxPaymentMethodCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='DutyTaxPaymentMethodCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ExaminationPlaceCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ExaminationPlaceCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='FacilityCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself.name:='FacilityUsageCodeSimpleType';
			myself:=myself.changeNamespace(niem21_occs_URI);
		};
		case(((resolvedName='FacilityCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself.name:='FacilityUsageCodeType';
			myself:=myself.changeNamespace(niem21_occs_URI);
		};
		case(((resolvedName='LocationActivityCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='LocationActivityCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='LocationFunctionCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='LocationFunctionCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='LocationKindCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='LocationKindCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='MeasureUnitCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='MeasureUnitCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='PackagingFormCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='PackagingFormCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ProcessingEstablishmentIDCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ProcessingEstablishmentIDCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='RoleOfPartyCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='RoleOfPartyCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='SealIntactStatusCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='SealIntactStatusCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='SealVerificationStatusCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='SealVerificationStatusCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ShapeCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='ShapeCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='StatusCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='StatusCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='TemperatureUnitCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='TransportMeansCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='TransportMeansCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='UNECECategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='UNECECategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='VolumeMeasureUnitCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='VolumeMeasureUnitCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
	
		case(((resolvedName='ApportionmentQualifierCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
	
		case(((resolvedName='ApportionmentQualifierCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.changeNamespace(niem21_itis_URI);
		};
		case(((resolvedName='SystemIdentifierType')) and (resolvedNamespace=niem21_intel_URI)){
			myself.name:='SystemIdentificationType';
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageStatusCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='PersonUnionStatusCodeSimpleType';
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageStatusCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='PersonUnionStatusCodeType';
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='FamilyKinshipCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='ParentChildKinshipCategoryCodeSimpleType';
			myself:=myself.changeNamespace(niem21_fs_URI);
		};
		case(((resolvedName='FamilyKinshipCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='ParentChildKinshipCategoryCodeType';
			myself:=myself.changeNamespace(niem21_fs_URI);
		};
		case(((resolvedName='PersonNameCategoryCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
//			myself:=myself.changeNamespace(niem21_ut_offender_URI);
			myself:=myself.changeNamespace(niem21_j_URI);
		};
		case(((resolvedName='PersonNameCategoryCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
//			myself:=myself.changeNamespace(niem21_ut_offender_URI);
			myself:=myself.changeNamespace(niem21_j_URI);
		};
		
		case(((resolvedName='ImagePoseCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself:=myself.changeNamespace(niem21_ut_offender_URI);
		};
		case(((resolvedName='ImagePoseCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself:=myself.changeNamespace(niem21_ut_offender_URI);
		};
		case(((resolvedName='MarriageCategoryCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='PersonUnionCategoryCodeSimpleType';
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageCategoryCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='PersonUnionCategoryCodeType';
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='OffenseCodeSimpleType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='OffenseCodeType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='OffenseLevelCodeSimpleType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='OffenseLevelCodeType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='StatuteCategoryCodeSimpleType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		case(((resolvedName='StatuteCategoryCodeType')) and (resolvedNamespace=niem21_mn_off_URI)){
			myself:=myself.changeNamespace(niem21_nonauth_URI);
		};
		
		// ansi-nist:FPCCodeType - > ncic:FPCCodeType
		// ansi-nist:FPCCodeSimpleType - > ncic:FPCCodeSimpleType
		// ansi-nist:NISTImageType ?
		// nc:ConveyancePartType -> j:ConveyancePartType
		// nc:ExplosiveType -> j:ExplosiveType
		// scr:scr:ReligionCategoryCodeType -> hl7:ReligionCodeType
		// scr:scr:ReligionCategoryCodeSimpleType -> hl7:ReligionCodeSimpleType
		// census:OccupationCategoryCodeType -> scr:OccupationCategoryCodeType
		// census:OccupationCategoryCodeSimpleType -> scr:OccupationCategoryCodeSimpleType
		/*
		case((resolvedName='FPCCodeType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace(niem21_fbi_URI);
		};
		case((resolvedName='FPCCodeSimpleType') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace(niem21_fbi_URI);
		};
		case((resolvedName='FPCCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_fbi_URI);
		};
		*/
//		Tuple{n21:String='PropertyType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
		case((resolvedName='PropertyType') and (resolvedNamespace=niem21_nc_URI)){
			myself.name:='ItemSeizureType';
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationStatusType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
	
		case((resolvedName='ActivityFacilityAssociationType') and (resolvedNamespace=niem21_j_URI)){
			myself.changeNamespace(niem21_nc_URI);
		};
		case((resolvedName='ConveyancePartType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='BiometricType') and (resolvedNamespace=niem21_nc_URI)){
			myself.name:='BiometricDataType';
			myself.changeNamespace(niem21_ansi_nist_URI);
		};
		case((resolvedName='DNALocusType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_ansi_nist_URI);
		};
		case((resolvedName='DNAType') and (resolvedNamespace=niem21_nc_URI)){
			myself.name:='BiometricDataType';
			myself.changeNamespace(niem21_ansi_nist_URI);
		};
		case((resolvedName='EngineDisplacementUnitCodeSimpleType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='EngineDisplacementUnitCodeType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='EngineType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='IntoxicationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='ItemLienAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		
		case((resolvedName='ExplosiveType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
		case((resolvedName='AmountType') and (resolvedNamespace=niem21_nc_URI) and myself.oclIsKindOf(UML::PrimitiveType)){
			// change to Class; move over attributes, typed elements of type, any dependencies; no generalization
			var AmountType:UML::Class=new UML::Class();
			AmountType.name:=myself.name;
			myself.getNearestPackage().packagedElement+=AmountType;
			myself._typedElementOfType->forEach(typedElement){typedElement.type:=AmountType;};	
			myself.clientDependency->forEach(d){d.client:=AmountType;};	
			myself.supplierDependency->forEach(d){d.supplier:=AmountType;};	
			
			myself.removeElement();
			myself:=AmountType;
		};
		
		case((resolvedName='ItemRegistrationAssociationType') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace(niem21_j_URI);
		};
	
		case((resolvedName='OccupationCategoryCodeType') and (resolvedNamespace=niem21_census_URI)){
			myself.changeNamespace(niem21_scr_URI);
		};
		case((resolvedName='OccupationCategoryCodeSimpleType') and (resolvedNamespace=niem21_census_URI)){
			myself.changeNamespace(niem21_scr_URI);
		};
		
		
		//   <xsd:element name="PersonUnionStatusCode" type="nonauth:MarriageStatusCodeType" nillable="true">
		// jxdm   <xs:element name="MaritalStatusCode" type="ndex:MaritalStatusCodeType" substitutionGroup="nc:PersonUnionStatusAbstract">
		/*
		case((resolvedName='MarriageStatusCodeType') and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='MaritalStatusCodeType';
			myself.changeNamespace(niem21_ndex_URI);
		};
		case((resolvedName='MarriageStatusCodeSimpleType') and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='MaritalStatusCodeSimpleType';
			myself.changeNamespace(niem21_ndex_URI);
		};
		*/
		
		// DateAccuracyIndicatorCodeSimpleType, DateAccuracyIndicatorCodeType: no counterpart, remove
		case((resolvedName='DateAccuracyIndicatorCodeSimpleType') and (resolvedNamespace=niem21_twpdes_URI)){
			myself.removeElement();
		};
		case((resolvedName='DateAccuracyIndicatorCodeType') and (resolvedNamespace=niem21_twpdes_URI)){
			myself.removeElement();
		};
		// fbi:ArrestCategoryCodeSimpleType to ucr:ArrestCategoryCodeSimpleType
		// fbi:ArrestCategoryCodeType to ucr:ArrestCategoryCodeType
		// fbi:ArresteeWeaponCodeSimpleType to ucr:ArresteeWeaponCodeSimpleType
		// fbi:DrugMeasurementCodeSimpleType to ucr:DrugMeasurementCodeSimpleType
		// fbi:EthnicityCodeSimpleType to ucr:EthnicityCodeSimpleType
		// fbi:ForceCategoryCodeSimpleType to ucr:ForceCategoryCodeSimpleType
		// fbi:FPCCodeSimpleType to ncic:FPCCodeSimpleType
		// fbi:IncidentExceptionalClearanceCodeSimpleType to ucr:IncidentExceptionalClearanceCodeSimpleType
		// FBI:IncidentFactorCodeSimpleType to ucr:IncidentFactorCodeSimpleType
		// fbi:JustifiableHomicideFactorsCodeSimpleType to ucr:JustifiableHomicideFactorsCodeSimpleType
		// fbi:LEOKAOfficerAssignmentCategoryCodeSimpleType to ucr:LEOKAOfficerAssignmentCategoryCodeSimpleType
		// fbi:MethodOfAccessCodeSimpleType to ndex:MethodOfAccessCodeSimpleType
		// fbi:MethodOfEntryCodeSimpleType to ucr:MethodOfEntryCodeSimpleType
		// fbi:MultipleArresteeSegmentsCodeSimpleType to ucr:MultipleArresteeSegmentsCodeSimpleType
		// fbi:ResidentCodeSimpleType to ucr:ResidentCodeSimpleType
		// fbi:VictimCategoryCodeSimpleType to ucr:VictimCategoryCodeSimpleType
		// itis:LightingCodeSimpleType to mmuc:LightingCodeSimpleType
		case((resolvedName='LightingCodeType') and (resolvedNamespace=niem21_itis_URI)){
			myself.name:='RoadwayLightingCodeType';
			myself.changeNamespace(niem21_mmucc_2_URI);
		};
		case((resolvedName='LightingCodeSimpleType') and (resolvedNamespace=niem21_itis_URI)){
			myself.name:='RoadwayLightingCodeSimpleType';
			myself.changeNamespace(niem21_mmucc_2_URI);
		};
		case((resolvedName='AggravatedAssaultHomicideFactorsCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='VictimCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='VictimCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='ResidentCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='ResidentCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='PropertyCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='PropertyCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='PropertyLossCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='PropertyLossCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='MultipleArresteeSegmentsCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='MultipleArresteeSegmentsCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='MethodOfEntryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='MethodOfEntryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='MethodOfAccessCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ndex_URI);
		};
		case((resolvedName='MethodOfAccessCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ndex_URI);
		};
		case((resolvedName='LocationCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='LocationCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='LEOKAOfficerAssignmentCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='LEOKAOfficerAssignmentCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='LEOKAActivityCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='LEOKAActivityCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='JustifiableHomicideFactorsCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='JustifiableHomicideFactorsCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='InjuryCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='InjuryCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='IncidentFactorCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='IncidentFactorCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='IncidentExceptionalClearanceCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='IncidentExceptionalClearanceCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='FPCCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_fbi_URI);
		};
		case((resolvedName='FPCCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_fbi_URI);
		};
		case((resolvedName='IncidentBiasMotivationCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='IncidentBiasMotivationCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='ForceCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='ForceCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='EthnicityCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='EthnicityCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='DrugMeasurementCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='DrugMeasurementCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='CriminalActivityCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='CriminalActivityCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='DrugCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='DrugCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='ArresteeWeaponCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='ArresteeWeaponCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='ArrestCategoryCodeType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
	
		case((resolvedName='ArrestCategoryCodeSimpleType') and (resolvedNamespace=niem21_fbi_URI)){
			myself.changeNamespace(niem21_ucr_URI);
		};
		case((resolvedName='DocumentAssociationType') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace(niem21_nc_URI);
		};
		case((resolvedName='ManifestType') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace(niem21_nc_URI);
		};
		
		// fbi is ncic, ucr is niem30_mn_off_URI
		// TODO: AmountType change base from decimal to ObjectType; add Amount element
		// TODO: resolve AuthorityFigureAssociationType
		
	};			
				return;
}
helper UML::Classifier::changeNamespace(niem21:String):UML::Classifier{
	log('INFO: change namespace  Class '+self.qualifiedName);
	//  this is in jxdm namespace
	var j:UML::Package=niem21.findOrCreateNamespace();
	var existingClassifier:UML::Classifier=j.ownedType
		->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name=self.name))
		->oclAsType(UML::Classifier)->asSequence()->first();
	if(existingClassifier.oclIsUndefined())	then{
		// make sure properties have references
			var nc:UML::Package=self.getNearestPackage();
			var namespace:String=nc.getTargetNamespace();
			self.attribute->forEach(implementingProperty){
				var existingProperty:UML::Property=nc.findTopLevelElement(implementingProperty.name);
					implementingProperty.makeReferences(implementingProperty.name,namespace,existingProperty);
			};
			j.packagedElement+=self;
			existingClassifier:=self;
			// 
		}else{
			// move refs and delete
			if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and self.oclIsKindOf(UML::StructuredClassifier))then{
				log('INFO: removing redundant  Classifier '+self.qualifiedName);
				// TODO: move subtypes, type refs
				self.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
				self.removeElement();
			}endif;	
	}endif;
	return existingClassifier;
}
query UML::Package::findTopLevelElement(n30Name:String):UML::Property=
	self.ownedType
		->select(t|t.oclIsKindOf(UML::Class) and t.IsStereotypeApplied(NIEMPropertyHolderStereotype))
		.oclAsType(UML::Class).ownedAttribute->select(a|a.name=n30Name)
		->asSequence()->first();
helper UML::Property::changeNamespace(n30Name:String,namespace:String):UML::Property{
	var myself:UML::Property=self;
	log('INFO: renaming  Property '+self.qualifiedName);
	var implementingProperty:UML::Property=myself;
	var nc:UML::Package=namespace.findOrCreateNamespace();
	var existingProperty:UML::Property=nc.findTopLevelElement(n30Name);
	if(myself.isPropertyHolderElement())then{
		// move over to new namespace		
			implementingProperty:=existingProperty;
			if(existingProperty.oclIsUndefined())	then{
				implementingProperty:=myself;
				myself.name:=n30Name;
				var propertyHolder:UML::Class=nc.getPropertyHolder();
				propertyHolder.ownedAttribute+=myself;
					
					//myself.removeStereotype('AugmentationType');
			}else{
				// move refs and delete
				myself.supplierReferenceRealizations()->forEach(ref){ref.supplier:=existingProperty;};
					log('INFO: removing redundant  Property '+self.qualifiedName);
					// TODO: move subtypes, type refs
					myself.removeElement();
			}endif;
			// rename any referencing elements
			implementingProperty.supplierReferences()
				->select(p|p.oclIsKindOf(UML::Property)).oclAsType(UML::Property)
				->forEach(p){
					p.name:=implementingProperty.name;
					// make sure type consistent
					p.type:=implementingProperty.type;
				};	
	
	}else{
		// change the name 
		//  and make sure there is a References
		implementingProperty:=implementingProperty.makeReferences(n30Name,namespace,existingProperty);
		/*
		if(implementingProperty.clientDependency->select(d|d.isReferences()).supplier->select(s|s.oclIsKindOf(UML::Property))->isEmpty())then{
			var myPackage:UML::Package=implementingProperty.getNearestPackage();
			var realizes:UML::Realization=myPackage.createRealizes();
			realizes.client+=implementingProperty;
			if(existingProperty.oclIsUndefined())then{
				existingProperty:=myPackage.findTopLevelElement(n30Name);
				if(existingProperty.oclIsUndefined())then{existingProperty:=myPackage.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{existingProperty:=nc.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{
					// not found, we will have to create it
					existingProperty:=findOrCreateElement(n30Name,namespace);
					existingProperty.type:=implementingProperty.type;
					existingProperty.aggregation:=implementingProperty.aggregation;
					existingProperty.isDerivedUnion:=implementingProperty.isDerivedUnion;
					existingProperty.setLower(implementingProperty.lower);
					existingProperty.setUpper(implementingProperty.upper);
				}endif;
			}endif;
			 realizes.supplier+=existingProperty;
		 }endif;
		 */
		//implementingProperty.name:=n30Name;
	}endif;
			return implementingProperty;	
}
helper UML::Property::makeReferences(n30Name:String,namespace:String, existingPropertyIn:UML::Property):UML::Property{
	var implementingProperty:UML::Property=self.renameProperty(n30Name);
	// if implementingproperty already exists, use it, remove self, and hook up references to existing implementingproperty
	var existingProperty:UML::Property=existingPropertyIn;
		if(implementingProperty.clientDependency->select(d|d.isReferences()).supplier->select(s|s.oclIsKindOf(UML::Property))->isEmpty())then{
			var myPackage:UML::Package=implementingProperty.getNearestPackage();
			var realizes:UML::Realization=myPackage.createRealizes();
			realizes.client+=implementingProperty;
			if(existingProperty.oclIsUndefined())then{
				existingProperty:=myPackage.findTopLevelElement(n30Name);
				var nc:UML::Package=namespace.findOrCreateNamespace();
				if(existingProperty.oclIsUndefined())then{existingProperty:=myPackage.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{existingProperty:=nc.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{
					// not found, we will have to create it
					existingProperty:=findOrCreateElement(n30Name,namespace);
					//existingProperty.type:=implementingProperty.type;
					existingProperty.aggregation:=implementingProperty.aggregation;
					existingProperty.isDerivedUnion:=implementingProperty.isDerivedUnion;
					existingProperty.isDerived:=implementingProperty.isDerived;
					existingProperty.isReadOnly:=implementingProperty.isReadOnly;
					existingProperty.setLower(implementingProperty.lower);
					existingProperty.setUpper(implementingProperty.upper);
				}endif;
			}endif;
			existingProperty.type:=implementingProperty.type;// propagate type in case type was changed
			 realizes.supplier+=existingProperty;
		 }endif;
	return implementingProperty;	
}
helper UML::Package::createRealizes():UML::Realization{
	var myPackage:UML::Package=self;
	var realizes:UML::Realization=new UML::Realization();
	realizes.applyStereotype(NIEMReferencesStereotype);
	myPackage.packagedElement+=realizes;
	return realizes;
}
helper UML::Property::baseNiem21to30Property():UML::Property{
	// base processing on resolved propertyName/namespace
	var myself:UML::Property:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedClassName:String=self.classifier.name;
	var resolvedNamespace:String=self.getResolvedNamespace();
	if(resolvedName.endsWith('Reference') and resolvedNamespace.startsWith(baseNiemNamespaceNiem2) and self.isPsmXsdElement())then{
			log('INFO: renaming Reference Property '+self.qualifiedName);
			var newName:String=resolvedName.substring(1,resolvedName.length()-9);
			myself:=myself.renameProperty(newName);
			resolvedName:=newName;	
		}endif;
		
	// any non-PropertyHolder properties which are typed by an augmentation but have no substitutionGroup need to be removed
	var propertyHolderProperty:UML::Property=findPropertyHolderProperty(resolvedName,resolvedName,resolvedNamespace);
	
	if(not(myself.isPropertyHolderElement()) 
		 and myself.type.oclAsType(UML::Classifier).isAugmentationType()
		 and (propertyHolderProperty.oclIsUndefined() or propertyHolderProperty.subsettedProperty->isEmpty())	
		 )then{
			if(propertyHolderProperty.oclIsUndefined())then{
				propertyHolderProperty:=myself.cloneAsPropertyHolder(resolvedNamespace);
			}endif;
			myself.removeElement();
			myself:=null;
	}endif;
	return myself;
}
helper UML::Property::niem21to30Property(){
	// base processing on resolved propertyName/namespace
	var myself:UML::Property:=self.baseNiem21to30Property();
	if(myself.oclIsUndefined())then{return;}endif;
	//var myself:UML::Property:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedClassName:String=self.classifier.name;
	var resolvedNamespace:String=self.getResolvedNamespace();
	/*
	if(resolvedName.endsWith('Reference') and resolvedNamespace.startsWith(baseNiemNamespaceNiem2) and self.isPsmXsdElement())then{
			log('INFO: renaming Reference Property '+self.qualifiedName);
			var newName:String=resolvedName.substring(1,resolvedName.length()-9);
			myself:=myself.renameProperty(newName);
			resolvedName:=newName;	
		}endif;
		
	// any non-PropertyHolder properties which are typed by an augmentation but have no substitutionGroup need to be removed
	var propertyHolderProperty:UML::Property=findPropertyHolderProperty(resolvedName,resolvedName,resolvedNamespace);
	
	if(not(myself.isPropertyHolderElement()) 
		 and myself.type.oclAsType(UML::Classifier).isAugmentationType()
		 and (propertyHolderProperty.oclIsUndefined() or propertyHolderProperty.subsettedProperty->isEmpty())	
		 )then{
			if(propertyHolderProperty.oclIsUndefined())then{
				propertyHolderProperty:=myself.cloneAsPropertyHolder(resolvedNamespace);
			}endif;
			myself.removeElement();
		return;
	}endif;
	*/
	property21to3->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: renaming  Property '+self.qualifiedName);
			myself:=myself.renameProperty(n21name.n3);
		};
	property21to3WithNamespace->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: namespace change for Property '+self.qualifiedName);
			myself:=myself.changeNamespace(n21name.n3,n21name.n3namespace);
		};
		
	
	switch{
		/*
		case((resolvedName='ConveyanceRegistrationPlateIdentification') // namespace already changed 
			and (resolvedNamespace=niem21_j_URI) and not(resolvedClassName='ConveyanceType')){
			myself.removeElement();
		}
		*/		
		case((resolvedName='PersonNameCategoryCode') and (resolvedNamespace=niem21_scr_URI)){
			myself.removeElement();
		};
		case((resolvedName='personNameCategoryCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='PersonNameAugmentationType')){
			myself.removeElement();
		};
		case((resolvedName='PersonDependent') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='VehicleMotorCarrierIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		
		case((resolvedName='FirearmGaugeText') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonAlternateName') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='FingerprintSet') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonFingerprintSet') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonFingerprintSet') and (resolvedNamespace=niem21_scr_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonFingerprintSetAugmentation') and (resolvedNamespace=niem21_scr_URI)){
			myself.removeElement();
		};
		case((resolvedName='AdoptionEffectiveDate') and (resolvedNamespace=niem21_scr_URI)){
			myself.removeElement();
		};
		case((resolvedName='PhysicalFeatureDescriptionDetail') and (resolvedNamespace=niem21_ansi_nist_URI)){
//			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureDescriptionDetail','PhysicalFeatureDescriptionDetail','BiometricDetail',niem21_ansi_nist_URI);
			myself.removeElement();
		};
		
		/*
		case(((resolvedName='IdentificationJurisdictionText')
				or(resolvedName='IdentificationJurisdictionISO3166Alpha3Code')
				or(resolvedName='IdentificationJurisdictionFIPS10-4Code')
				IdentificationJurisdictionFIPS10-4Code
			) and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
    */
		case((resolvedName='SecuritiesCollectionEndDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		
		case((resolvedName='ObligationEndDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};

		case((resolvedName='AssociationEndDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='RoleOfPerson') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		
		case((resolvedName='PersonGuardian') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonAuthorityFigure') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonParent') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonChild') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='FamilyKinshipCategory') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='AlienCitizenship') and (resolvedNamespace=niem21_im_URI)){
			myself.removeElement();
		};
		case((resolvedName='AlienCitizenshipCountryName') and (resolvedNamespace=niem21_im_URI)){
			myself.removeElement();
		};
		case((resolvedName='AlienCitizenshipType') and (resolvedNamespace=niem21_im_URI)){
			myself.removeElement();
		};
		   
		case((resolvedName='FaceImageSubjectPoseCode') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
				
		// remove AddressRepresentation, remove subsets from AddressFullText, StructuredAddress becomes Address
		case((resolvedName='AddressRepresentation') and (resolvedNamespace=niem21_nc_URI)){
			myself.removeElement();
		};
		case((resolvedName='PersonPalmPrint') and (resolvedNamespace=niem21_j_URI)){
			myself.removeElement();
		};
		case((resolvedName='FaceImageAttribute') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
		case((resolvedName='FaceImageAttributeAbstract') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
		case((resolvedName='FaceImageAttributeCode') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
		case((resolvedName='FaceImageAttributeText') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
		case((resolvedName='FaceImageSubjectPose') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.removeElement();
		};
		/*
		case((resolvedName='personNameCategoryCode') and (resolvedNamespace=niem21_j_URI)){
			myself.removeElement();
		};
		*/
		case((resolvedName='ReligionCategoryCode') and (resolvedNamespace=niem21_scr_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
			myself:=myself.changeNamespace('PersonReligion',niem21_nc_URI);
		};
		case((resolvedName='TelecommunicationDevice') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('DeviceType',niem21_nc_URI);
		};
		case((resolvedName='VehicleUseCode') and (resolvedNamespace=niem21_nc_URI)){
//			myself:=myself.changeNamespace('VehicleUseCode',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('VehicleUseCode','VehicleUseCode','VehicleUse',niem21_j_URI);
			myself:=myself.changeNamespace('VehicleUseCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleUseCode','VehicleUseANSID20Code','ConveyanceUse',niem21_nc_URI);
			
		};
		
		case((resolvedName='Organization') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='OrganizationContactInformationAssociationType')){
			var ContactEntity:UML::Property=myself.organizationEntity('ContactEntity');
			ContactEntity.setSubstitutionGroup('Contact',niem21_nc_URI);
		};
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonContactInformationAssociationType')){
			var ContactEntity:UML::Property=myself.personEntity('ContactEntity');
			ContactEntity.setSubstitutionGroup('Contact',niem21_nc_URI);
		};
	
		case((resolvedName='Organization') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='OrganizationItemAssociationType')){
			myself.organizationEntity('Entity');
		};
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonItemAssociationType')){
			myself.personEntity('Entity');
		};
				//Tuple{n21:String='StructuredAddress',n21namespace:String=niem21_nc_URI,n3:String='Address'},
		
		case(((resolvedName='LocationAddress')or(resolvedName='Address')or(resolvedName='StructuredAddress')) and (resolvedNamespace=niem21_nc_URI)){
			
			myself.propertyWithNewSubstitutionGroup(resolvedName,'Address','LocationAddressAbstract',niem21_nc_URI);
		};
//  <xs:element name="OrganizationAugmentation" type="j:OrganizationAugmentationType" substitutionGroup="nc:OrganizationAugmentationPoint">
		
		case((resolvedName='OrganizationAugmentation') and (resolvedNamespace=niem21_j_URI)){
			
			myself.propertyWithNewSubstitutionGroup('OrganizationAugmentation','OrganizationAugmentation','OrganizationAugmentationPoint',niem21_j_URI);
		};
		//  <xs:element name="OrganizationORIIdentification" type="nc:IdentificationType" substitutionGroup="j:OrganizationIdentificationAbstract">
		case((resolvedName='OrganizationORIIdentification') and (resolvedNamespace=niem21_j_URI)){
//			myself.propertyWithNewSubstitutionGroup('OrganizationORIIdentification','OrganizationORIIdentification','OrganizationIdentificationAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('OrganizationORIIdentification','OrganizationORIIdentification','OrganizationIdentification',niem21_j_URI);
		};
		//   <xs:element name="SubjectCautionInformationCode" type="ncic:CMCCodeType" substitutionGroup="j:SubjectCautionInformation">
		case((resolvedName='SubjectCautionInformationCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('SubjectCautionInformationCode','SubjectCautionInformationCode','SubjectCautionInformation',niem21_j_URI);
		};
		
		//   <xs:element name="PersonEyewearText" type="nc:TextType" substitutionGroup="nc:PersonEyewearAbstract">
		case((resolvedName='PersonEyewearDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonEyewearDescriptionText','PersonEyewearText','PersonEyewearAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonEyewearDescriptionText','PersonEyewearText','PersonEyewear',niem21_nc_URI);
			
		};
		//   <xs:element name="PersonBuildText" type="nc:TextType" substitutionGroup="nc:PersonBuildAbstract">
		case((resolvedName='PersonBuildText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonBuildText','PersonBuildText','PersonBuildAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonBuildText','PersonBuildText','PersonBuild',niem21_nc_URI);
		};
		//   <xs:element name="PersonReligionText" type="nc:TextType" substitutionGroup="nc:ReligionCategoryAbstract">
		case((resolvedName='PersonReligionText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonReligionText','PersonReligionText','ReligionCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonReligionText','PersonReligionText','PersonReligion',niem21_nc_URI);
		};
		//  <xs:element name="DocumentCategoryText" type="nc:TextType" substitutionGroup="nc:DocumentCategory">
		case((resolvedName='DocumentCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DocumentCategoryText','DocumentCategoryText','DocumentCategory',niem21_nc_URI);
		};
		
		//   <xs:element name="SpeedUnitCode" type="unece:VelocityCodeType" substitutionGroup="nc:SpeedUnitAbstract">
  		//<xs:element name="SpeedUnitAbstract" substitutionGroup="nc:MeasureUnit" abstract="true">
	
		case((resolvedName='SpeedUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			var VelocityCodeType:UML::Enumeration:=findOrCreateEnumeration('VelocityCodeType',niem21_unece_URI);
			var VelocityCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('VelocityCodeSimpleType',niem21_unece_URI);
			if(not(VelocityCodeType.general->includes(VelocityCodeSimpleType)))then{
				var g:UML::Generalization=new UML::Generalization();
				g.specific:=VelocityCodeType;
				g.general:=VelocityCodeSimpleType;
			}endif;
			myself.type:=VelocityCodeType;
//				var SpeedUnitAbstract:UML::Property=findOrCreateElement('SpeedUnitAbstract',niem21_nc_URI);
				var SpeedUnitAbstract:UML::Property=findOrCreateElement('SpeedUnit',niem21_nc_URI);
				SpeedUnitAbstract.isDerivedUnion:=true;
				SpeedUnitAbstract.isDerived:=true;
				SpeedUnitAbstract.isReadOnly:=true;
			
				SpeedUnitAbstract.setSubstitutionGroup('MeasureUnit',niem21_nc_URI);
			
//			myself.propertyWithNewSubstitutionGroup('SpeedUnitCode','SpeedUnitCode','SpeedUnitAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('SpeedUnitCode','SpeedUnitCode','SpeedUnit',niem21_nc_URI);
		};
		
		//   <xs:element name="BinaryCategoryText" type="nc:TextType" substitutionGroup="nc:BinaryCategoryAbstract">
		case((resolvedName='BinaryCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('BinaryCategoryText','BinaryCategoryText','BinaryCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('BinaryCategoryText','BinaryCategoryText','BinaryCategory',niem21_nc_URI);
		};
		
////////////////////////////////////////namespace change	
/*	
		case(((resolvedName='PropertyHolding')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ItemSeizureDisposition',niem21_j_URI);
		};
	
		case(((resolvedName='RoleOfItemReference')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ItemSeizureItem',niem21_j_URI);
		};
		case(((resolvedName='PropertySeizedLocation')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ItemSeizedLocation',niem21_j_URI);
		};
		case(((resolvedName='PropertyRegistrationAssociation')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ItemRegistrationAssociation',niem21_j_URI);
		};
		case(((resolvedName='RegistrationAuthorityName')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('RegistrationAuthorityName',niem21_j_URI);
		};
		case(((resolvedName='RegistrationDuplicateQuantity')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('RegistrationDuplicateQuantity',niem21_j_URI);
		};
		case(((resolvedName='RegistrationEffectiveDate')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('RegistrationEffectiveDate',niem21_j_URI);
		};
		
		case(((resolvedName='ActivityFacilityAssociation')) and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.changeNamespace('ActivityFacilityAssociation',niem21_nc_URI);
		};
		
		///////////////////////////////////////////////////////////////////////////////////
		case(((resolvedName='Lessee')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('Lessee',niem21_j_URI);
		};
		case(((resolvedName='LesseeJurisdictionAuthority')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LesseeJurisdictionAuthority',niem21_j_URI);
		};
		case(((resolvedName='Lessor')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('Lessor',niem21_j_URI);
		};
		case(((resolvedName='LessorIdentification')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LessorIdentification',niem21_j_URI);
		};
		case(((resolvedName='Lien')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('Lien',niem21_j_URI);
		};
		case(((resolvedName='LienAmount')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienAmount',niem21_j_URI);
		};
		case(((resolvedName='LienDate')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienDate',niem21_j_URI);
		};
		case(((resolvedName='LienHolder')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienHolder',niem21_j_URI);
		};
		case(((resolvedName='LienReleaseDate')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienReleaseDate',niem21_j_URI);
		};
		case(((resolvedName='LienReleaseReason')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienReleaseReason',niem21_j_URI);
		};
		case(((resolvedName='RegistrationIdentification')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('RegistrationIdentification',niem21_j_URI);
		};
		case(((resolvedName='RegistrationItem')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('RegistrationItem',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePartID')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartID',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePartBrand')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartBrand',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePartCategory')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartCategory',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePartDescriptionText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartDescriptionText',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePart')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePart',niem21_j_URI);
		};
		case(((resolvedName='ConveyancePartAssociation')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartAssociation',niem21_j_URI);
		};
		case(((resolvedName='TitleOfCertifyingOfficerText')) and (resolvedNamespace=niem21_im_URI)){
			myself:=myself.changeNamespace('TitleOfCertifyingOfficerText',niem21_j_URI);
		};
		
		case((resolvedName='DriverLicense') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicense',niem21_j_URI);
		};
		
		case((resolvedName='DriverLicenseAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseAssociation',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseBase') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseBase',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseCommercialClass') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseCommercialClass',niem21_j_URI);
		};
		case((resolvedName='PersonGangAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonGangAssociation',niem21_j_URI);
		};
		case((resolvedName='PersonIntoxication') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonIntoxication',niem21_j_URI);
		};
		case((resolvedName='PersonInvolvedInDrivingIncidentAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonInvolvedInDrivingIncidentAssociation',niem21_j_URI);
		};
		case((resolvedName='Title') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Title',niem21_j_URI);
		};
		case((resolvedName='TitleCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleCategoryText',niem21_j_URI);
		};
		case((resolvedName='TitleDuplicateQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleDuplicateQuantity',niem21_j_URI);
		};
		case((resolvedName='TitleHolder') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleHolder',niem21_j_URI);
		};
		case((resolvedName='TitleIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleIdentification',niem21_j_URI);
		};
		case((resolvedName='TitleIssueDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleIssueDate',niem21_j_URI);
		};
		case((resolvedName='TitleIssuingAuthorityName') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleIssuingAuthorityName',niem21_j_URI);
		};
		case((resolvedName='TitleIssuingJurisdiction') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleIssuingJurisdiction',niem21_j_URI);
		};
		case((resolvedName='TitleItem') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleItem',niem21_j_URI);
		};
		case((resolvedName='TitleLienIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleLienIndicator',niem21_j_URI);
		};
		case((resolvedName='TitleStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleStatus',niem21_j_URI);
		};
		case((resolvedName='TitleStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('TitleStatusCode',niem21_j_URI);
		};
		case((resolvedName='ToothPositionIDCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ToothPositionIDCode',niem21_j_URI);
		};
		case((resolvedName='VehicleBrand') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrand',niem21_j_URI);
		};
		case((resolvedName='VehicleBrandDamagePercentageCategory') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDamagePercentageCategory',niem21_j_URI);
		};
		case((resolvedName='VehicleBrandDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDate',niem21_j_URI);
		};
		case((resolvedName='VehicleBrandDesignation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDesignation',niem21_j_URI);
		};
		case((resolvedName='VehicleBrander') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrander',niem21_j_URI);
		};
		case((resolvedName='VehicleBranderIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBranderIdentification',niem21_j_URI);
		};
		case((resolvedName='VehicleBrandSalvagePercentage') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandSalvagePercentage',niem21_j_URI);
		};
		case((resolvedName='VehicleBrandVehicleDisposition') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandVehicleDisposition',niem21_j_URI);
		};
		
		case((resolvedName='VehicleBrandVehicleSourceName') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandVehicleSourceName',niem21_j_URI);
		};
		case((resolvedName='VehicleEmissionInspection') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleEmissionInspection',niem21_j_URI);
		};
		case((resolvedName='VehicleEmissionInspectionQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleEmissionInspectionQuantity',niem21_j_URI);
		};
		case((resolvedName='VehicleGarage') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleGarage',niem21_j_URI);
		};
		case((resolvedName='VehicleGarageIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleGarageIndicator',niem21_j_URI);
		};
		case((resolvedName='VehicleInspection') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspection',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionAddress') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionAddress',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionEmissionCertificationIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionEmissionCertificationIdentification',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionEmissionPassIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionEmissionPassIndicator',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionInspectorIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionInspectorIdentification',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionJurisdictionAuthority') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionJurisdictionAuthority',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionSafetyPassIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionSafetyPassIndicator',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionStationIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionStationIdentification',niem21_j_URI);
		};
		case((resolvedName='VehicleInspectionTestCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionTestCategoryText',niem21_j_URI);
		};
		case((resolvedName='VehicleInvoiceDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInvoiceDate',niem21_j_URI);
		};
		case((resolvedName='VehicleInvoiceIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInvoiceIdentification',niem21_j_URI);
		};
		case((resolvedName='VehiclePaperMCOIssuedIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehiclePaperMCOIssuedIndicator',niem21_j_URI);
		};
		case((resolvedName='VehicleSafetyInspection') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleSafetyInspection',niem21_j_URI);
		};
		case((resolvedName='VehicleShipDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleShipDate',niem21_j_URI);
		};
		case((resolvedName='VehicleTaxableAmount') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleTaxableAmount',niem21_j_URI);
		};
		case((resolvedName='VehicleTitle') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleTitle',niem21_j_URI);
		};
		case((resolvedName='VehicleTitleAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleTitleAssociation',niem21_j_URI);
		};
		
		
		case((resolvedName='VehicleVINAText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleVINAText',niem21_j_URI);
		};
		case((resolvedName='VehicleWantedIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleWantedIndicator',niem21_j_URI);
		};
		case((resolvedName='PersonOrganDonorCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonOrganDonorCode',niem21_j_URI);
		};
		case((resolvedName='TelephoneNumberAugmentation') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('TelephoneNumber',niem21_nc_URI);
		};
		case((resolvedName='DocumentAssociation') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('DocumentAssociation',niem21_nc_URI);
		};
		case((resolvedName='DocumentStatusDescriptionText') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('DocumentStatusDescriptionText',niem21_nc_URI);
		};
		case((resolvedName='ManifestCategoryCodeDescriptionText') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('ManifestCategoryCodeDescriptionText',niem21_nc_URI);
		};
		case((resolvedName='PrimaryDocument') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('PrimaryDocument',niem21_nc_URI);
		};
		case((resolvedName='TransmittedDate') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('ManifestTransmittedDate',niem21_nc_URI);
		};
		*/
////////////////////////////////////////namespace change block end		
		
		///////////////////////////////////////////////////////////////
		case((resolvedName='BiometricCaptureDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var BiometricCaptureDescriptionText:UML::Property=createElement('BiometricCaptureDescriptionText');
			BiometricCaptureDescriptionText.type:=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			BiometricCaptureType.ownedAttribute+=BiometricCaptureDescriptionText;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricCaptureSourceText') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var BiometricCaptureSource:UML::Property=createElement('BiometricCaptureSource');
			BiometricCaptureSource.type:=findOrCreateClass('AcquisitionSourceType',niem21_ansi_nist_URI);
			BiometricCaptureType.ownedAttribute+=BiometricCaptureSource;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricCaptureDate') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var CaptureDate:UML::Property=createElement('CaptureDate');
			CaptureDate.type:=findOrCreateClass('DateType',niem21_nc_URI);
			BiometricCaptureType.ownedAttribute+=CaptureDate;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricImage') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=null;// may need to have some substitution groups
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
			myself.changeNamespace('BiometricImage',niem21_ansi_nist_URI);
		};
		/*
		  <xs:element name="DNASampleDetail" type="biom:DNASampleDetailType" substitutionGroup="biom:BiometricDetail">
		    <xs:element name="DNASampleImage" type="biom:DNAImageType" substitutionGroup="biom:BiometricImage">
		  
		*/
			case((resolvedName='DNALocus') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=findOrCreateClass('DNASampleDetailType',niem21_ansi_nist_URI);
			var DNASampleDetail:UML::Property=myself.changeNamespace('DNASampleDetail',niem21_ansi_nist_URI);
			DNASampleDetail.propertyWithNewSubstitutionGroup('DNALocus','DNASampleDetail','BiometricDetail',niem21_ansi_nist_URI);
		};
			case((resolvedName='DNAImage') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=findOrCreateClass('DNAImageType',niem21_ansi_nist_URI);
			var DNASampleImage:UML::Property=myself.changeNamespace('DNASampleImage',niem21_ansi_nist_URI);
			DNASampleImage.propertyWithNewSubstitutionGroup('DNAImage','DNASampleImage','BiometricImage',niem21_ansi_nist_URI);
		};
		 // <xs:element name="PhysicalFeatureDescriptionDetail" type="biom:PhysicalFeatureDescriptionType" substitutionGroup="biom:BiometricDetail">
		//  <xs:element name="PhysicalFeatureCategoryCode" type="biom:PhysicalFeatureCategoryCodeType" substitutionGroup="biom:PhysicalFeatureCategory">
		case((resolvedName='PhysicalFeatureCategoryCode') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureCategoryCode','PhysicalFeatureCategoryCode','PhysicalFeatureCategory',niem21_ansi_nist_URI);
		};
		//		Tuple{n21:String='ScreeningIdentificationAugmentation',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentation'},
		case((resolvedName='ScreeningIdentificationAugmentation') and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup('ScreeningIdentificationAugmentation','IdentificationAugmentation','IdentificationAugmentationPoint',niem21_nc_URI);
		};
		
		//   <xs:element name="PhysicalFeatureDescriptionDetail" type="biom:PhysicalFeatureDescriptionType" substitutionGroup="biom:BiometricDetail">
		// this is resulting in attribute on wrong class, should be on BiometricDataType
			case((resolvedName='PhysicalFeatureDescriptionDetail') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureDescriptionDetail','PhysicalFeatureDescriptionDetail','BiometricDetail',niem21_ansi_nist_URI);
		};
		
		
		
		//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryText',n3namespace:String=niem21_nc_URI},
		//  <xs:element name="TelephoneNumberCategoryText" type="nc:TextType" substitutionGroup="nc:TelephoneNumberCategory">
		
		case((resolvedName='TelephoneCategoryDescriptionText') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('TelephoneNumberCategoryText',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('TelephoneCategoryDescriptionText','TelephoneNumberCategoryText','TelephoneNumberCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='TelephoneCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryCode',n3namespace:String=niem21_nc_URI},
		//  <xs:element name="TelephoneNumberCategoryCode" type="xCard:TelephoneCategoryCodeType" substitutionGroup="nc:TelephoneNumberCategory">
		
		case((resolvedName='TelephoneCategoryCode') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('TelephoneNumberCategoryCode',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('TelephoneCategoryCode','TelephoneNumberCategoryCode','TelephoneNumberCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='PhysicalFeatureCategoryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PhysicalFeatureCategoryCode" type="ncic:SMTCodeType" substitutionGroup="nc:PhysicalFeatureCategory">
		
		case((resolvedName='PhysicalFeatureCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PhysicalFeatureCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureCategoryCode','PhysicalFeatureCategoryCode','PhysicalFeatureCategory',niem21_nc_URI);
		};
		
		
		//		Tuple{n21:String='PersonSkinToneCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSkinToneCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonSkinToneCode" type="ncic:SKNCodeType" substitutionGroup="nc:PersonSkinTone">
		
		case((resolvedName='PersonSkinToneCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonSkinToneCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonSkinToneCode','PersonSkinToneCode','PersonSkinTone',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonSexCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSexCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonSexCode" type="ncic:SEXCodeType" substitutionGroup="nc:PersonSex">
		
		case((resolvedName='PersonSexCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonSexCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonSexCode','PersonSexCode','PersonSex',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonResidentCode',n21namespace:String=niem21_nc_URI,n3:String='PersonResidentCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonResidentCode" type="ucr:ResidentCodeType" substitutionGroup="nc:PersonResident">
		
		case((resolvedName='PersonResidentCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonResidentCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonResidentCode','PersonResidentCode','PersonResident',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonRaceCode',n21namespace:String=niem21_nc_URI,n3:String='PersonRaceCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonRaceCode" type="ncic:RACCodeType" substitutionGroup="nc:PersonRace">
		
		case((resolvedName='PersonRaceCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonRaceCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonRaceCode','PersonRaceCode','PersonRace',niem21_nc_URI);
		};
	//		Tuple{n21:String='PersonIssuedCourtOrderAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIssuedCourtOrderAssociation',n3namespace:String=niem21_j_URI},
	//  <xs:element name="PersonIssuedCourtOrderAssociation" type="nc:PersonDocumentAssociationType">
	
		case((resolvedName='PersonIssuedCourtOrderAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonIssuedCourtOrderAssociation',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonIssuedCourtOrderAssociation','PersonIssuedCourtOrderAssociation','PersonDocumentAssociationType',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselTrailerMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselTrailerMakeCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselTrailerMakeCode" type="ncic:BTMACodeType" substitutionGroup="nc:VehicleMake">
		
		case((resolvedName='VesselTrailerMakeCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselTrailerMakeCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselTrailerMakeCode','VesselTrailerMakeCode','VehicleMake',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselPropulsionCode',n21namespace:String=niem21_nc_URI,n3:String='VesselPropulsionCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselPropulsionCode" type="ncic:PROCodeType" substitutionGroup="nc:VesselPropulsion">
		
		case((resolvedName='VesselPropulsionCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselPropulsionCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselPropulsionCode','VesselPropulsionCode','VesselPropulsion',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselMakeCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselMakeCode" type="ncic:BMACodeType" substitutionGroup="nc:VesselMake">
		
		case((resolvedName='VesselMakeCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselMakeCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselMakeCode','VesselMakeCode','VesselMake',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselHullShapeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullShapeCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselHullShapeCode" type="ncic:HSPCodeType" substitutionGroup="nc:VesselHullShape">
		
		case((resolvedName='VesselHullShapeCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselHullShapeCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselHullShapeCode','VesselHullShapeCode','VesselHullShape',niem21_nc_URI);
		};
//		Tuple{n21:String='VesselHullMaterialCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullMaterialCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="VesselHullMaterialCode" type="ncic:HULCodeType" substitutionGroup="nc:VesselHullMaterial">
		
		case((resolvedName='VesselHullMaterialCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselHullMaterialCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselHullMaterialCode','VesselHullMaterialCode','VesselHullMaterial',niem21_nc_URI);
		};
//		Tuple{n21:String='VesselColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorSecondaryCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="VesselColorSecondaryCode" type="ncic:BCOCodeType" substitutionGroup="nc:ItemColor">

		case((resolvedName='VesselColorSecondaryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselColorSecondaryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselColorSecondaryCode','VesselColorSecondaryCode','ItemColor',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorPrimaryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselColorPrimaryCode" type="ncic:BCOCodeType" substitutionGroup="nc:ItemColor">
		
		case((resolvedName='VesselColorPrimaryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselColorPrimaryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselColorPrimaryCode','VesselColorPrimaryCode','ItemColor',niem21_nc_URI);
		};
		//		Tuple{n21:String='VesselCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselCategoryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VesselCategoryCode" type="ncic:BTYCodeType" substitutionGroup="nc:VesselCategory">
		
		case((resolvedName='VesselCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VesselCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VesselCategoryCode','VesselCategoryCode','VesselCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleTransmissionCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleTransmissionCategoryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleTransmissionCategoryCode" type="ansi_d20:VehicleTransmissionCategoryCodeType" substitutionGroup="nc:VehicleTransmissionCategory">
		
		case((resolvedName='VehicleTransmissionCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleTransmissionCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleTransmissionCategoryCode','VehicleTransmissionCategoryCode','VehicleTransmissionCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleStyleCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleStyleCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleStyleCode" type="ncic:VSTCodeType" substitutionGroup="nc:ItemStyle">
		
		case((resolvedName='VehicleStyleCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleStyleCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleStyleCode','VehicleStyleCode','ItemStyle',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleOdometerReadingUnitCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleOdometerReadingUnitCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleOdometerReadingUnitCode" type="ansi_d20:VehicleOdometerReadingUnitCodeType" substitutionGroup="nc:VehicleOdometerReadingUnit">
		
		case((resolvedName='VehicleOdometerReadingUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleOdometerReadingUnitCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleOdometerReadingUnitCode','VehicleOdometerReadingUnitCode','VehicleOdometerReadingUnit',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleInspectionSmogCertificateCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSmogCertificateCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleInspectionSmogCertificateCode" type="ansi_d20:SmogCertificateCodeType" substitutionGroup="j:VehicleInspectionSmogCertificate">
		
		case((resolvedName='VehicleInspectionSmogCertificateCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionSmogCertificateCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleInspectionSmogCertificateCode','VehicleInspectionSmogCertificateCode','VehicleInspectionSmogCertificate',niem21_j_URI);
		};
		//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleInspectionJurisdictionAuthorityText" type="nc:TextType" substitutionGroup="j:VehicleInspectionJurisdictionAuthority">
		
		case((resolvedName='VehicleInspectionJurisdictionAuthorityText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionJurisdictionAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleInspectionJurisdictionAuthorityText','VehicleInspectionJurisdictionAuthorityText','VehicleInspectionJurisdictionAuthority',niem21_j_URI);
		};
		//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleInspectionJurisdictionAuthorityCode" type="ansi_d20:JurisdictionAuthorityCodeType" substitutionGroup="j:VehicleInspectionJurisdictionAuthority">
		
		case((resolvedName='VehicleInspectionJurisdictionAuthorityCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionJurisdictionAuthorityCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleInspectionJurisdictionAuthorityCode','VehicleInspectionJurisdictionAuthorityCode','VehicleInspectionJurisdictionAuthority',niem21_j_URI);
		};
		//		Tuple{n21:String='VehicleColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorSecondaryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ConveyanceColorSecondaryCode" type="ncic:VCOCodeType" substitutionGroup="nc:ItemColor">
		
		case((resolvedName='VehicleColorSecondaryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceColorSecondaryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleColorSecondaryCode','ConveyanceColorSecondaryCode','ItemColor',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorPrimaryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ConveyanceColorPrimaryCode" type="ncic:VCOCodeType" substitutionGroup="nc:ItemColor">
		
		case((resolvedName='VehicleColorPrimaryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceColorPrimaryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleColorPrimaryCode','ConveyanceColorPrimaryCode','ItemColor',niem21_nc_URI);
		};
		
//		Tuple{n21:String='VehicleBrandVehicleDispositionCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleBrandVehicleDispositionCode" type="ansi_d20:BrandVehicleDispositionCodeType" substitutionGroup="j:VehicleBrandVehicleDisposition">
		
		case((resolvedName='VehicleBrandVehicleDispositionCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandVehicleDispositionCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandVehicleDispositionCode','VehicleBrandVehicleDispositionCode','VehicleBrandVehicleDisposition',niem21_j_URI);
		};
//		Tuple{n21:String='VehicleBrandVehicleDispositionText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionText',n3namespace:String=niem21_j_URI},
//  <xs:element name="VehicleBrandVehicleDispositionText" type="nc:TextType" substitutionGroup="j:VehicleBrandVehicleDisposition">
		case((resolvedName='VehicleBrandVehicleDispositionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandVehicleDispositionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandVehicleDispositionText','VehicleBrandVehicleDispositionText','VehicleBrandVehicleDisposition',niem21_j_URI);
		};
		
		//		Tuple{n21:String='VehicleBrandText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandText',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleBrandText" type="nc:TextType" substitutionGroup="j:VehicleBrandDesignation">
		
		case((resolvedName='VehicleBrandText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandText','VehicleBrandText','VehicleBrandDesignation',niem21_j_URI);
		};
		
		// //		Tuple{n21:String='VehicleBranderCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderCategoryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleBranderCategoryCode" type="ansi_d20:BranderCategoryCodeType" substitutionGroup="j:VehicleBranderCategory">
		
		case((resolvedName='VehicleBranderCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBranderCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBranderCategoryCode','VehicleBranderCategoryCode','VehicleBranderCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='VehicleBrandCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleBrandCode" type="ansi_d20:BrandCodeType" substitutionGroup="j:VehicleBrandDesignation">
		
		case((resolvedName='VehicleBrandCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandCode','VehicleBrandCode','VehicleBrandDesignation',niem21_j_URI);
		};
		//		Tuple{n21:String='SubstanceUnitCode',n21namespace:String=niem21_nc_URI,n3:String='SubstanceUnitCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="SubstanceUnitCode" type="ucr:DrugMeasurementCodeType" substitutionGroup="nc:SubstanceUnit">
		
		case((resolvedName='SubstanceUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('SubstanceUnitCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('SubstanceUnitCode','SubstanceUnitCode','SubstanceUnit',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='PersonHairColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonHairColorCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonHairColorCode" type="ncic:HAICodeType" substitutionGroup="nc:PersonHairColor">
		
		case((resolvedName='PersonHairColorCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonHairColorCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonHairColorCode','PersonHairColorCode','PersonHairColor',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='PersonEyeColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEyeColorCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonEyeColorCode" type="ncic:EYECodeType" substitutionGroup="nc:PersonEyeColor">
		
		case((resolvedName='PersonEyeColorCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonEyeColorCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonEyeColorCode','PersonEyeColorCode','PersonEyeColor',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='PersonEthnicityCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEthnicityCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="PersonEthnicityCode" type="ucr:EthnicityCodeType" substitutionGroup="nc:PersonEthnicity">
		
		case((resolvedName='PersonEthnicityCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonEthnicityCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonEthnicityCode','PersonEthnicityCode','PersonEthnicity',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='DriverLicenseCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassText',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicenseCommercialClassText" type="nc:TextType" substitutionGroup="j:DriverLicenseCommercialClass">
		
		case((resolvedName='DriverLicenseCommercialClassText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseCommercialClassText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialClassText','DriverLicenseCommercialClassText','DriverLicenseCommercialClass',niem21_j_URI);
		};
		
//		Tuple{n21:String='DriverLicenseCommercialClassCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassCode',n3namespace:String=niem21_j_URI},
//		  <xs:element name="DriverLicenseCommercialClassCode" type="ansi_d20:DriverLicenseClassCodeType" substitutionGroup="j:DriverLicenseCommercialClass">
		
		case((resolvedName='DriverLicenseCommercialClassCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseCommercialClassCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialClassCode','DriverLicenseCommercialClassCode','DriverLicenseCommercialClass',niem21_j_URI);
		};
		
//		Tuple{n21:String='InsuranceCoverageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoverageCategoryCode',n3namespace:String=niem21_j_URI},
//		  <xs:element name="InsuranceCoverageCategoryCode" type="ansi_d20:InsuranceCoverageCategoryCodeType" substitutionGroup="nc:InsuranceCoverageCategory">
		
		case(((resolvedName='InsuranceCoverageCategoryCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('InsuranceCoverageCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('InsuranceCoverageCategoryCode','InsuranceCoverageCategoryCode','InsuranceCoverageCategory',niem21_nc_URI);
		};
		
		
		
		
		
//		Tuple{n21:String='LienReleaseReasonText',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonText',n3namespace:String=niem21_j_URI},
//  <xs:element name="LienReleaseReasonText" type="nc:TextType" substitutionGroup="j:LienReleaseReason">
		
		case(((resolvedName='LienReleaseReasonText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienReleaseReasonText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LienReleaseReasonText','LienReleaseReasonText','LienReleaseReason',niem21_j_URI);
		};
//		Tuple{n21:String='AircraftWingColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftWingColorCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="AircraftWingColorCode" type="ncic:VCOCodeType" substitutionGroup="nc:AircraftWingColor">
		case(((resolvedName='AircraftWingColorCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('AircraftWingColorCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('AircraftWingColorCode','AircraftWingColorCode','AircraftWingColor',niem21_nc_URI);
		};
//		Tuple{n21:String='AircraftStyleCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftStyleCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="AircraftStyleCode" type="ncic:VSTCodeType" substitutionGroup="nc:AircraftStyle">
		
		case(((resolvedName='AircraftStyleCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('AircraftStyleCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('AircraftStyleCode','AircraftStyleCode','AircraftStyle',niem21_nc_URI);
		};
//		Tuple{n21:String='AircraftModelCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftModelCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="AircraftModelCode" type="ncic:VMOCodeType" substitutionGroup="nc:AircraftModel">
		
		case(((resolvedName='AircraftModelCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('AircraftModelCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('AircraftModelCode','AircraftModelCode','AircraftModel',niem21_nc_URI);
		};
		
			case((resolvedName='InjurySeverityText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('InjurySeverityText','InjurySeverityText','InjurySeverity',niem21_nc_URI);
		};
		
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryCode',n3namespace:String=niem21_j_URI},
//		  <xs:element name="VehicleBrandDamagePercentageCategoryCode" type="ansi_d20:BrandDamagePercentageCategoryCodeType" substitutionGroup="j:VehicleBrandDamagePercentageCategory">
		
		case((resolvedName='VehicleBrandDamagePercentageCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDamagePercentageCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandDamagePercentageCategoryCode','VehicleBrandDamagePercentageCategoryCode','VehicleBrandDamagePercentageCategory',niem21_j_URI);
		};
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryText',n3namespace:String=niem21_j_URI},
//  <xs:element name="VehicleBrandDamagePercentageCategoryText" type="nc:TextType" substitutionGroup="j:VehicleBrandDamagePercentageCategory">

		case((resolvedName='VehicleBrandDamagePercentageCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDamagePercentageCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandDamagePercentageCategoryText','VehicleBrandDamagePercentageCategoryText','VehicleBrandDamagePercentageCategory',niem21_j_URI);
		};
		
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='LocationCategoryCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="LocationCategoryCode" type="ucr:LocationCategoryCodeType" substitutionGroup="nc:LocationCategory">
	
		case(((resolvedName='LocationCategoryCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LocationCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LocationCategoryCode','LocationCategoryCode','LocationCategory',niem21_nc_URI);
		};
//		Tuple{n21:String='LesseeJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
// <xs:element name="LesseeJurisdictionAuthorityCode" type="ansi_d20:JurisdictionAuthorityCodeType" substitutionGroup="j:LesseeJurisdictionAuthority">
		case(((resolvedName='LesseeJurisdictionAuthorityCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LesseeJurisdictionAuthorityCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LesseeJurisdictionAuthorityCode','LesseeJurisdictionAuthorityCode','LesseeJurisdictionAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='LesseeJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
//  <xs:element name="LesseeJurisdictionAuthorityText" type="nc:TextType" substitutionGroup="j:LesseeJurisdictionAuthority">
		
		case(((resolvedName='LesseeJurisdictionAuthorityText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LesseeJurisdictionAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LesseeJurisdictionAuthorityText','LesseeJurisdictionAuthorityText','LesseeJurisdictionAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='LienReleaseReasonCode',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="LienReleaseReasonCode" type="ansi_d20:LienReleaseReasonCodeType" substitutionGroup="j:LienReleaseReason">
		
		case(((resolvedName='LienReleaseReasonCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienReleaseReasonCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LienReleaseReasonCodeType','LienReleaseReasonCodeType','LienReleaseReason',niem21_j_URI);
		};
//		Tuple{n21:String='AircraftMakeCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftMakeCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="AircraftMakeCode" type="ncic:VMACodeType" substitutionGroup="nc:AircraftMake">
		
		case(((resolvedName='AircraftMakeCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('AircraftMakeCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('AircraftMakeCode','AircraftMakeCode','AircraftMake',niem21_nc_URI);
		};
//		Tuple{n21:String='AircraftFuselageColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftFuselageColorCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="AircraftFuselageColorCode" type="ncic:VCOCodeType" substitutionGroup="nc:AircraftFuselageColor">
		
		case(((resolvedName='AircraftFuselageColorCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('AircraftFuselageColorCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('AircraftFuselageColorCode','AircraftFuselageColorCode','AircraftFuselageColor',niem21_nc_URI);
		};
		//		Tuple{n21:String='ConveyancePartCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="ConveyancePartCategoryCode" type="ncic:CATCodeType" substitutionGroup="j:ConveyancePartCategory">
		
		case(((resolvedName='ConveyancePartCategoryCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartCategoryCode','ConveyancePartCategoryCode','ConveyancePartCategory',niem21_j_URI);
		};
//		Tuple{n21:String='ConveyancePartCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryText',n3namespace:String=niem21_j_URI},
//  <xs:element name="ConveyancePartCategoryText" type="nc:TextType" substitutionGroup="j:ConveyancePartCategory">
		
		case(((resolvedName='ConveyancePartCategoryText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartCategoryText','ConveyancePartCategoryText','ConveyancePartCategory',niem21_j_URI);
		};
		
		/*
		          <xsd:element ref="nc:ItemRegistrationReference" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ItemReference" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ItemRegistrationHolderReference" minOccurs="0" maxOccurs="unbounded"/>
          
                    <xs:element ref="j:ItemRegistration" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:Item" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemRegistrationHolder" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemRegistrationAssociationAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
          
		
		*/
		case((resolvedName='FirearmCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
//			myself.changeNamespace('FirearmCategoryAbstract',niem21_j_URI);
			
						var FirearmCategoryCode:UML::Property=myself.changeNamespace('FirearmCategoryCode',niem21_j_URI);
			FirearmCategoryCode.propertyWithNewSubstitutionGroup('FirearmCategoryCode','FirearmCategoryCode','FirearmCategory',niem21_j_URI);
			
		};
		case((resolvedName='ConveyanceRegistrationPlateIdentification') 
			and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='ConveyanceRegistrationType')){
			myself.changeNamespace('ConveyanceRegistrationPlateIdentification',niem21_j_URI);
				
			}
		
		
		case((resolvedName='ConveyanceRegistrationPlateIdentification') 
			and (resolvedNamespace=niem21_nc_URI) and not(resolvedClassName='ConveyanceRegistrationType')){
			//var ConveyanceRegistrationPlateIdentification:UML::Property=myself.changeNamespace('ConveyanceRegistrationPlateIdentification',niem21_j_URI);
//			ConveyanceRegistrationPlateIdentification.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateIdentification','ConveyanceRegistrationPlateIdentification','VehicleMakeAbstract',niem21_nc_URI);
			// move up one level to ItemStateIdentification
			if(myself.isPropertyHolderElement())then{
				// this can be a rename
				myself.renameProperty('ItemStateIdentification');
			}else{
				// for non-top-level, this property must move up to item and change name
				var item:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemStateIdentification')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					myself.name:='ItemStateIdentification';
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;

		};
		
		
////////////////////////////////////////namespace change		
		/*
		case((resolvedName='BiometricRepositoryDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricRepositoryDescriptionText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricRepositoryOrganization') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricRepositoryOrganization',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricAccuracyDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricAccuracyDescriptionText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricTestDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricTestDescriptionText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricTestDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricTestDate',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricTestMethodText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricTestMethodText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricTester') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricTester',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricCapturer') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricCapturer',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricLabAnalysisText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricLabAnalysisText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricBinary',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricID') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricID',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricValueText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricValueText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricEncodingMethodText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricEncodingMethodText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricDescriptionText',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('BiometricStatus',niem21_ansi_nist_URI);
		};
		
		
			case((resolvedName='MaximumRangeIdentification') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace('MaximumRangeIdentification',niem21_j_URI);
		};
			case((resolvedName='MinimumRangeIdentification') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace('MinimumRangeIdentification',niem21_j_URI);
		};
			case((resolvedName='ProtectionOrderBradyIndicator') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace('ProtectionOrderBradyIndicator',niem21_j_URI);
		};
			case((resolvedName='ProtectionOrderConditionText') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace('ProtectionOrderConditionText',niem21_j_URI);
		};
			case((resolvedName='VehicleOwnershipNICB') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.changeNamespace('VehicleOwnershipNICB',niem21_j_URI);
		};
			case((resolvedName='DNALocusCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DNALocusCategoryText',niem21_ansi_nist_URI);
		};
			case((resolvedName='DNALocusValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DNALocusValue',niem21_ansi_nist_URI);
		};
		
		
		case((resolvedName='ItemRegistration') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemRegistration',niem21_j_URI);
		};
		case((resolvedName='ItemRegistrationHolder') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemRegistrationHolder',niem21_j_URI);
		};
		case((resolvedName='RegistrationHolder') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('RegistrationHolder',niem21_j_URI);
		};
	
		case((resolvedName='ItemReplacementTitle') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemReplacementTitle',niem21_j_URI);
		};
		case((resolvedName='ItemTitle') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitle',niem21_j_URI);
		};
		case((resolvedName='ItemTitleAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitleAssociation',niem21_j_URI);
		};
		case((resolvedName='ItemTitlePurchaseDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitlePurchaseDate',niem21_j_URI);
		};
		case((resolvedName='ItemTitlePurchasePriceAmount') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitlePurchasePriceAmount',niem21_j_URI);
		};
		case((resolvedName='ItemTitleReplacementAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitleReplacementAssociation',niem21_j_URI);
		};
		case((resolvedName='ItemTitleSalesTaxAmount') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitleSalesTaxAmount',niem21_j_URI);
		};
		case((resolvedName='ItemTitleSalesTaxPercentage') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitleSalesTaxPercentage',niem21_j_URI);
		};
		case((resolvedName='ItemTitleTaxableValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ItemTitleTaxableValue',niem21_j_URI);
		};
		case((resolvedName='Jewelry') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Jewelry',niem21_j_URI);
		};
		case((resolvedName='JewelryCaratText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryCaratText',niem21_j_URI);
		};
		case((resolvedName='RegistrationFee') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('RegistrationFee',niem21_j_URI);
		};
	
		case((resolvedName='RegistrationExpirationDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('RegistrationExpirationDate',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseNonCommercialStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseNonCommercialStatus',niem21_j_URI);
		};
		case((resolvedName='DriverLicensePermit') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicensePermit',niem21_j_URI);
		};
		case((resolvedName='DriverLicensePermitClassificationText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicensePermitClassificationText',niem21_j_URI);
		};
		case((resolvedName='DriverLicensePermitQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicensePermitQuantity',niem21_j_URI);
		};
		case((resolvedName='DriverLicensePermitStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicensePermitStatus',niem21_j_URI);
		};
		case((resolvedName='DriverLicensePerson') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicensePerson',niem21_j_URI);
		};
	
		case((resolvedName='DriverLicenseCommercialStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseCommercialStatus',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseEndorsementText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseEndorsementText',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseExpirationDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseExpirationDate',niem21_j_URI);
		};
		// FirearmCaliber-> j:FirearmBoreSizeAbstract ; change name and namespace
		//   <xsd:element substitutionGroup="nc:FirearmCaliber" name="FirearmCaliberCode" type="fbi:CALCodeType" nillable="true">
		//   <xsd:element substitutionGroup="nc:FirearmCaliber" name="FirearmCaliberText" type="nc:TextType" nillable="true">
		//   <xs:element name="FirearmBoreSizeNCICCode" type="ncic:CALCodeType" substitutionGroup="j:FirearmBoreSizeAbstract">
		//     <xs:element name="FirearmBoreSizeText" type="nc:TextType" substitutionGroup="j:FirearmBoreSizeAbstract">
		case((resolvedName='Firearm') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Firearm',niem21_j_URI);
		};
		
		case((resolvedName='FirearmCaliber') and (resolvedNamespace=niem21_nc_URI)){
//			myself.changeNamespace('FirearmBoreSizeAbstract',niem21_j_URI);
			myself.changeNamespace('FirearmBoreSize',niem21_j_URI);
		};
		case((resolvedName='FirearmGripText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('FirearmGripText',niem21_j_URI);
		};
		case((resolvedName='FirearmFinish') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('FirearmFinish',niem21_j_URI);
		};
		case((resolvedName='FirearmBarrelLengthMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('FirearmBarrelLengthMeasure',niem21_j_URI);
		};
		case((resolvedName='FirearmAutomaticIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('FirearmAutomaticIndicator',niem21_j_URI);
		};
		case((resolvedName='FirearmCategoryDescription') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('FirearmCategoryDescription',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationDecal') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationDecal',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationGrossWeightMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationGrossWeightMeasure',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationLocation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationLocation',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationPermanentIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationPermanentIndicator',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationPlateBackgroundText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationPlateBackgroundText',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationPlateColor') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationPlateColor',niem21_j_URI);
		};
		
		
		case((resolvedName='ConveyanceRegistrationAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationAssociation',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistration') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistration',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationPlateCategory') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationPlateCategory',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationRoadIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationRoadIndicator',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationStatus',niem21_j_URI);
		};
		case((resolvedName='RegistrationStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('RegistrationStatus',niem21_j_URI);
		};
		//   <xs:element name="ConveyanceRegistrationPlateIdentification" type="nc:IdentificationType">
		case((resolvedName='ConveyanceRegistrationPlateIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationPlateIdentification',niem21_j_URI);
		};
		case((resolvedName='ConveyanceRegistrationStatusDetail') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceRegistrationStatusDetail',niem21_j_URI);
		};
		case((resolvedName='DisciplinaryActionFacility') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DisciplinaryActionFacility',niem21_j_URI);
		};
		case((resolvedName='OrganizationGangAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('OrganizationGangAssociation',niem21_j_URI);
		};
		*/
////////////////////////////////////////namespace change block end		
		//		Tuple{n21:String='SecuritiesDenominationCode',n21namespace:String=niem21_nc_URI,n3:String='SecuritiesDenominationCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="SecuritiesDenominationCode" type="ncic:DENCodeType" substitutionGroup="nc:SecuritiesDenomination">
		
		case((resolvedName='SecuritiesDenominationCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('SecuritiesDenominationCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('SecuritiesDenominationCode','SecuritiesDenominationCode','SecuritiesDenomination',niem21_nc_URI);
		};
		//		Tuple{n21:String='DecalPeriodCode',n21namespace:String=niem21_nc_URI,n3:String='DecalPeriodCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DecalPeriodCode" type="ansi_d20:DecalPeriodCodeType" substitutionGroup="nc:DecalPeriod">
		
		case((resolvedName='DecalPeriodCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DecalPeriodCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DecalPeriodCode','DecalPeriodCode','DecalPeriod',niem21_nc_URI);
		};
		//		Tuple{n21:String='ConveyanceRegistrationStatusDetailCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ConveyanceRegistrationStatusDetailCode" type="ansi_d20:RegistrationStatusDetailCodeType" substitutionGroup="j:ConveyanceRegistrationStatusDetail">
		case((resolvedName='ConveyanceRegistrationStatusDetailCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationStatusDetailCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationStatusDetailCode','ConveyanceRegistrationStatusDetailCode','ConveyanceRegistrationStatusDetail',niem21_j_URI);
		};
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailText',n3namespace:String=niem21_j_URI},
//  <xs:element name="ConveyanceRegistrationStatusDetailText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationStatusDetail">
		case((resolvedName='ConveyanceRegistrationStatusDetailText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationStatusDetailText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationStatusDetailText','ConveyanceRegistrationStatusDetailText','ConveyanceRegistrationStatusDetail',niem21_j_URI);
		};
		//		Tuple{n21:String='ConveyanceRegistrationStatusCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationStatusCode" type="ansi_d20:RegistrationStatusCodeType" substitutionGroup="j:ConveyanceRegistrationStatusAbstract">
		
		case((resolvedName='ConveyanceRegistrationStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationStatusCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationStatusCode','ConveyanceRegistrationStatusCode','ConveyanceRegistrationStatusAbstract',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationStateNCICRESCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICRESCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="LocationStateNCICRESCode" type="ncic:RESCodeType" substitutionGroup="nc:LocationState">
		
		case((resolvedName='LocationStateNCICRESCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LocationStateNCICRESCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LocationStateNCICRESCode','LocationStateNCICRESCode','LocationState',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationStateNCICLSTACode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLSTACode',n3namespace:String=niem21_j_URI},		
	  //<xs:element name="LocationStateNCICLSTACode" type="ncic:LSTACodeType" substitutionGroup="nc:LocationState">
		
		case((resolvedName='LocationStateNCICLSTACode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LocationStateNCICLSTACode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LocationStateNCICLSTACode','LocationStateNCICLSTACode','LocationState',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationStateNCICLISCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLISCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="LocationStateNCICLISCode" type="ncic:LISCodeType" substitutionGroup="nc:LocationState">
		
		case((resolvedName='LocationStateNCICLISCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LocationStateNCICLISCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LocationStateNCICLISCode','LocationStateNCICLISCode','LocationState',niem21_nc_URI);
		};
		//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationPlateCategoryCode" type="ncic:LITCodeType" substitutionGroup="j:ConveyanceRegistrationPlateCategory">
		
		case((resolvedName='ConveyanceRegistrationPlateCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateCategoryCode','ConveyanceRegistrationPlateCategoryCode','ConveyanceRegistrationPlateCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationPlateCategoryText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationPlateCategory">
		
		case((resolvedName='ConveyanceRegistrationPlateCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateCategoryText','ConveyanceRegistrationPlateCategoryText','ConveyanceRegistrationPlateCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='ConveyanceRegistrationPlateColorCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ConveyanceRegistrationPlateColorCode" type="ansi_d20:RegistrationPlateColorCodeType" substitutionGroup="j:ConveyanceRegistrationPlateColor">
				
		case((resolvedName='ConveyanceRegistrationPlateColorCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateColorCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateColorCode','ConveyanceRegistrationPlateColorCode','ConveyanceRegistrationPlateColor',niem21_j_URI);
		};
//		Tuple{n21:String='ConveyanceRegistrationPlateColorText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationPlateColorText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationPlateColor">
		
		case((resolvedName='ConveyanceRegistrationPlateColorText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateColorText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateColorText','ConveyanceRegistrationPlateColorText','ConveyanceRegistrationPlateColor',niem21_j_URI);
		};
		//		Tuple{n21:String='FirearmCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescriptionText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="FirearmCategoryDescriptionText" type="nc:TextType" substitutionGroup="j:FirearmCategoryDescription">
		
		case((resolvedName='FirearmCategoryDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmCategoryDescriptionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmCategoryDescriptionText','FirearmCategoryDescriptionText','FirearmCategoryDescription',niem21_j_URI);
		};

		//		Tuple{n21:String='FirearmFinishText',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinishText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="FirearmFinishText" type="nc:TextType" substitutionGroup="j:FirearmFinish">
		
		case((resolvedName='FirearmFinishText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmFinishText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmFinishText','FirearmFinishText','FirearmFinish',niem21_j_URI);
		};
		//		Tuple{n21:String='FirearmCaliberText',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeText',n3namespace:String=niem21_j_URI},		
	//  <xs:element name="FirearmBoreSizeText" type="nc:TextType" substitutionGroup="j:FirearmBoreSize">
		
		case((resolvedName='FirearmCaliberText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmBoreSizeText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmCaliberText','FirearmBoreSizeText','FirearmBoreSize',niem21_j_URI);
		};
//		Tuple{n21:String='FirearmCaliberCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeNCICCode',n3namespace:String=niem21_j_URI},		
//  <xs:element name="FirearmBoreSizeNCICCode" type="ncic:CALCodeType" substitutionGroup="j:FirearmBoreSize">

		case((resolvedName='FirearmCaliberCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmBoreSizeNCICCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmCaliberCode','FirearmBoreSizeNCICCode','FirearmBoreSize',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseEndorsementCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementCode',n3namespace:String=niem21_j_URI},		
		//<xs:element name="DriverLicenseEndorsementCode" type="ansi_d20:DrivingEndorsementCodeType" substitutionGroup="j:DriverLicenseEndorsementAbstract">
  
		case((resolvedName='DriverLicenseEndorsementCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseEndorsementCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseEndorsementCode','DriverLicenseEndorsementCode','DriverLicenseEndorsementAbstract',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="DriverLicenseCommercialStatusCode" type="ansi_d20:DrivingStatusCodeType" substitutionGroup="j:DriverLicenseCommercialStatus">
				
		case((resolvedName='DriverLicenseCommercialStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseCommercialStatusCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialStatusCode','DriverLicenseCommercialStatusCode','DriverLicenseCommercialStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusText',n3namespace:String=niem21_j_URI},
// <xs:element name="DriverLicenseCommercialStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseCommercialStatus">		
		
		case((resolvedName='DriverLicenseCommercialStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseCommercialStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialStatusText','DriverLicenseCommercialStatusText','DriverLicenseCommercialStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicensePermitStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicensePermitStatusCode" type="ansi_d20:DrivingStatusCodeType" substitutionGroup="j:DriverLicensePermitStatus">
		
		case((resolvedName='DriverLicensePermitStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicensePermitStatusCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicensePermitStatusCode','DriverLicensePermitStatusCode','DriverLicensePermitStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicensePermitStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusText',n3namespace:String=niem21_j_URI},		
//		  <xs:element name="DriverLicensePermitStatusText" type="nc:TextType" substitutionGroup="j:DriverLicensePermitStatus">
		
		case((resolvedName='DriverLicensePermitStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicensePermitStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicensePermitStatusText','DriverLicensePermitStatusText','DriverLicensePermitStatus',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseNonCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="DriverLicenseNonCommercialStatusCode" type="ansi_d20:DrivingStatusCodeType" substitutionGroup="j:DriverLicenseNonCommercialStatus">
				
		
		case((resolvedName='DriverLicenseNonCommercialStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseNonCommercialStatusCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseNonCommercialStatusCode','DriverLicenseNonCommercialStatusCode','DriverLicenseNonCommercialStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseNonCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusText',n3namespace:String=niem21_j_URI},		
//		  <xs:element name="DriverLicenseNonCommercialStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseNonCommercialStatus">
		case((resolvedName='DriverLicenseNonCommercialStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseNonCommercialStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseNonCommercialStatusText','DriverLicenseNonCommercialStatusText','DriverLicenseNonCommercialStatus',niem21_j_URI);
		};
		//		Tuple{n21:String='ItemTitleDocumentCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleDocumentCategoryCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ItemTitleDocumentCategoryCode" type="ansi_d20:VehicleTitleDocumentCategoryCodeType" substitutionGroup="j:ItemTitleDocumentCategory">
		
		case((resolvedName='ItemTitleDocumentCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ItemTitleDocumentCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ItemTitleDocumentCategoryCode','ItemTitleDocumentCategoryCode','ItemTitleDocumentCategory',niem21_j_URI);
		};
		
          //   <xs:element name="VehicleMakeCode" type="ncic:VMACodeType" substitutionGroup="nc:VehicleMakeAbstract">
          
		case((resolvedName='VehicleMakeCode') and (resolvedNamespace=niem21_nc_URI)){
			var VehicleMakeCode:UML::Property=myself.changeNamespace('VehicleMakeCode',niem21_j_URI);
//			VehicleMakeCode.propertyWithNewSubstitutionGroup('VehicleMakeCode','VehicleMakeCode','VehicleMakeAbstract',niem21_nc_URI);
			VehicleMakeCode.propertyWithNewSubstitutionGroup('VehicleMakeCode','VehicleMakeCode','VehicleMake',niem21_nc_URI);
		};
		//   <xs:element name="VehicleModelCode" type="ncic:VMOCodeType" substitutionGroup="nc:VehicleModelAbstract">
		case((resolvedName='VehicleModelCode') and (resolvedNamespace=niem21_nc_URI)){
			var VehicleModelCode:UML::Property=myself.changeNamespace('VehicleModelCode',niem21_j_URI);
//			VehicleModelCode.propertyWithNewSubstitutionGroup('VehicleModelCode','VehicleModelCode','VehicleModelAbstract',niem21_nc_URI);
			VehicleModelCode.propertyWithNewSubstitutionGroup('VehicleModelCode','VehicleModelCode','VehicleModel',niem21_nc_URI);
		};
		          

		case((resolvedName='FirearmMakeCode') and (resolvedNamespace=niem21_nc_URI)){
//			myself.changeNamespace('FirearmMakeAbstract',niem21_j_URI);
			var FirearmMakeCode:UML::Property=myself.changeNamespace('FirearmMakeCode',niem21_j_URI);
			FirearmMakeCode.propertyWithNewSubstitutionGroup('FirearmMakeCode','FirearmMakeCode','FirearmMake',niem21_j_URI);
		};
		//   <xs:element name="PersonHairStyleText" type="nc:TextType" substitutionGroup="nc:PersonHairStyleAbstract">
		case((resolvedName='PersonHairStyleText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonHairStyleText','PersonHairStyleText','PersonHairStyleAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonHairStyleText','PersonHairStyleText','PersonHairStyle',niem21_nc_URI);
		};
		//   <xs:element name="PersonHairLengthText" type="nc:TextType" substitutionGroup="nc:PersonHairLengthAbstract">
		case((resolvedName='PersonHairLengthText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonHairLengthText','PersonHairLengthText','PersonHairLengthAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonHairLengthText','PersonHairLengthText','PersonHairLength',niem21_nc_URI);
		};
		//  <xs:element name="PersonFacialHairText" type="nc:TextType" substitutionGroup="nc:PersonFacialHairAbstract">
		case((resolvedName='PersonFacialHairText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonFacialHairText','PersonFacialHairText','PersonFacialHairAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonFacialHairText','PersonFacialHairText','PersonFacialHair',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='LocationTwoDimensionalGeographicCoordinate',n21namespace:String=niem21_nc_URI,n3:String='Location2DGeospatialCoordinate'},// needs substitution group also
		case((resolvedName='LocationTwoDimensionalGeographicCoordinate') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('LocationTwoDimensionalGeographicCoordinate','Location2DGeospatialCoordinate','LocationGeospatialCoordinateAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationTwoDimensionalGeographicCoordinate','Location2DGeospatialCoordinate','LocationGeospatialCoordinate',niem21_nc_URI);
			
		};
		case((resolvedName='PersonMaritalStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('PersonMaritalStatusText','PersonUnionStatusText','PersonUnionStatus',niem21_nc_URI);
			
		};
 // <xs:element name="LocationUTMCoordinate" type="nc:UTMCoordinateType" substitutionGroup="nc:LocationGeospatialCoordinateAbstract">
		case((resolvedName='LocationUTMCoordinate') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('LocationUTMCoordinate','LocationUTMCoordinate','LocationGeospatialCoordinateAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationUTMCoordinate','LocationUTMCoordinate','LocationGeospatialCoordinate',niem21_nc_URI);
		};
//  <xs:element name="MeasureUnitText" type="nc:TextType" substitutionGroup="nc:MeasureUnit">
		case((resolvedName='MeasureUnitText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('MeasureUnitText','MeasureUnitText','MeasureUnit',niem21_nc_URI);
		};
//  <xs:element name="GeographicDatumText" type="nc:TextType" substitutionGroup="nc:GeographicDatumAbstract">
//		Tuple{n21:String='UTMDatumID',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		case((resolvedName='UTMDatumID') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:TextType
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			myself.type:=TextType;
//			myself.propertyWithNewSubstitutionGroup('UTMDatumID','GeographicDatumText','GeographicDatumAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('UTMDatumID','GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
		case((resolvedName='ChargeSequenceID') and (resolvedNamespace=niem21_j_URI)){
			// type of result must be string
			myself.type:=getXMLPrimitiveType('string');
		};
		// ArrestSequenceID
		case((resolvedName='ArrestSequenceID') and (resolvedNamespace=niem21_j_URI)){
			// type of result must be string
			myself.type:=getXMLPrimitiveType('string');
		};
		//   <xs:element name="AircraftTailIdentification" type="nc:IdentificationType">
		// AircraftTailID
		case((resolvedName='AircraftTailID') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:IdentificationType
			var IdentificationType:UML::Classifier=findOrCreateClass('IdentificationType',niem21_nc_URI);
			myself.type:=IdentificationType;
			myself.renameProperty('AircraftTailIdentification');
		};
	// DateAccuracyCode DateAccuracyAbstract
//          <xsd:element ref="nc:DateAccuracyCode" minOccurs="0" maxOccurs="1"/>
 //         <xsd:element ref="nc:MarginDuration" minOccurs="0" maxOccurs="1"/>
	
//		Tuple{n21:String='DateAccuracyCode',n21namespace:String=niem21_nc_URI,n3:String='DateAccuracyAbstract'},
	// MarginDuration
//		Tuple{n21:String='MarginDuration',n21namespace:String=niem21_nc_URI,n3:String='DateMarginOfErrorDuration'},
		case((resolvedName='DateAccuracyCode') and (resolvedNamespace=niem21_nc_URI)){
//			myself.renameProperty('DateAccuracyAbstract');
			myself.renameProperty('DateAccuracy');
			myself.setUpper(1);
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		case((resolvedName='CommentText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='MetadataType')){
			myself.clientDependency:=Set{};
			var CommentType:UML::Classifier=findOrCreateClass('CommentType',niem21_nc_URI);
			myself.type:=CommentType;
			myself:=myself.renameProperty('Comment');
		};
		case((resolvedName='PersonUnionStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		case((resolvedName='MarginDuration') and (resolvedNamespace=niem21_nc_URI)){
			myself.renameProperty('DateMarginOfErrorDuration');
			myself.setUpper(1);
		};
		
		//   <xs:element name="IdentificationJurisdiction" type="nc:JurisdictionType">
		case((resolvedName='IdentificationJurisdiction') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:IdentificationType
			var JurisdictionType:UML::Classifier=findOrCreateClass('JurisdictionType',niem21_nc_URI);
			myself.type:=JurisdictionType;
			myself.isDerivedUnion:=false;
			myself.isDerived:=false;
			myself.isReadOnly:=false;
		};
  //<xsd:element name="IdentificationJurisdiction" abstract="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionFIPS10-4Code" type="fips_10-4:CountryCodeType" nillable="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionISO3166Alpha3Code" type="iso_3166:CountryAlpha3CodeType" nillable="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionText" type="nc:TextType" nillable="true">
				
		//  <xsd:element substitutionGroup="nc:MeasureValue" name="MeasurePointValue" type="nc:MeasurePointValueType" nillable="true">2.1
		//  <xs:element name="MeasureDecimalValue" type="niem-xs:decimal" substitutionGroup="nc:MeasurePoint"> 3.0
		//  <xs:element name="MeasurePoint" substitutionGroup="nc:MeasureValue" abstract="true"> 3.0
		case((resolvedName='MeasurePointValue') and (resolvedNamespace=niem21_nc_URI)){
			//propertyWithNewSubstitutionGroup('MeasurePointValue','MeasureDecimalValue','MeasureUnit',niem21_nc_URI);
			log('INFO: subsetting  Property '+self.qualifiedName);
			myself.name:='MeasureDecimalValue';
			if(self.isPropertyHolderElement())then{
				var MeasurePoint:UML::Property=findOrCreateElement('MeasurePoint',niem21_nc_URI);
				var MeasureValue:UML::Property=findOrCreateElement('MeasureValue',niem21_nc_URI);
				MeasurePoint.isDerivedUnion:=true;
				MeasurePoint.isDerived:=true;
				MeasurePoint.isReadOnly:=true;
				MeasureValue.isReadOnly:=true;
				MeasureValue.isDerived:=true;
				MeasureValue.isDerivedUnion:=true;
				// and that needs to be connected to MeasureValue
				MeasurePoint.subsettedProperty:=MeasureValue;
				MeasureValue.namespace.oclAsType(UML::Class).ownedAttribute+=MeasurePoint;
				myself.subsettedProperty:=MeasurePoint;
				MeasurePoint.namespace.oclAsType(UML::Class).ownedAttribute+=myself;
			}else{
			}endif;
				
		};
		case((resolvedName='LocationAltitudeMeasure') and (resolvedNamespace=niem21_nc_URI)){
			// change LengthMeasureType to LocationHeightMeasureType
			var LocationHeightMeasureType:UML::Class=findOrCreateClass('LocationHeightMeasureType',niem21_nc_URI);
			myself.type:=LocationHeightMeasureType;	
//			myself.propertyWithNewSubstitutionGroup('LocationAltitudeMeasure','LocationAltitude','LocationHeightAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationAltitudeMeasure','LocationAltitude','LocationHeight',niem21_nc_URI);
			
		};
		
		//   <xs:element name="OrganizationGovernmentLevelCode" type="ncic:ORIGovernmentLevelCodeType" substitutionGroup="j:OrganizationGovernmentLevel">
		case((resolvedName='OrganizationGovernmentLevelCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('OrganizationGovernmentLevelCode','OrganizationGovernmentLevelText','OrganizationGovernmentLevel',niem21_j_URI);
		};
		//   <xs:element name="InjuryCategoryText" type="nc:TextType" substitutionGroup="nc:InjuryCategoryAbstract">
		case((resolvedName='InjuryCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('InjuryCategoryText','InjuryCategoryText','InjuryCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('InjuryCategoryText','InjuryCategoryText','InjuryCategory',niem21_nc_URI);
		};
		//   <xs:element name="AddressHighway" type="nc:HighwayType" substitutionGroup="nc:LocationAddressAbstract">
		// LocationHighway
		case((resolvedName='LocationHighway') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('LocationHighway','AddressHighway','LocationAddressAbstract',niem21_nc_URI);
		};
		//   <xs:element name="AddressCrossStreet" type="nc:CrossStreetType" substitutionGroup="nc:LocationAddressAbstract">
		// LocationCrossStreet
		case((resolvedName='LocationCrossStreet') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('LocationCrossStreet','AddressCrossStreet','LocationAddressAbstract',niem21_nc_URI);
		};
		// DispositionCategoryText
		case((resolvedName='DispositionCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('DispositionCategoryText','DispositionCategoryText','DispositionCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DispositionCategoryText','DispositionCategoryText','DispositionCategory',niem21_nc_URI);
		};
		//   <xs:element name="StatusDate" type="nc:DateType" substitutionGroup="nc:StatusDateRepresentation">
		case((resolvedName='StatusDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('StatusDate','StatusDate','StatusDateRepresentation',niem21_nc_URI);
		};
    /*
              <xsd:element ref="nc:SecuritiesCollectionEndDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:SecuritiesCollectionStartDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:SecuritiesCategoryCode" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SecuritiesCategoryCode" type="fbi:TYPSCodeType" nillable="true">
    
              <xs:element ref="nc:SecuritiesCollectionDateRange" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:SecuritiesCategoryAbstract" minOccurs="0" maxOccurs="unbounded"/>
    jxdm:     <xs:element name="SecuritiesCategoryCode" type="ncic:TYPSCodeType" substitutionGroup="nc:SecuritiesCategoryAbstract">

    
    */
		case((resolvedName='SecuritiesCollectionStartDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('SecuritiesCollectionDateRange');
		};
		case((resolvedName='ObligationStartDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('ObligationDateRange');
		};
	
		case((resolvedName='SecuritiesCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('SecuritiesCategoryCode',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('SecuritiesCategoryCode','SecuritiesCategoryCode','SecuritiesCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('SecuritiesCategoryCode','SecuritiesCategoryCode','SecuritiesCategory',niem21_nc_URI);
			
		};
		//   <xs:element name="ItemValueAssigningMethodText" type="nc:TextType" substitutionGroup="nc:ItemValueAssigningMethodAbstract">
		case((resolvedName='ItemValueAssigningMethodText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('ItemValueAssigningMethodText','ItemValueAssigningMethodText','ItemValueAssigningMethodAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('ItemValueAssigningMethodText','ItemValueAssigningMethodText','ItemValueAssigningMethod',niem21_nc_URI);
		};
		
		/*
          <xsd:element ref="nc:ClothingCategoryText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingStyleText" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="j:ClothingCategoryText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingStyleText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
		
		*/
		
		case((resolvedName='ConveyancePartBrandCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyancePartBrandCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartBrandCode','ConveyancePartBrandCode','ConveyancePartBrand',niem21_j_URI);
		};
		case((resolvedName='ConveyancePartBrandName') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyancePartBrandName',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartBrandName','ConveyancePartBrandName','ConveyancePartBrand',niem21_j_URI);
		};
		/*
		          <xsd:element ref="nc:DrivingRestrictionValue" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DrivingRestrictionDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DrivingRestrictionEndDate" minOccurs="0" maxOccurs="unbounded"/>
          
		          <xs:element ref="j:DrivingRestrictionValue" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:DrivingRestrictionDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:DrivingRestrictionEndDate" minOccurs="0" maxOccurs="unbounded"/>
		
		*/
		/*
          <xsd:element ref="nc:DeviceOutgoingTelephoneNumber" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredContactInformation" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceIncomingTelephoneNumber" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredTelephoneNumber" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceOutgoingTextMessage" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceIncomingTextMessage" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredImage" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredAudioBinary" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredVideoBinary" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredBinary" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceStoredDocument" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceSentEmail" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceReceivedEmail" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:DeviceVisitedWebsiteURI" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="nc:DeviceCategoryAbstract" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:DeviceESNIdentification" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:DeviceIMEIIdentification" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:ElectronicAddress" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:DeviceAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
		
  <xs:element name="DeviceVisitedWebsiteURI" type="niem-xs:anyURI" substitutionGroup="nc:DeviceVisitedInformation">
  <xs:element name="DeviceReceivedEmail" type="nc:MessageType" substitutionGroup="nc:DeviceReceivedInformation">
     <xs:element name="DeviceSentEmail" type="nc:MessageType" substitutionGroup="nc:DeviceSentInformation">
   <xs:element name="DeviceStoredDocument" type="nc:DocumentType" substitutionGroup="nc:DeviceStoredInformation">
  <xs:element name="DeviceStoredBinary" type="nc:BinaryType" substitutionGroup="nc:DeviceStoredInformation">
     <xs:element name="DeviceStoredVideoBinary" type="nc:BinaryType" substitutionGroup="nc:DeviceStoredInformation">
   <xs:element name="DeviceStoredAudioBinary" type="nc:BinaryType" substitutionGroup="nc:DeviceStoredInformation">
    <xs:element name="DeviceStoredImage" type="nc:ImageType" substitutionGroup="nc:DeviceStoredInformation">
  <xs:element name="DeviceIncomingTextMessage" type="nc:MessageType" substitutionGroup="nc:DeviceReceivedInformation">
    <xs:element name="DeviceOutgoingTextMessage" type="nc:MessageType" substitutionGroup="nc:DeviceSentInformation">
  <xs:element name="DeviceStoredTelephoneNumber" type="nc:TelephoneNumberType" substitutionGroup="nc:DeviceStoredInformation">
    <xs:element name="DeviceIncomingTelephoneNumber" type="nc:TelephoneNumberType" substitutionGroup="nc:DeviceReceivedInformation">
  <xs:element name="DeviceOutgoingTelephoneNumber" type="nc:TelephoneNumberType" substitutionGroup="nc:DeviceSentInformation">
  <xs:element name="DeviceStoredContactInformation" type="nc:ContactInformationType" substitutionGroup="nc:DeviceStoredInformation">
		
		*/
		case((resolvedName='DeviceStoredContactInformation') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredContactInformation','DeviceStoredContactInformation','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceOutgoingTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceOutgoingTelephoneNumber','DeviceOutgoingTelephoneNumber','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceIncomingTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceIncomingTelephoneNumber','DeviceIncomingTelephoneNumber','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceStoredTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredTelephoneNumber','DeviceStoredTelephoneNumber','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceOutgoingTextMessage') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MessageType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DeviceOutgoingTextMessage','DeviceOutgoingTextMessage','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceIncomingTextMessage') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MessageType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DeviceIncomingTextMessage','DeviceIncomingTextMessage','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceStoredImage') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredImage','DeviceStoredImage','DeviceStoredInformation',niem21_nc_URI);
		};
		//  <xs:element name="InjuryLocationText" type="nc:TextType" substitutionGroup="nc:InjuryLocationAbstract">
		case((resolvedName='InjuryLocationText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('InjuryLocationText','InjuryLocationText','InjuryLocationAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('InjuryLocationText','InjuryLocationText','InjuryLocation',niem21_nc_URI);
		};
		
		case((resolvedName='DeviceStoredBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredBinary','DeviceStoredBinary','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='currencyCode') and (resolvedNamespace=niem21_nc_URI)){
			var CurrencyCodeType:UML::Enumeration =findOrCreateEnumeration('CurrencyCodeType',niem21_iso_4217_URI);
			var CurrencyCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('CurrencyCodeSimpleType',niem21_iso_4217_URI);
			if(not(CurrencyCodeType.general->includes(CurrencyCodeSimpleType)))then{
				var generalization:UML::Generalization=new UML::Generalization();
				generalization.general:=CurrencyCodeSimpleType;
				generalization.specific:=CurrencyCodeType;
			}endif;
			myself.type:=CurrencyCodeType;
			myself.propertyWithNewSubstitutionGroup('currencyCode','CurrencyCode','Currency',niem21_nc_URI);
		};
		//		// j:IncidentLightingText as TextType was j:IncidentLightingCode as LightingCodeType which is obsolete
		case((resolvedName='IncidentLightingCode') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			myself.renameProperty('IncidentLightingText');
		};
				// JewelryCategoryCode
				//   <xs:element name="JewelryCategoryCode" type="ncic:JWTCodeType" substitutionGroup="j:JewelryCategoryAbstract">
				
		case((resolvedName='JewelryCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryCategoryCode',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('JewelryCategoryCode','JewelryCategoryCode','JewelryCategoryAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('JewelryCategoryCode','JewelryCategoryCode','JewelryCategory',niem21_j_URI);
			
		};
		case((resolvedName='SupportLevelCategoryCode') and (resolvedNamespace=niem21_scr_URI)){
			myself:=myself.renameProperty('SupportLevelCategoryCodeText');
			myself.propertyWithNewSubstitutionGroup('SupportLevelCategoryCode','SupportLevelCategoryCodeText','SupportLevelCategory',niem21_scr_URI);
		};
		
		case((resolvedName='personNameCategoryCode') and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.renameProperty('PersonNameCategoryCode');
			myself.type:=findOrCreateClass('PersonNameCategoryCodeType',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('personNameCategoryCode','PersonNameCategoryCode','PersonNameCategory',niem21_nc_URI);
		};
		
		// nc:VehicleMotorCarrierIdentification ? no elements reference CommercialCarrierUSDOTNumberType
		//   <xs:element name="PassagePointSecurityCategoryText" type="nc:TextType" substitutionGroup="j:PassagePointSecurityCategoryAbstract">
		case((resolvedName='PassagePointSecurityCategoryText') and (resolvedNamespace=niem21_j_URI)){
//			myself.propertyWithNewSubstitutionGroup('PassagePointSecurityCategoryText','PassagePointSecurityCategoryText','PassagePointSecurityCategoryAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PassagePointSecurityCategoryText','PassagePointSecurityCategoryText','PassagePointSecurityCategory',niem21_j_URI);
		};
		//   <xs:element name="VictimJustifiableHomicideFactorCode" type="ucr:JustifiableHomicideFactorsCodeType" substitutionGroup="j:VictimJustifiableHomicideFactor">
		case((resolvedName='VictimJustifiableHomicideFactorCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('VictimJustifiableHomicideFactorCode','VictimJustifiableHomicideFactorCode','VictimJustifiableHomicideFactor',niem21_j_URI);
		};
		//   <xs:element name="ArrestCategoryCode" type="ucr:ArrestCategoryCodeType" substitutionGroup="j:ArrestCategory">
		case((resolvedName='ArrestCategoryCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('ArrestCategoryCode','ArrestCategoryCode','ArrestCategory',niem21_j_URI);
		};
				
		case((resolvedName='currencyText') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('currencyText','CurrencyText','Currency',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredAudioBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredAudioBinary','DeviceStoredAudioBinary','DeviceStoredInformation',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredVideoBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredVideoBinary','DeviceStoredVideoBinary','DeviceStoredInformation',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredDocument') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredDocument','DeviceStoredDocument','DeviceStoredInformation',niem21_nc_URI);
		};
	
		case((resolvedName='DeviceSentEmail') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceSentEmail','DeviceSentEmail','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceReceivedEmail') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceReceivedEmail','DeviceReceivedEmail','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceVisitedWebsiteURI') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceVisitedWebsiteURI','DeviceVisitedWebsiteURI','DeviceVisitedInformation',niem21_nc_URI);
		};
		case((resolvedName='ChargeNCICCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('ChargeNCICCode','ChargeNCICCode','ChargeNCIC',niem21_j_URI);
		};
		case((resolvedName='CourtCategoryCode') and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup('CourtCategoryCode','CourtCategoryCode','CourtCategory',niem21_j_URI);
		};
 		
/*
          <xsd:element ref="nc:AssociationBeginDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:AssociationEndDate" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="nc:AssociationDateRange" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:AssociationDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
			DateRangeType
*/		
		case((resolvedName='AssociationBeginDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('AssociationDateRange');
		};
		/*
          <xsd:element ref="nc:JewelryStoneCategoryText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:JewelryStoneCaratText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:JewelryStoneColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:JewelryStoneCutText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:JewelryStoneQuantity" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="j:JewelryStoneCategoryAbstract" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneWeightText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneCaratText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneCutText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:JewelryStoneAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
		
		*/
////////////////////////////////////////namespace change 
/*
		case((resolvedName='EngineHorsepowerQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('EngineHorsepowerQuantity',niem21_j_URI);
		};
		case((resolvedName='EngineID') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('EngineID',niem21_j_URI);
		};
		case((resolvedName='Explosive') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Explosive',niem21_j_URI);
		};
		case((resolvedName='ExplosiveComponent') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ExplosiveComponent',niem21_j_URI);
		};
		case((resolvedName='ExplosiveContainer') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ExplosiveContainer',niem21_j_URI);
		};
		case((resolvedName='ExplosiveFiller') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ExplosiveFiller',niem21_j_URI);
		};
		case((resolvedName='ExplosiveIgnition') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ExplosiveIgnition',niem21_j_URI);
		};
		case((resolvedName='AlarmLocationDirectionText') and (resolvedNamespace=niem21_em_URI)){
			myself.changeNamespace('LocationDirectionsText',niem21_nc_URI);
		};
		
		case((resolvedName='EngineDisplacementMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('EngineDisplacementMeasure',niem21_j_URI);
		};
		case((resolvedName='EngineCylinderQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('EngineCylinderQuantity',niem21_j_URI);
		};
		
		case((resolvedName='Engine') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Engine',niem21_j_URI);
		};
		case((resolvedName='ConveyanceEngineAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyanceEngineAssociation',niem21_j_URI);
		};
		case((resolvedName='ClothingCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ClothingCategoryText',niem21_j_URI);
		};
		case((resolvedName='ClothingColorText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ClothingColorText',niem21_j_URI);
		};
		case((resolvedName='ClothingDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ClothingDescriptionText',niem21_j_URI);
		};
		case((resolvedName='ClothingStyleText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ClothingStyleText',niem21_j_URI);
		};
		case((resolvedName='Clothing') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Clothing',niem21_j_URI);
		};
		case((resolvedName='ConveyancePartBrand') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyancePartBrand',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseRestriction') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseRestriction',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawal') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawal',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalAction') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalAction',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalBasis') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalBasis',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalDueProcessStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalDueProcessStatus',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalEffectiveDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalEffectiveDate',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalEligibilityDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalEligibilityDate',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalExtent') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalExtent',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalIssuingAuthority') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalIssuingAuthority',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalLocatorReferenceIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalLocatorReferenceIdentification',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalPendingIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalPendingIndicator',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalReinstatementDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalReinstatementDate',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseWithdrawalValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseWithdrawalValue',niem21_j_URI);
		};
		case((resolvedName='JewelryMetalText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStoneMaterialText',niem21_j_URI);
		};
		case((resolvedName='JewelryStone') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStone',niem21_j_URI);
		};
		case((resolvedName='DrivingRestriction') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DrivingRestriction',niem21_j_URI);
		};
		case((resolvedName='DrivingRestrictionValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DrivingRestrictionValue',niem21_j_URI);
		};
		case((resolvedName='DrivingRestrictionDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DrivingRestrictionDescriptionText',niem21_j_URI);
		};
		case((resolvedName='DrivingRestrictionEndDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DrivingRestrictionEndDate',niem21_j_URI);
		};
		case((resolvedName='ProgramPurposeText') and (resolvedNamespace=niem21_im_URI)){
			myself.changeNamespace('ProgramPurposeText',niem21_nc_URI);
		};
		
		
		case((resolvedName='JewelryStoneQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStoneQuantity',niem21_j_URI);
		};
	
		case((resolvedName='JewelryStoneCutText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStoneCutText',niem21_j_URI);
		};
	
		case((resolvedName='JewelryStoneColorText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStoneColorText',niem21_j_URI);
		};
		
		case((resolvedName='DriverLicenseIdentification') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseIdentification',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseIssueDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseIssueDate',niem21_j_URI);
		};
		case((resolvedName='DriverLicenseNonCommercialClassText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseNonCommercialClassText',niem21_j_URI);
		};
	
		case((resolvedName='JewelryStoneCaratText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('JewelryStoneCaratText',niem21_j_URI);
		};
		case((resolvedName='Intoxication') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('Intoxication',niem21_j_URI);
		};
		case((resolvedName='IntoxicationAlcoholInvolvedIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationAlcoholInvolvedIndicator',niem21_j_URI);
		};
		case((resolvedName='IntoxicationDrugInvolvedIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationDrugInvolvedIndicator',niem21_j_URI);
		};
		case((resolvedName='IntoxicationIntoxicantCategory') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationIntoxicantCategory',niem21_j_URI);
		};
		case((resolvedName='IntoxicationIntoxicantIllegalIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationIntoxicantIllegalIndicator',niem21_j_URI);
		};
		case((resolvedName='IntoxicationLevelText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationLevelText',niem21_j_URI);
		};
		case((resolvedName='IntoxicationOverLimitIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationOverLimitIndicator',niem21_j_URI);
		};
		case((resolvedName='IntoxicationRelatedActivity') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationRelatedActivity',niem21_j_URI);
		};
		case((resolvedName='IntoxicationTestCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationTestCategoryText',niem21_j_URI);
		};
		case((resolvedName='IntoxicationTestDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationTestDate',niem21_j_URI);
		};
		case((resolvedName='IntoxicationTestDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationTestDescriptionText',niem21_j_URI);
		};
		case((resolvedName='IntoxicationTester') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('IntoxicationTester',niem21_j_URI);
		};
		case((resolvedName='PersonClothing') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonClothing',niem21_j_URI);
		};
		case((resolvedName='RegistrationOutsideJurisdictionIndicator') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('RegistrationOutsideJurisdictionIndicator',niem21_j_URI);
		};
		*/
////////////////////////////////////////namespace change block end		
		//		Tuple{n21:String='PersonBodyXRaysAvailableCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBodyXRaysAvailableCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="PersonBodyXRaysAvailableCode" type="ncic:BXRCodeType" substitutionGroup="nc:PersonBodyXRaysAvailable">
		
		case((resolvedName='PersonBodyXRaysAvailableCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('PersonBodyXRaysAvailableCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonBodyXRaysAvailableCode','PersonBodyXRaysAvailableCode','PersonBodyXRaysAvailable',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonBloodTypeCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBloodTypeCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="PersonBloodTypeCode" type="ncic:BLTCodeType" substitutionGroup="nc:PersonBloodType">
		
		case((resolvedName='PersonBloodTypeCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('PersonBloodTypeCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonBloodTypeCode','PersonBloodTypeCode','PersonBloodType',niem21_nc_URI);
		};
		//		Tuple{n21:String='IntoxicationIntoxicantCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="IntoxicationIntoxicantCategoryCode" type="ucr:DrugCategoryCodeType" substitutionGroup="j:IntoxicationIntoxicantCategory">
				
		case((resolvedName='IntoxicationIntoxicantCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('IntoxicationIntoxicantCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('IntoxicationIntoxicantCategoryCode','IntoxicationIntoxicantCategoryCode','IntoxicationIntoxicantCategory',niem21_j_URI);
		};
//		Tuple{n21:String='IntoxicationIntoxicantCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="IntoxicationIntoxicantCategoryText" type="nc:TextType" substitutionGroup="j:IntoxicationIntoxicantCategory">
		
		case((resolvedName='IntoxicationIntoxicantCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('IntoxicationIntoxicantCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('IntoxicationIntoxicantCategoryText','IntoxicationIntoxicantCategoryText','IntoxicationIntoxicantCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='DrivingRestrictionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DrivingRestrictionText" type="nc:TextType" substitutionGroup="j:DrivingRestrictionValue">
		
		case((resolvedName='DrivingRestrictionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DrivingRestrictionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DrivingRestrictionText','DrivingRestrictionText','DrivingRestrictionValue',niem21_j_URI);
		};
	//		Tuple{n21:String='DrivingRestrictionCode',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionCode',n3namespace:String=niem21_j_URI},		
	//  <xs:element name="DrivingRestrictionCode" type="ansi_d20:DrivingRestrictionCodeType" substitutionGroup="j:DrivingRestrictionValue">
	
		case((resolvedName='DrivingRestrictionCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DrivingRestrictionCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DrivingRestrictionCode','DrivingRestrictionCode','DrivingRestrictionValue',niem21_j_URI);
		};
		
		//	Tuple{n21:String='DrugCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='DrugCategoryCode',n3namespace:String=niem21_j_URI},		
	  //<xs:element name="DrugCategoryCode" type="ucr:DrugCategoryCodeType" substitutionGroup="nc:SubstanceCategory">
	
		case((resolvedName='DrugCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DrugCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DrugCategoryCode','DrugCategoryCode','SubstanceCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalValue">
		
		case((resolvedName='DriverLicenseWithdrawalText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalText','DriverLicenseWithdrawalText','DriverLicenseWithdrawalValue',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalReasonReferenceCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReasonReferenceCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalReasonReferenceCodeText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalReasonReference">
		
		case((resolvedName='DriverLicenseWithdrawalReasonReferenceCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalReasonReferenceCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalReasonReferenceCode','DriverLicenseWithdrawalReasonReferenceCode','DriverLicenseWithdrawalReasonReference',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicenseWithdrawalIssuingAuthorityCode" type="ansi_d20:JurisdictionAuthorityCodeType" substitutionGroup="j:DriverLicenseWithdrawalIssuingAuthority">
		
		
		case((resolvedName='DriverLicenseWithdrawalIssuingAuthorityCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalIssuingAuthorityCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalIssuingAuthorityCode','DriverLicenseWithdrawalIssuingAuthorityCode','DriverLicenseWithdrawalIssuingAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="DriverLicenseWithdrawalIssuingAuthorityText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalIssuingAuthority">
		case((resolvedName='DriverLicenseWithdrawalIssuingAuthorityText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalIssuingAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalIssuingAuthorityText','DriverLicenseWithdrawalIssuingAuthorityText','DriverLicenseWithdrawalIssuingAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalExtentCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicenseWithdrawalExtentCode" type="ansi_d20:DriverLicenseWithdrawalExtentCodeType" substitutionGroup="j:DriverLicenseWithdrawalExtent">
		
		
		case((resolvedName='DriverLicenseWithdrawalExtentCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalExtentCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalExtentCode','DriverLicenseWithdrawalExtentCode','DriverLicenseWithdrawalExtent',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalExtentText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="DriverLicenseWithdrawalExtentText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalExtent">
		case((resolvedName='DriverLicenseWithdrawalExtentText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalExtentText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalExtentText','DriverLicenseWithdrawalExtentText','DriverLicenseWithdrawalExtent',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalEligibilityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalEligibilityCode" type="ansi_d20:DriverLicenseWithdrawalEligibilityCodeType" substitutionGroup="j:DriverLicenseWithdrawalEligibility">
		
		case((resolvedName='DriverLicenseWithdrawalEligibilityCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalEligibilityCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalEligibilityCode','DriverLicenseWithdrawalEligibilityCode','DriverLicenseWithdrawalEligibility',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicenseWithdrawalDueProcessStatusCode" type="ansi_d20:DriverLicenseWithdrawalDueProcessStatusCodeType" substitutionGroup="j:DriverLicenseWithdrawalDueProcessStatus">
		
		
		case((resolvedName='DriverLicenseWithdrawalDueProcessStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalDueProcessStatusCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalDueProcessStatusCode','DriverLicenseWithdrawalDueProcessStatusCode','DriverLicenseWithdrawalDueProcessStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusText',n3namespace:String=niem21_j_URI},		
	//  <xs:element name="DriverLicenseWithdrawalDueProcessStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalDueProcessStatus">
		case((resolvedName='DriverLicenseWithdrawalDueProcessStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalDueProcessStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalDueProcessStatusText','DriverLicenseWithdrawalDueProcessStatusText','DriverLicenseWithdrawalDueProcessStatus',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalCode" type="ansi_d20:DrivingOffenseCodeType" substitutionGroup="j:DriverLicenseWithdrawalValue">
		
		case((resolvedName='DriverLicenseWithdrawalCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalCode','DriverLicenseWithdrawalCode','DriverLicenseWithdrawalValue',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalBasisCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="DriverLicenseWithdrawalBasisCode" type="ansi_d20:DriverLicenseWithdrawalBasisCodeType" substitutionGroup="j:DriverLicenseWithdrawalBasis">
				
		
		case((resolvedName='DriverLicenseWithdrawalBasisCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalBasisCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalBasisCode','DriverLicenseWithdrawalBasisCode','DriverLicenseWithdrawalBasis',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalBasisText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalBasisText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalBasis">
		case((resolvedName='DriverLicenseWithdrawalBasisText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalBasisText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalBasisText','DriverLicenseWithdrawalBasisText','DriverLicenseWithdrawalBasis',niem21_j_URI);
		};
		//		Tuple{n21:String='DriverLicenseWithdrawalActionCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="DriverLicenseWithdrawalActionCode" type="ansi_d20:DriverLicenseWithdrawalActionCodeType" substitutionGroup="j:DriverLicenseWithdrawalAction">
				
		case((resolvedName='DriverLicenseWithdrawalActionCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalActionCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalActionCode','DriverLicenseWithdrawalActionCode','DriverLicenseWithdrawalAction',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalActionText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionText',n3namespace:String=niem21_j_URI},		
		 // <xs:element name="DriverLicenseWithdrawalActionText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalAction">
		
		case((resolvedName='DriverLicenseWithdrawalActionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalActionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalActionText','DriverLicenseWithdrawalActionText','DriverLicenseWithdrawalAction',niem21_j_URI);
		};
		//		Tuple{n21:String='ConveyanceFuelCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceFuelCategoryCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceFuelCategoryCode" type="ansi_d20:VehicleFuelCategoryCodeType" substitutionGroup="nc:ConveyanceFuelCategory">
		
		case((resolvedName='ConveyanceFuelCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceFuelCategoryCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceFuelCategoryCode','ConveyanceFuelCategoryCode','ConveyanceFuelCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='ExplosiveIgnitionCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ExplosiveIgnitionCode" type="atf:ExplosiveIgnitionCodeType" substitutionGroup="j:ExplosiveIgnition">
				
		case((resolvedName='ExplosiveIgnitionCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveIgnitionCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveIgnitionCode','ExplosiveIgnitionCode','ExplosiveIgnition',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveIgnitionText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionText',n3namespace:String=niem21_j_URI},		
//	  <xs:element name="ExplosiveIgnitionText" type="nc:TextType" substitutionGroup="j:ExplosiveIgnition">

		case((resolvedName='ExplosiveIgnitionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveIgnitionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveIgnitionText','ExplosiveIgnitionText','ExplosiveIgnition',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveFillerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="ExplosiveFillerCode" type="atf:ExplosiveFillerCodeType" substitutionGroup="j:ExplosiveFiller">
		
		case((resolvedName='ExplosiveFillerCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveFillerCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveFillerCode','ExplosiveFillerCode','ExplosiveFiller',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveFillerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="ExplosiveFillerText" type="nc:TextType" substitutionGroup="j:ExplosiveFiller">
		
		case((resolvedName='ExplosiveFillerText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveFillerText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveFillerText','ExplosiveFillerText','ExplosiveFiller',niem21_j_URI);
		};
		//		Tuple{n21:String='ExplosiveContainerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerCode',n3namespace:String=niem21_j_URI},
		//  <xs:element name="ExplosiveContainerCode" type="atf:ExplosiveContainerCodeType" substitutionGroup="j:ExplosiveContainer">
				
//		Tuple{n21:String='ExplosiveContainerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ExplosiveContainerText" type="nc:TextType" substitutionGroup="j:ExplosiveContainer">
		
		case((resolvedName='ExplosiveContainerCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveContainerCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveContainerCode','ExplosiveContainerCode','ExplosiveContainer',niem21_j_URI);
		};
		case((resolvedName='ExplosiveContainerText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveContainerText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveContainerText','ExplosiveContainerText','ExplosiveContainer',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveComponentCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentCode',n3namespace:String=niem21_j_URI},
//  <xs:element name="ExplosiveComponentCode" type="atf:ExplosiveComponentCodeType" substitutionGroup="j:ExplosiveComponent">
		
		case((resolvedName='ExplosiveComponentCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveComponentCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveComponentCode','ExplosiveComponentCode','ExplosiveComponent',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveComponentText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="ExplosiveComponentText" type="nc:TextType" substitutionGroup="j:ExplosiveComponent">
		
		case((resolvedName='ExplosiveComponentText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveComponentText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveComponentText','ExplosiveComponentText','ExplosiveComponent',niem21_j_URI);
		};
				//		Tuple{n21:String='EngineDisplacementUnitCode',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementUnitCode',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="EngineDisplacementUnitCode" type="j:EngineDisplacementUnitCodeType" substitutionGroup="j:EngineDisplacementUnit">
		
		
		case((resolvedName='EngineDisplacementUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('EngineDisplacementUnitCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('EngineDisplacementUnitCode','EngineDisplacementUnitCode','EngineDisplacementUnit',niem21_j_URI);
		};
		//   <xs:element name="JewelryStoneCategoryText" type="nc:TextType" substitutionGroup="j:JewelryStoneCategoryAbstract">
	
		case((resolvedName='JewelryStoneCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('JewelryStoneCategoryText',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('JewelryStoneCategoryText','JewelryStoneCategoryText','JewelryStoneCategoryAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('JewelryStoneCategoryText','JewelryStoneCategoryText','JewelryStoneCategory',niem21_j_URI);
			
		};
	//   <xs:element name="JurisdictionText" type="nc:TextType" substitutionGroup="nc:JurisdictionAbstract">
	// RegistrationJurisdictionName
		case(((resolvedName='JurisdictionText')or(resolvedName='RegistrationJurisdictionName')
			
		or(resolvedName='IdentificationJurisdictionText')
		) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionText','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionUSPostalServiceCode JurisdictionUSPostalServiceCode
		case(((resolvedName='RegistrationJurisdictionUSPostalServiceCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionUSPostalServiceCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionNCICRESCode JurisdictionNCICRESCode
		case(((resolvedName='RegistrationJurisdictionNCICRESCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('JurisdictionNCICRESCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICRESCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionNCICLSTACode JurisdictionNCICLSTACode
		case(((resolvedName='RegistrationJurisdictionNCICLSTACode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('JurisdictionNCICLSTACode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICLSTACode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionNCICLISCode JurisdictionNCICLISCode
		case(((resolvedName='RegistrationJurisdictionNCICLISCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('JurisdictionNCICLISCode',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICLISCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionFIPS5-2NumericCode JurisdictionFIPS5-2NumericCode
		case(((resolvedName='RegistrationJurisdictionFIPS5-2NumericCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionFIPS5-2NumericCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionFIPS5-2AlphaCode JurisdictionFIPS5-2AlphaCode
		case(((resolvedName='RegistrationJurisdictionFIPS5-2AlphaCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionFIPS5-2AlphaCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionANSID20JurisdictionAuthorityCode JurisdictionANSID20AuthorityCode
		case(((resolvedName='RegistrationJurisdictionANSID20JurisdictionAuthorityCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionANSID20AuthorityCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionFIPS10-4InternationalCode JurisdictionFIPS10-4InternationalCode
		case(((resolvedName='RegistrationJurisdictionFIPS10-4InternationalCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionFIPS10-4InternationalCode','JurisdictionAbstract',niem21_nc_URI);
		};
		// RegistrationJurisdictionCanadianProvinceCode JurisdictionCanadianProvinceCode
		case(((resolvedName='RegistrationJurisdictionCanadianProvinceCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionCanadianProvinceCode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionFIPS10-4Code')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionFIPS10-4Code','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionISO3166Alpha3Code')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionISO3166Alpha3Code','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionUSPostalServiceCode')) and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.changeNamespace('JurisdictionUSPostalServiceCode',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionUSPostalServiceCode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionUSPostalServiceCode')) and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.changeNamespace('JurisdictionUSPostalServiceCode',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionUSPostalServiceCode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionNCICRESCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICRESCode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionNCICLSTACode')or(resolvedName='DrivingJurisdictionAuthorityNCICLSTACode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICLSTACode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='IdentificationJurisdictionNCICLISCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionNCICLISCode','JurisdictionAbstract',niem21_nc_URI);
		};
		case(((resolvedName='DrivingJurisdictionAuthorityANSID20Code')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionANSID20AuthorityCode','JurisdictionAbstract',niem21_nc_URI);
		};
		//  <xs:element name="LEOKACircumstanceCategoryCode" type="j:LEOKACircumstanceCategoryCodeType" substitutionGroup="j:LEOKACircumstanceCategory">
		case(((resolvedName='LEOKACircumstanceCategoryCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LEOKACircumstanceCategoryCode','LEOKACircumstanceCategory',niem21_j_URI);
		};
		//   <xs:element name="PleaCategoryCode" type="core_misc:PleaCategoryCodeType" substitutionGroup="j:PleaCategory">
		case(((resolvedName='PleaCategoryCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PleaCategoryCode','PleaCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='ImmigrationStatus',n21namespace:String=niem21_scr_URI,n3:String='ScreeningImmigrationStatus'},
		case(((resolvedName='ImmigrationStatus')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ScreeningImmigrationStatus','ImmigrationStatus',niem21_im_URI);
		};
		//		Tuple{n21:String='EncounterDeviceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonEncounterDeviceCategoryCode'},
		case(((resolvedName='EncounterDeviceCategoryCode')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonEncounterDeviceCategoryCode','EncounterDeviceCategory',niem21_scr_URI);
		};
		//		Tuple{n21:String='Detention',n21namespace:String=niem21_scr_URI,n3:String='AlienDetention'},
		case(((resolvedName='Detention')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlienDetention','Supervision',niem21_nc_URI);
		};
		//		Tuple{n21:String='ConveyanceAugmentation',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentation'},
		case(((resolvedName='ConveyanceAugmentation')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'VehicleAugmentation','VehicleAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='Alert',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentation'},
		case(((resolvedName='Alert')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlertAugmentation','AlertAugmentationPoint',niem21_em_URI);
		};
		//		Tuple{n21:String='SecurityLevelText',n21namespace:String=niem21_nc_URI,n3:String='DocumentSensitivityText'},
		case(((resolvedName='SecurityLevelText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentSensitivityText','DocumentSensitivity',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyRecoveredValue',n21namespace:String=niem21_nc_URI,n3:String='ItemRecoveredValue'},
		case(((resolvedName='PropertyRecoveredValue')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemRecoveredValue','ItemStyle',niem21_nc_URI);
		};
		// 		Tuple{n21:String='MeasureText',n21namespace:String=niem21_nc_URI,n3:String='MeasureValueText'},
		case(((resolvedName='MeasureText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MeasureValueText','MeasureValue',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationGeographicElevation',n21namespace:String=niem21_nc_URI,n3:String='LocationElevation'},
		case(((resolvedName='LocationGeographicElevation')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationElevation','LocationHeight',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationDepthMeasure',n21namespace:String=niem21_nc_URI,n3:String='LocationDepth'},
		case(((resolvedName='LocationDepthMeasure')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationDepth','LocationHeight',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailSenderName',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderName'},
		case(((resolvedName='EmailSenderName')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageSenderName','MessageSender',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailSenderEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderEntity'},
		case(((resolvedName='EmailSenderEntity')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageSenderEntity','MessageSender',niem21_nc_URI);
		};
//		Tuple{n21:String='EmailRecipientName',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientName'},
		case(((resolvedName='EmailRecipientName')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageRecipientName','MessageRecipient',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailRecipientEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientEntity'},
		case(((resolvedName='EmailRecipientEntity')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageRecipientEntity','MessageRecipient',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentImage',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentImage'},
		case(((resolvedName='EmailAttachmentImage')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentImage','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentDocument',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentDocument'},
		case(((resolvedName='EmailAttachmentDocument')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentDocument','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentBinary',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentBinary'},
		case(((resolvedName='EmailAttachmentBinary')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentBinary','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextText',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageText'},
		case(((resolvedName='DocumentCoverageTextText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageText','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextDate',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageDate'},
		case(((resolvedName='DocumentCoverageTextDate')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageDate','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextAddress',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageAddress'},
		case(((resolvedName='DocumentCoverageTextAddress')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageAddress','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='DEAClassScheduleCode',n21namespace:String=niem21_nc_URI,n3:String='DEAClassScheduleText'},
		case(((resolvedName='DEAClassScheduleCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DEAClassScheduleText','DEAClassSchedule',niem21_nc_URI);
		};
		//		Tuple{n21:String='AddressBuildingText',n21namespace:String=niem21_nc_URI,n3:String='AddressBuildingName'},
		case(((resolvedName='AddressBuildingText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AddressBuildingName','AddressDeliveryPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='VictimAffectedProperty',n21namespace:String=niem21_j_URI,n3:String='VictimAffectedItem'},
		case(((resolvedName='VictimAffectedProperty')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'VictimAffectedItem','VictimEntity',niem21_j_URI);
		};
		//		Tuple{n21:String='VehicleCargoBodyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCargoBodyCategoryCode'},
		case(((resolvedName='VehicleCargoBodyCategoryCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'CommercialVehicleCargoBodyCategoryCode','CommercialVehicleCargoBodyCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='Treatment',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentation'},
		case(((resolvedName='Treatment')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'TreatmentAugmentation','TreatmentAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='StatuteOffenseMinnesotaCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseAPCOCode'},
		case(((resolvedName='StatuteOffenseMinnesotaCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'StatuteOffenseAPCOCode','StatuteOffenseCode',niem21_j_URI);
		};
		//		Tuple{n21:String='SecuritiesRansomMoneyCode',n21namespace:String=niem21_j_URI,n3:String='SecuritiesRansomMoneyText'},
		case(((resolvedName='SecuritiesRansomMoneyCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'SecuritiesRansomMoneyText','SecuritiesRansomMoney',niem21_j_URI);
		};
		//		Tuple{n21:String='PropertySeizureSeizingEnforcementOfficial',n21namespace:String=niem21_j_URI,n3:String='ItemSeizingEnforcementOfficial'},
		case(((resolvedName='PropertySeizureSeizingEnforcementOfficial')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemSeizingEnforcementOfficial','ItemSeizer',niem21_j_URI);
		};
//		Tuple{n21:String='PropertyDispositionCode',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionCode'},
		case(((resolvedName='PropertyDispositionCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDispositionCode','ItemDisposition',niem21_j_URI);
		};
		//		Tuple{n21:String='PropertyDispositionAugmentation',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentation'},
		case(((resolvedName='PropertyDispositionAugmentation')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDispositionAugmentation','ItemDispositionAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyDetailText',n21namespace:String=niem21_j_URI,n3:String='ItemDetailText'},
		case(((resolvedName='PropertyDetailText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDetailText','ItemDetailValue',niem21_j_URI);
		};
		//		Tuple{n21:String='PropertyDetailCode',n21namespace:String=niem21_j_URI,n3:String='ItemDetailCode'},
		case(((resolvedName='PropertyDetailCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDetailCode','ItemDetailValue',niem21_j_URI);
		};
		//		Tuple{n21:String='PropertyCategoryNIBRSPropertyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSPropertyCategoryCode'},
		case(((resolvedName='PropertyCategoryNIBRSPropertyCategoryCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemCategoryNIBRSPropertyCategoryCode','ItemCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyCategoryNIBRSCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSCode'},
		case(((resolvedName='PropertyCategoryNIBRSCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemCategoryNIBRSCode','ItemCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyCategoryNCICTYPCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPCode'},
		case(((resolvedName='PropertyCategoryNCICTYPCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemCategoryNCICTYPCode','ItemCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyCategoryNCICTYPACode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPACode'},
		case(((resolvedName='PropertyCategoryNCICTYPACode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemCategoryNCICTYPACode','ItemCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonToothAugmentation',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentation'},
		case(((resolvedName='PersonToothAugmentation')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ToothAugmentation','ToothAugmentationPoint',niem21_ansi_nist_URI);
		};
//		Tuple{n21:String='PersonJewelryCategoryText',n21namespace:String=niem21_j_URI,n3:String='JewelryCategoryText'},
		case(((resolvedName='PersonJewelryCategoryText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JewelryCategoryText','JewelryCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='PersonIssuedPropertyTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitle'},
		case(((resolvedName='PersonIssuedPropertyTitle')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonIssuedItemTitle','PersonIssuedItemTitleAbstract',niem21_j_URI);
		};
		//		Tuple{n21:String='PersonIssuedPropertyRegistrationTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemRegistrationTitle'},
		case(((resolvedName='PersonIssuedPropertyRegistrationTitle')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonIssuedItemRegistrationTitle','PersonIssuedItemTitleAbstract',niem21_j_URI);
		};
		//		Tuple{n21:String='PersonInjurySeverityCode',n21namespace:String=niem21_j_URI,n3:String='InjurySeverityCode'},
		case(((resolvedName='PersonInjurySeverityCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'InjurySeverityCode','InjurySeverity',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonInjuryLocationCode',n21namespace:String=niem21_j_URI,n3:String='InjuryLocationCode'},
		case(((resolvedName='PersonInjuryLocationCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'InjuryLocationCode','InjuryLocation',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonHitResultsCode',n21namespace:String=niem21_j_URI,n3:String='PersonHitResultsText'},
		case(((resolvedName='PersonHitResultsCode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonHitResultsText','PersonHitResults',niem21_j_URI);
		};
		//		Tuple{n21:String='PassagePointMethodText',n21namespace:String=niem21_j_URI,n3:String='PassagePointMethodOfAccessText'},
		case(((resolvedName='PassagePointMethodText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PassagePointMethodOfAccessText','PassagePointMethod',niem21_j_URI);
		};
		//		Tuple{n21:String='DrugDEACode',n21namespace:String=niem21_j_URI,n3:String='DrugCategoryDEACode'},
		case(((resolvedName='DrugDEACode')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DrugCategoryDEACode','SubstanceCode',niem21_nc_URI);
		};
		//		Tuple{n21:String='CrashLocationAugmentation',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='CrashLocationAugmentation')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='UnloadingLocationCategory',n21namespace:String=niem21_it_URI,n3:String='UnloadingLocationCategoryCode'},
		case(((resolvedName='UnloadingLocationCategory')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'UnloadingLocationCategoryCode','UnloadingLocationCategory',niem21_it_URI);
		};
		//		Tuple{n21:String='PaymentAugmentation',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentation'},
		case(((resolvedName='PaymentAugmentation')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ObligationAugmentation','ObligationAugmentationPoint',niem21_nc_URI);
		};
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_it_URI,n3:String='LocationCategoryCodeText'},
		case(((resolvedName='LocationCategoryCode')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationCategoryCodeText','LocationCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='GoodsManufacturedRegionOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedRegionOriginCode'},
		case(((resolvedName='GoodsManufacturedRegionOrigin')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GoodsManufacturedRegionOriginCode','GoodsManufacturedRegionOrigin',niem21_it_URI);
		};
		//		Tuple{n21:String='GoodsManufacturedCountryOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedCountryOriginCode'},
		case(((resolvedName='GoodsManufacturedCountryOrigin')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GoodsManufacturedCountryOriginCode','GoodsManufacturedCountryOrigin',niem21_it_URI);
		};
		//		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode'},
		case(((resolvedName='AdditionalDocumentCategory')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AdditionalDocumentCategoryCode','AdditionalDocumentCategory',niem21_it_URI);
		};
		//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='PhysicalFeatureCategoryCodeText'},
		case(((resolvedName='PhysicalFeatureCategoryCode')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PhysicalFeatureCategoryCodeText','PhysicalFeatureCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonLocationDetailsAugmentation',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='PersonLocationDetailsAugmentation')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationCountryFIPS10-4PlusNCTCCode',n21namespace:String=niem21_intel_URI,n3:String='LocationCountryFIPS10-4PlusNCTCCodeText'},
		case(((resolvedName='LocationCountryFIPS10-4PlusNCTCCode')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationCountryFIPS10-4PlusNCTCCodeText','LocationCountry',niem21_nc_URI);
		};
		//		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentation'},
		case(((resolvedName='IdentityAssociation')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'IdentityAssociationAugmentation','PersonIdentityAssociationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmploymentAugmentation',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentation'},
		case(((resolvedName='EmploymentAugmentation')) and (resolvedNamespace=niem21_im_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonEmploymentAssociationAugmentation','PersonEmploymentAssociationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='Alien',n21namespace:String=niem21_im_URI,n3:String='AlienRole'},
		case(((resolvedName='Alien')) and (resolvedNamespace=niem21_im_URI)){
			var PersonCountryRoleType:UML::Class=findOrCreateClass('PersonCountryRoleType',niem21_im_URI);
			var PersonCountryRole:UML::Property=findOrCreateElement('PersonCountryRole',niem21_im_URI);
			PersonCountryRole.type:=PersonCountryRoleType;
			var AlienRoleType:UML::Class=findOrCreateClass('AlienRoleType',niem21_im_URI);
			if(not(AlienRoleType.general->includes(PersonCountryRoleType)))then{
				var g:UML::Generalization=new UML::Generalization();
				g.specific:=AlienRoleType;
				g.general:=PersonCountryRoleType;
			}endif;
			myself.type:=AlienRoleType;
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlienRole','PersonCountryRole',niem21_im_URI);
		};
		//		Tuple{n21:String='NotificationRecipientContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationRecipientContactEmailID'},
		case(((resolvedName='NotificationRecipientContactEmail')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'NotificationRecipientContactEmailID','NotificationRecipient',niem21_em_URI);
		};
		//		Tuple{n21:String='NotificationOriginatorContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationOriginatorContactEmailID'},
		case(((resolvedName='NotificationOriginatorContactEmail')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'NotificationOriginatorContactEmailID','NotificationOriginator',niem21_em_URI);
		};
		//		Tuple{n21:String='AlertHandlingIdentification',n21namespace:String=niem21_em_URI,n3:String='AlertHandlingID'},
		case(((resolvedName='AlertHandlingIdentification')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlertHandlingID','AlertHandling',niem21_em_URI);
		};
		//		Tuple{n21:String='AlarmMonitoringServiceProviderIdentification',n21namespace:String=niem21_em_URI,n3:String='AlarmMonitoringServiceProviderID'},
		case(((resolvedName='AlarmMonitoringServiceProviderIdentification')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlarmMonitoringServiceProviderID','AlarmMonitoringServiceProvider',niem21_em_URI);
		};
		//		Tuple{n21:String='AlarmLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='AlarmLocationAugmentation')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonActivityInvolvementText',n21namespace:String=niem21_nc_URI,n3:String='ActivityInvolvementText'},
		case(((resolvedName='PersonActivityInvolvementText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ActivityInvolvementText','ActivityInvolvement',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationAddressGrid',n21namespace:String=niem21_nc_URI,n3:String='AddressGrid'},
		case(((resolvedName='LocationAddressGrid')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AddressGrid','LocationAddressAbstract',niem21_nc_URI);
		};
		//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='TelephoneNumberCategoryText'},
		case(((resolvedName='TelephoneCategoryDescriptionText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'TelephoneNumberCategoryText','TelephoneNumberCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='MeasureUnitText',n21namespace:String=niem21_j_URI,n3:String='GeographicDatumText'}
		case(((resolvedName='MeasureUnitText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='GeographicDatumCode',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		case(((resolvedName='GeographicDatumCode')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
		
		case(((resolvedName='IdentificationJurisdictionCanadianProvinceCode')) and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.changeNamespace('JurisdictionCanadianProvinceCode',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionCanadianProvinceCode','JurisdictionAbstract',niem21_nc_URI);
		};
	/*
          <xsd:element ref="nc:PropertyRecoveredValue" minOccurs="0" maxOccurs="unbounded"/> ???
	
          <xs:element ref="j:ItemSeizureMethodText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureOwningPerson" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizurePossessingPerson" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureReleaseConditionText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureWarrant" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
	
		Tuple{n21:String='PropertyCurrentResaleValue',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentResaleValue'},
*/
		
		case(((resolvedName='PropertySeizer')) and (resolvedNamespace=niem21_nc_URI)){
			//myself:=myself.changeNamespace('ItemSeizer',niem21_j_URI);
			myself:=myself.changeNamespace('ItemSeizerEntity',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PropertySeizer','ItemSeizerEntity','ItemSeizer',niem21_j_URI);
			
		};
		
		
		case(((resolvedName='AssessmentRecommendationText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('CommentType',niem21_nc_URI);
			myself:=myself.changeNamespace('AssessmentRecommendation',niem21_j_URI);
	//		myself.type:=findOrCreateClass('AssessmentRecommendationType',niem21_fs_URI);
	
			if(resolvedClassName='AssessmentType')then{
				var AssessmentAugmentationType:UML::Class=findOrCreateClass('AssessmentAugmentationType',niem21_j_URI);
				AssessmentAugmentationType.ownedAttribute+=myself;
			}endif;
		};
		
	//   <xsd:element substitutionGroup="nc:LocationCounty" name="LocationCountyCode" type="fips_6-4:USCountyCodeType" nillable="true">
	//   <xs:element name="LocationCountyCode" type="census:USCountyCodeType" substitutionGroup="nc:LocationCounty">
		case((resolvedName='LocationCountyCode') and (resolvedNamespace=niem21_nc_URI)){
			var USCountyCodeType:UML::Enumeration=findOrCreateEnumeration('USCountyCodeType',niem21_census_URI);
			var USCountyCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('USCountyCodeSimpleType',niem21_census_URI);
			if(not(USCountyCodeType.general->includes(USCountyCodeSimpleType)))then{
				var g:UML::Generalization=new UML::Generalization();
				g.specific:=USCountyCodeType;
				g.general:=USCountyCodeSimpleType;
			}endif;
			
			myself.type:=USCountyCodeType;
		};
	
		//   <xsd:element name="PersonUnionStatusCode" type="nonauth:MarriageStatusCodeType" nillable="true">
		
		//           <xs:element ref="nc:PersonUnionStatusAbstract" minOccurs="0" maxOccurs="unbounded"/>
		// jxdm   <xs:element name="MaritalStatusCode" type="ndex:MaritalStatusCodeType" substitutionGroup="nc:PersonUnionStatusAbstract">
		/*
		case((resolvedName='PersonUnionStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('MaritalStatusCode',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('PersonUnionStatusCode','MaritalStatusCode','PersonUnionStatusAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonUnionStatusCode','MaritalStatusCode','PersonUnionStatus',niem21_nc_URI);
		};
		*/
		case((resolvedName='PersonUnionStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('PersonUnionStatusCode','PersonUnionStatusCode','PersonUnionStatus',niem21_nc_URI);
		};
		
		//   <xs:element name="LengthUnitCode" type="unece:LengthCodeType" substitutionGroup="nc:LengthUnitAbstract">
		//   <xs:element name="LengthUnitAbstract" substitutionGroup="nc:MeasureUnit" abstract="true">
		
		case((resolvedName='LengthUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			//if(myself.isPropertyHolderElement())then{
//				var LengthUnitAbstract:UML::Property=findOrCreateElement('LengthUnitAbstract',niem20_nc_URI);
				var LengthUnitAbstract:UML::Property=findOrCreateElement('LengthUnit',niem21_nc_URI);
				LengthUnitAbstract.isDerivedUnion:=true;
				LengthUnitAbstract.isDerived:=true;
				LengthUnitAbstract.isReadOnly:=true;
				//var MeasureUnit:UML::Property=findOrCreateElement('MeasureUnit',niem20_nc_URI);
				//MeasureUnit.isDerivedUnion:=true;
				// and that needs to be connected to MeasureValue
				LengthUnitAbstract.setSubstitutionGroup('MeasureUnit',niem21_nc_URI);
				//LengthUnitAbstract.subsettedProperty:=MeasureUnit;
				//MeasureUnit.namespace.oclAsType(UML::Class).ownedAttribute+=LengthUnitAbstract;
			//}else{
			//}endif;
//			myself.propertyWithNewSubstitutionGroup('LengthUnitCode','LengthUnitCode','LengthUnitAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LengthUnitCode','LengthUnitCode','LengthUnit',niem21_nc_URI);
		};
		//		Tuple{n21:String='MeasureRangeValue',n21namespace:String=niem21_nc_URI,n3:String='MeasureDecimalRange'},
		case(((resolvedName='MeasureRangeValue')) and (resolvedNamespace=niem21_nc_URI)){
				var MeasureRange:UML::Property=findOrCreateElement('MeasureRange',niem21_nc_URI);
				MeasureRange.isDerivedUnion:=true;
				MeasureRange.isDerived:=true;
				MeasureRange.isReadOnly:=true;
				MeasureRange.setSubstitutionGroup('MeasureValue',niem21_nc_URI);
			myself:=myself.propertyWithNewSubstitutionGroup(resolvedName,'MeasureDecimalRange','MeasureRange',niem21_nc_URI);
		};
/*
  <xsd:complexType name="CommercialVehicleType">
      <xsd:extension base="nc:VehicleType">
        <xsd:sequence>
          <xsd:element ref="nc:VehicleAxleQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:VehicleCurrentWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:VehicleGrossLadenSumWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:VehicleGrossLadenUnitWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:VehicleMaximumLoadWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:VehicleUnladenWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          
<xs:complexType name="VehicleType">
          <xs:element ref="nc:VehicleAxleQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleCurrentWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleGrossLadenSumWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleGrossLadenUnitWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleMaximumLoadWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleUnladenWeightMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleCMVIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleColorInteriorText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleDoorQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleIdentification" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleMakeAbstract" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleModelAbstract" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleMSRPAmount" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleOdometerReadingMeasure" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehiclePassengerSafeQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleSeatingQuantity" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleTransmissionCategory" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:VehicleAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
          

*/
		case((
			(resolvedName='VehicleAxleQuantity')
			or (resolvedName='VehicleCurrentWeightMeasure')
			or (resolvedName='VehicleGrossLadenSumWeightMeasure')
			or (resolvedName='VehicleGrossLadenUnitWeightMeasure')
			or (resolvedName='VehicleMaximumLoadWeightMeasure')
			or (resolvedName='VehicleUnladenWeightMeasure')
				
			) and (resolvedNamespace=niem21_nc_URI)
			and (resolvedClassName<>'VehicleType')	
			){
			if(myself.isPropertyHolderElement())then{
				// no change
			}else{
				// for non-top-level, this property must move up to VehicleType
				var VehicleType:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=VehicleType.ownedAttribute
					->select(p|p.name=resolvedName)->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					VehicleType.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		//		Tuple{n21:String='VesselRegistrationIdentification',n21namespace:String=niem21_nc_URI,n3:String='ItemStateIdentification'},
		// this is replaced by a property in Item, 2 levels above Vessel
		case((resolvedName='VesselRegistrationIdentification') and (resolvedNamespace=niem21_nc_URI)){
			if(myself.isPropertyHolderElement())then{
				// this can be a rename
				myself.renameProperty('ItemStateIdentification');
			}else{
				// for non-top-level, this property must move up to item and change name
				var item:UML::Class=myself.classifier.general.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemStateIdentification')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					myself.name:='ItemStateIdentification';
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		
		// this is replaced by a property in Item, 2 levels above VehicleType
		case((resolvedName='ItemOwnershipCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			if(myself.isPropertyHolderElement())then{
				// ok
			}else{
				// for non-top-level, this property must move up to item
				var item:UML::Class=myself.classifier.general.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemOwnershipCategoryText')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		// nc:VehicleCurrentWeightMeasure move up one level
	/*
		case((resolvedName='VehicleCurrentWeightMeasure') and (resolvedNamespace=niem20_nc_URI)and not(resolvedClassName='VehicleType')){
			if(myself.isPropertyHolderElement())then{
				// ok
			}else{
				// for non-top-level, this property must move up to vehicleType
				var item:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='VehicleCurrentWeightMeasure')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};
		*/	
		/*
		          <xsd:element ref="nc:ContactInformationIsPrimaryIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsEmergencyIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsDayIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsEveningIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsNightIndicator" minOccurs="0" maxOccurs="unbounded"/>
  <xs:element name="ContactInformationAvailabilityCode" type="core_misc:ContactInformationAvailabilityCodeType" substitutionGroup="nc:ContactInformationAvailability">
          
 */
		case(((resolvedName='ContactInformationIsPrimaryIndicator') 
			or (resolvedName='ContactInformationIsEmergencyIndicator')
			or (resolvedName='ContactInformationIsDayIndicator')
				or (resolvedName='ContactInformationIsEveningIndicator')
				or (resolvedName='ContactInformationIsNightIndicator')
			)and (resolvedNamespace=niem21_nc_URI)){
			var ContactInformationAvailabilityCodeType:UML::Enumeration:=findOrCreateEnumeration('ContactInformationAvailabilityCodeType',niem21_ut_offender_URI);
			var ContactInformationAvailabilityCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('ContactInformationAvailabilityCodeSimpleType',niem21_ut_offender_URI);
			if(not(ContactInformationAvailabilityCodeType.general->includes(ContactInformationAvailabilityCodeSimpleType)))then{
				var g:UML::Generalization=new UML::Generalization();
				g.specific:=ContactInformationAvailabilityCodeType;
				g.general:=ContactInformationAvailabilityCodeSimpleType;
			}endif;
			myself.type:=ContactInformationAvailabilityCodeType;
				
			var ContactInformationAvailabilityCode:UML::Property=myself.propertyWithNewSubstitutionGroup(resolvedName,'ContactInformationAvailabilityCode','ContactInformationAvailability',niem21_nc_URI);
		};
				// TODO: AddressType to AddressType, but fold in StructuredAddressType
		// TODO: AircraftMakeCode from niem-core to jxdm -- includes subsetting
		// TODO: AircraftModelCode from niem-core to jxdm
		// TODO: AircraftStyleCode from niem-core to jxdm
		// TODO: currencyCode attribute to CurrencyCode element -- includes subsetting
		// TODO: currencyText attribute to CurrencyText element
		// TODO: AreaPolygonDescriptionText, fold into AreaDescriptionText
		// TODO: AreaCircularDescriptionText, fold into AreaDescriptionText
		// TODO: AreaGeographicCode to AreaGeographicAbstract, -- but we need concrete
		// TODO: AssessmentRecommendationText fold into AssessmentScoreText
		// TODO: AssociationBeginDate/AssociationEndDate become AssociationDateRange
		
	};
	return;
}
query UML::NamedElement::supplierReferences():Set(UML::NamedElement)=
	self.supplierReferenceRealizations().client->asSet();
query UML::NamedElement::supplierReferenceRealizations():Set(UML::Realization)=
	self.supplierDependency->select(d|d.isReferences()).oclAsType(UML::Realization)->asSet();
query UML::Dependency::isReferences():Boolean=
	self.IsStereotypeApplied(NIEMReferencesStereotype);

helper UML::Property::renameProperty(newName:String):UML::Property{
	var myself:UML::Property=self;
	var myNamespace:UML::String=self.getNearestPackage().getTargetNamespace();
			// if newName already exists in same classifier, switch dependencies to existing property and remove this property
			var existingProperty:UML::Property=self.owner
				->select(c|c.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
				->select(p|((p.name=newName)or(p.name=myself.name))and(p<>self))->asSequence()->first();
			if(existingProperty.oclIsUndefined() and myself.isPropertyHolderElement())	then{
				existingProperty:=findPropertyHolderProperty(myself.name,newName,myNamespace);
				if(existingProperty=myself)then{existingProperty:=null;}endif;
			}endif;	
			if(existingProperty.oclIsUndefined())	then{
					myself.name:=newName;
					existingProperty:=myself;
				}else{
					/* client side should not be necessary
					self.clientDependency->forEach(dep){
						dep.client:=existingProperty;						
					};
					*/
					self._directedRelationshipOfTarget->forEach(dep){
						dep.target:=existingProperty;						
					};
					// might be substitution groups, etc?
					if(existingProperty.subsettedProperty->isEmpty() and myself.subsettedProperty->notEmpty())then{
						existingProperty.subsettedProperty+=myself.subsettedProperty;
					}endif;
					self.removeElement();
				log('INFO: removed Duplicate Property ');
				}endif;
	return existingProperty;
}
	
helper UML::Property::organizationEntity(elementName:String):UML::Property{
	return self.contactEntity(elementName,'EntityOrganization');
}
helper UML::Property::personEntity(elementName:String):UML::Property{
	return self.contactEntity(elementName,'EntityPerson');
}
	
helper UML::Property::contactEntity(elementName:String,entityTypeName:String):UML::Property{
	//  fixup depending upon propertyholder or not
	var myself:UML::Property=self;
	// if there is already a property of that name, then use it and remove self
	var existingProperty:UML::Property=
		myself.classifier.oclAsType(UML::Class).ownedAttribute->select(p|p.name=elementName)->asSequence()->first();
	if(not(existingProperty.oclIsUndefined()))	then{
		myself.removeElement();
		myself:=existingProperty;
	}endif;
				myself.name:=elementName;
			var ContactEntity:UML::Property=findOrCreateElement(elementName,niem21_nc_URI);
				ContactEntity.setLower(0);
				ContactEntity.setUpper(-1);
				ContactEntity.aggregation:=UML::AggregationKind::shared;
			var EntityType:UML::Class=findOrCreateClass('EntityType',niem21_nc_URI);
			ContactEntity.type:=EntityType;
			//   <xs:element name="EntityOrganization" type="nc:OrganizationType" substitutionGroup="nc:EntityRepresentation">
			
			var EntityRepresentation:UML::Property=EntityType.ownedAttribute
				->select(p|p.name='EntityRepresentation')->asSequence()->first();
			if(EntityRepresentation.oclIsUndefined())then{
				EntityRepresentation:=new UML::Property();
				EntityType.ownedAttribute+=EntityRepresentation;
				EntityRepresentation.name:='EntityRepresentation';
				EntityRepresentation.setLower(0);
				EntityRepresentation.setUpper(-1);
				EntityRepresentation.isDerivedUnion:=true;
				EntityRepresentation.isDerived:=true;
				EntityRepresentation.isReadOnly:=true;
				EntityRepresentation.aggregation:=UML::AggregationKind::shared;
			}endif;
			var TopEntityRepresentation:UML::Property=findOrCreateElement('EntityRepresentation',niem21_nc_URI);
			TopEntityRepresentation.name:=EntityRepresentation.name;
			TopEntityRepresentation.isDerivedUnion:=EntityRepresentation.isDerivedUnion;
			TopEntityRepresentation.isDerived:=EntityRepresentation.isDerived;
			TopEntityRepresentation.isReadOnly:=EntityRepresentation.isReadOnly;
			TopEntityRepresentation.aggregation:=EntityRepresentation.aggregation;
				TopEntityRepresentation.setLower(EntityRepresentation.lower);
				TopEntityRepresentation.setUpper(EntityRepresentation.upper);
			var EntityOrganization:UML::Property=findOrCreateElement(entityTypeName,niem21_nc_URI);
				EntityOrganization.setLower(0);
				EntityOrganization.setUpper(-1);
				EntityOrganization.aggregation:=UML::AggregationKind::shared;
				EntityOrganization.subsettedProperty:=TopEntityRepresentation;
				TopEntityRepresentation.classifier.oclAsType(UML::Class).ownedAttribute+=EntityOrganization;
			EntityOrganization.type:=myself.type;
			myself.type:=EntityType;
	return ContactEntity;
}
	
helper UML::Property::setSubstitutionGroup(substitutionGroup:String,namespaceIn:String):UML::Property{
	// find or create the substitutionGroup; if untyped, set cardinality/isDerivedUnion; 
	// set the substitutionGroup as subsetted Property of self; move self to same Class as substitutionGroup
			var myself:UML::Property=self;
			var myClass:UML::Class=self.owner.oclAsType(UML::Class);
			var myPackage:UML::Package=self.getNearestPackage();
			var myNamespace:String=myPackage.getTargetNamespace();
				var locationGeospatialCoordinateAbstract:UML::Property=findOrCreateElement(substitutionGroup,namespaceIn);
				if(locationGeospatialCoordinateAbstract.type.oclIsUndefined())then{
					locationGeospatialCoordinateAbstract.isDerivedUnion:=true;
					locationGeospatialCoordinateAbstract.isDerived:=true;
					locationGeospatialCoordinateAbstract.isReadOnly:=true;
					locationGeospatialCoordinateAbstract.setLower(0);
					locationGeospatialCoordinateAbstract.setUpper(-1);
				}endif;
				myself.subsettedProperty:=locationGeospatialCoordinateAbstract;
				var headHolder:UML::Class=locationGeospatialCoordinateAbstract.owner.oclAsType(UML::Class);
				// make generalization if necessary
				
				if(myNamespace=namespaceIn)then{
					headHolder.ownedAttribute+=myself;
				}else{
					// make generalization
					if(not(myClass.general->includes(headHolder))and (myClass<>headHolder))then{
						var general:UML::Generalization=new UML::Generalization();
						general.specific:=myClass;
						general.general:=headHolder;
						log('substitution across namespaces '+myNamespace+", "+namespaceIn+', '+(myNamespace=namespaceIn).toString()+', '+self.qualifiedName);
						//substitution across namespaces http://niem.gov/niem/niem-core/2.0, http://niem.gov/niem/niem-core/2.0,
					}endif;
				}endif;
				
	return locationGeospatialCoordinateAbstract;	
}
	
helper UML::Property::propertyWithNewSubstitutionGroup(n21Name:String,n3Name:String,substitutionGroup:String,namespace:String):UML::Property{
			//log('INFO: renaming  Property '+self.qualifiedName);
			// must have substitionGroup=nc:LocationGeospatialCoordinateAbstract
			var myself:UML::Property=self.renameProperty(n3Name);
			//myself.name:=n3Name;
			if(myself.isPropertyHolderElement())then{
				myself.setSubstitutionGroup(substitutionGroup,namespace);
			}else{
				// if no propertyHolder, then we need to create one
					var resolvedNamespace:String=myself.getResolvedNamespace();
				
				var propertyHolderProperty:UML::Property=findPropertyHolderProperty(n21Name,n3Name,resolvedNamespace);
				if(propertyHolderProperty.oclIsUndefined())then{
					propertyHolderProperty:=myself.cloneAsPropertyHolder(resolvedNamespace);
				}endif;
				propertyHolderProperty.setSubstitutionGroup(substitutionGroup,namespace);
			}endif;
	return myself;	
}
helper UML::Property::cloneAsPropertyHolder(namespace:String):UML::Property{
	namespace.findOrCreateNamespace()->forEach(pkg){
		var newProperty:UML::Property=new UML::Property();
		var propertyHolder:UML::Class=pkg.getPropertyHolder();
		propertyHolder.ownedAttribute+=newProperty;
		newProperty.name:=self.name;
		newProperty.type:=self.type;
		newProperty.aggregation:=self.aggregation;
		newProperty.setUpper(self.upper);
		newProperty.setLower(self.lower);
	return newProperty;		
	};
	return null;
}
	
helper findPropertyHolderProperty(n21Name:String,n30Name:String,namespace:String):UML::Property{
	var topLevelElements:Set(UML::Property)=namespace.findOrCreateNamespace().ownedType
			->select(t|t.IsStereotypeApplied(NIEMPropertyHolderStereotype)).oclAsType(UML::Class).ownedAttribute
			->asSet();
	topLevelElements->select(a|(a.name=n30Name))->forEach(p){return p;};
	topLevelElements->select(a|(a.name=n21Name))->forEach(p){return p;};
	if(n30Name='JurisdictionAbstract')then{
		topLevelElements
				->select(a|a.name='RegistrationJurisdiction')
				->forEach(p){
					return p;
				};
	}endif;		
	return null;		
}
query UML::Property::isPsmXsdElement():Boolean{
	if(self.IsStereotypeApplied(NIEMPropertyStereotype))then{
		return (self.GetStereotypeApplication(NIEMPropertyStereotype).oclAsType(Stdlib::Element).getNIEMPropertyKind()='element');
	}endif;
	return (self.name.firstToUpper()=self.name)
		or self.type.oclIsUndefined()
		or not(self.type.oclAsType(UML::Classifier).isXmlPrimitive());
}
query UML::Classifier::isXmlPrimitive():Boolean=
		(self.owner.oclAsType(UML::NamedElement).name=XMLPrimitiveTypesPackageName) // tjd
		or (self.owner.oclAsType(UML::NamedElement).name=UMLPrimitiveTypesPackageName)// tjd
		;

// unresolved
//property niem30_gmx_URI:String='http://www.isotc211.org/2005/gmx'; // unknown uri

//property niem30_lasd_URI:String=baseNiemNamespace+'lasd/2.0'; // no match 
//property niem30_twpdes_URI:String=baseNiemNamespace+'twpdes/2.0'; // no match 


property niem30_ansi_nist_URI:String=baseNiemNamespace+'domains/biometrics/3.0/'; 
property niem30_ansi_d20_URI:String=baseNiemNamespace+'codes/ansi_d20/3.0/'; 
property niem30_apco_URI:String=baseNiemNamespace+'codes/apco_event/3.0/';
property niem30_atf_URI:String=baseNiemNamespace+'codes/atf/3.0/'; 
property niem30_can_URI:String=baseNiemNamespace+'codes/canada_post/3.0/'; 
property niem30_cap_URI:String='urn:oasis:names:tc:emergency:cap:1.1'; // same
property niem30_cbrn_URI:String=baseNiemNamespace+'domains/cbrn/3.0/'; 
property niem30_cbrncl_URI:String=baseNiemNamespace+'codes/cbrncl/3.0/'; 
//property niem30_census_URI:String=baseNiemNamespace+'codes/census_commodity/3.0/'; 
property niem30_census_URI:String=baseNiemNamespace+'codes/census_uscounty/3.0/'; 
property niem30_de_URI:String='urn:oasis:names:tc:emergency:EDXL:DE:1.0';// same 
property niem30_dea_URI:String=baseNiemNamespace+'codes/dea_ctlsub/3.0/'; 
property niem30_dod_jcs_pub2_0_URI:String=baseNiemNamespace+'codes/dod_jcs-pub2.0/3.0/'; 
property niem30_edxl_URI:String=baseNiemNamespace+'codes/edxl_rm/3.0/'; 
property niem30_edxl_cap_URI:String=baseNiemNamespace+'adapters/edxl-cap/3.0/';  
property niem30_edxl_de_URI:String=baseNiemNamespace+'adapters/edxl-de/3.0/';  
property niem30_edxl_have_URI:String=baseNiemNamespace+'adapters/edxl-have/3.0/'; 
property niem30_em_URI:String=baseNiemNamespace+'domains/emergencyManagement/3.0/';  
property niem30_fbi_URI:String=baseNiemNamespace+'codes/fbi_ncic/3.0/';  
property niem30_fips_10_4_URI:String=baseNiemNamespace+'codes/fips_10-4/3.0/';  
property niem30_fips_5_2_URI:String=baseNiemNamespace+'codes/fips_5-2/3.0/'; 
property niem30_fips_6_4_URI:String=baseNiemNamespace+'codes/fips_6-4/3.0/'; 
property niem30_fs_URI:String=baseNiemNamespace+'domains/cyfs/3.0/'; 
property niem30_gco_URI:String='http://www.isotc211.org/2005/gco';// same  
property niem30_geo_URI:String=baseNiemNamespace+'adapters/geospatial/3.0/';  
property niem30_gmd_URI:String='http://www.isotc211.org/2005/gmd';// same  
property niem30_gml_URI:String='http://www.opengis.net/gml/3.2'; // same 
property niem30_gsr_URI:String='http://www.isotc211.org/2005/gsr'; // same
property niem30_gss_URI:String='http://www.isotc211.org/2005/gss'; // same
property niem30_gts_URI:String='http://www.isotc211.org/2005/gts'; // same
property niem30_have_URI:String='urn:oasis:names:tc:emergency:EDXL:HAVE:1.0'; // same 
property niem30_have_codes_URI:String=baseNiemNamespace+'codes/edxl_have/3.0/'; 
property niem30_hazmat_URI:String=baseNiemNamespace+'codes/dot_hazmat/3.0/'; // 
property niem30_im_URI:String=baseNiemNamespace+'domains/immigration/3.0/'; // 
property niem30_intel_URI:String=baseNiemNamespace+'domains/intelligence/3.0/'; // 
property niem30_ip_URI:String=baseNiemNamespace+'domains/infrastructureProtection/3.0/'; // 
property niem30_iso_3166_URI:String=baseNiemNamespace+'codes/iso_3166-1/3.0/'; 
property niem30_iso_4217_URI:String=baseNiemNamespace+'codes/iso_4217/3.0/'; 
property niem30_iso_639_3_URI:String=baseNiemNamespace+'codes/iso_639-3/3.0/'; // 
property niem30_it_URI:String=baseNiemNamespace+'domains/internationalTrade/3.0/'; // 
property niem30_itis_URI:String=baseNiemNamespace+'codes/it_codes/3.0/'; // 
property niem30_j_URI:String=baseNiemNamespace+'domains/jxdm/5.0/'; // 
property niem30_m_URI:String=baseNiemNamespace+'domains/maritime/3.0/'; //  
property niem30_mmucc_2_URI:String=baseNiemNamespace+'codes/mmucc/3.0/'; // 
//property niem30_mn_off_URI:String=baseNiemNamespace+'codes/fbi_ucr/3.0/'; //  partial match
property niem30_nc_URI:String=baseNiemNamespace+'niem-core/3.0/'; // 
property niem30_nga_URI:String=baseNiemNamespace+'codes/nga_genc/3.0/'; // 
property niem30_nlets_URI:String=baseNiemNamespace+'codes/nlets/3.0/'; // 
property niem30_nonauth_URI:String=baseNiemNamespace+'codes/core_misc/3.0/'; // partial match; but overlaps ut_offender: explicit change each component and disable old package
property niem30_sar_URI:String=baseNiemNamespace+'codes/pmise_sar/3.0/'; // 
property niem30_scr_URI:String=baseNiemNamespace+'domains/screening/3.0/'; // 
property niem30_ucr_URI:String=baseNiemNamespace+'codes/fbi_ucr/3.0/'; // 
property niem30_unece_URI:String=baseNiemNamespace+'codes/unece_rec20/3.0/'; // 
property niem30_usps_URI:String=baseNiemNamespace+'codes/usps_states/3.0/'; // 
property niem30_ut_offender_URI:String=baseNiemNamespace+'codes/core_misc/3.0/'; //  
property niem30_xls_URI:String='http://release.niem.gov/niem/external/ogc/xls/1.1.0/dhs-gmo/2.1.0'; // 


// not in niem 2.1
//http\://release.niem.gov/niem/codes/census_uscounty/3.0/=codes-census_uscounty // new

property niem21_ndex_URI:String='http://release.niem.gov/niem/codes/fbi_ndex/3.0/'; // pseudo, does not exist 
property niem30_ndex_URI:String='http://release.niem.gov/niem/codes/fbi_ndex/3.0/'; // new
property niem21_hl7_URI:String='http://release.niem.gov/niem/codes/hl7/3.0/'; // pseudo, does not exist 
property niem30_hl7_URI:String='http://release.niem.gov/niem/codes/hl7/3.0/'; // new

property niem21_occs_URI:String='http://release.niem.gov/niem/codes/occs_facility/3.0/'; // pseudo, does not exist 
property niem30_occs_URI:String='http://release.niem.gov/niem/codes/occs_facility/3.0/'; // new
//http\://release.niem.gov/niem/codes/dol_soc/3.0/=codes-dol_soc // new
//http\://release.niem.gov/niem/codes/iata/3.0/=codes-iata // new
//http\://release.niem.gov/niem/codes/nga_vdatum/3.0/=codes-nga_vdatum // new
//http\://release.niem.gov/niem/codes/occs_facility/3.0/=codes-occs_facility // new
//http\://release.niem.gov/niem/codes/xCard/3.0/=codes-xCard // new

property type21to3:Sequence(Tuple(n21:String,n21namespace:String,n3:String)) = Sequence{
		Tuple{n21:String='AdditionalInformationAugmentationType',n21namespace:String=niem21_it_URI,n3:String='AdditionalInformationType'},
		Tuple{n21:String='ConveyanceAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentationType'},
		Tuple{n21:String='DetentionType',n21namespace:String=niem21_scr_URI,n3:String='AlienDetentionType'},
		Tuple{n21:String='DepartureType',n21namespace:String=niem21_scr_URI,n3:String='ScreeningDepartureType'},
		Tuple{n21:String='ConveyanceAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentationType'},
		Tuple{n21:String='AlertType',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentationType'},
	
		Tuple{n21:String='AdditionalDocumentAugmentationType',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentType'},
		Tuple{n21:String='PaymentAugmentationType',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentationType'},
		Tuple{n21:String='OriginType',n21namespace:String=niem21_it_URI,n3:String='GoodsOriginType'},
		Tuple{n21:String='ContainerReferencedIDType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerReferenceIDType'},
		Tuple{n21:String='ContainerLastLocationType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLastLocationType'},
		Tuple{n21:String='ContainerIdentificationType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerIdentificationType'},
		Tuple{n21:String='PersonLocationDetailsAugmentationType',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentationType'},
//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentationType'},
//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='PersonIdentityAssociationType<'},
		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentationType'},
		Tuple{n21:String='EmploymentAugmentationType',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentationType'},
		Tuple{n21:String='AlarmLocationAugmentationType',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentationType'},
		Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
	// PersonItemAssociationType
		Tuple{n21:String='PersonItemAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ItemEntityAssociationType'},
		
		Tuple{n21:String='AlienCitizenshipType',n21namespace:String=niem21_im_URI,n3:String='ForeignBornChildOfCitizenRoleType'},
		Tuple{n21:String='AlienType',n21namespace:String=niem21_im_URI,n3:String='AlienRoleType'},
			// "ansi-nist:COLCodeType - > biom:PhysicalFeatureColorCodeType
		// "ansi-nist:COLCodeSimpleType - > biom:PhysicalFeatureColorCodeSimpleType
		// ansi-nist:PCCCodeType       -> "biom:PhysicalFeatureClassCodeType"
		// ansi-nist:PCCCodeSimpleType       -> "biom:PhysicalFeatureClassCodeSimpleType"
		// ansi-nist:PSCCodeType ->biom:PhysicalFeatureSubClassCodeType
		// ansi-nist:PSCCodeSimpleType ->biom:PhysicalFeatureSubClassCodeSimpleType
		// ansi-nist:SMDCodeType -> biom:PhysicalFeatureCategoryCodeType
		// ansi-nist:SMDCodeSimpleType -> biom:PhysicalFeatureCategoryCodeSimpleType
		// PhysicalFeatureColorCodeType COLCodeType
		// SMDCodeType PhysicalFeatureCategoryCodeType
		Tuple{n21:String='SMDCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeType'},
		Tuple{n21:String='COLCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeType'},
		Tuple{n21:String='NISTImageType',n21namespace:String=niem21_ansi_nist_URI,n3:String='ImageType'},
		Tuple{n21:String='FingerprintType',n21namespace:String=niem21_ansi_nist_URI,n3:String='MinutiaeType'},
		Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeSimpleType'},
		Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeType'},
		Tuple{n21:String='COLCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeType'},
		Tuple{n21:String='COLCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeSimpleType'},
		Tuple{n21:String='PCCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureClassCodeType'},
		Tuple{n21:String='PCCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureClassCodeSimpleType'},
		Tuple{n21:String='PSCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureSubClassCodeType'},
		Tuple{n21:String='PSCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureSubClassCodeSimpleType'},
		Tuple{n21:String='SMDCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeType'},
		Tuple{n21:String='SMDCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeSimpleType'},
	// 		// nc:SubstanceQuantityMeasure -> nc:MeasureType
		Tuple{n21:String='SubstanceQuantityMeasure',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
	
	// CaseType, AppellateCaseType
		Tuple{n21:String='BondType',n21namespace:String=niem21_j_URI,n3:String='BailBondType'},
		Tuple{n21:String='PersonToothAugmentationType',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentationType'},
		Tuple{n21:String='PropertyDispositionAugmentationType',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentationType'},
		Tuple{n21:String='TreatmentType',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentationType'},
		Tuple{n21:String='PropertySeizureType',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureType'},
		Tuple{n21:String='CrashLocationAugmentationType',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentationType'},
		Tuple{n21:String='CaseType',n21namespace:String=niem21_j_URI,n3:String='AppellateCaseType'},
		// MeasureRangeValueType --> DecimalRangeType
		Tuple{n21:String='MeasureRangeValueType',n21namespace:String=niem21_nc_URI,n3:String='DecimalRangeType'},
		Tuple{n21:String='PercentageSimpleType',n21namespace:String=niem21_nc_URI,n3:String='PercentSimpleType'},
		Tuple{n21:String='PercentageType',n21namespace:String=niem21_nc_URI,n3:String='PercentType'},
		Tuple{n21:String='ComputerType',n21namespace:String=niem21_nc_URI,n3:String='DeviceType'},
//		Tuple{n21:String='TelecommunicationDeviceType',n21namespace:String=niem21_nc_URI,n3:String='DeviceType'},
		//Tuple{n21:String='TelecommunicationDeviceType',n21namespace:String=niem21_nc_URI,n3:String='DeviceInformationAssociationType'},
		
	// "IdentityAssociationType"
		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_nc_URI,n3:String='PersonIdentityAssociationType'},
	// TimeMeasureType, MeasureType
		Tuple{n21:String='EmailType',n21namespace:String=niem21_nc_URI,n3:String='MessageType'},
		Tuple{n21:String='TimeMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
		Tuple{n21:String='SpeedMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
		Tuple{n21:String='ActivityInvolvedPersonAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ActivityPersonAssociationType'},
		Tuple{n21:String='ReferralProperty',n21namespace:String=niem21_nc_URI,n3:String='ReferralItem'},
		Tuple{n21:String='TangibleItemType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
//		Tuple{n21:String='PropertyType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
		
		Tuple{n21:String='OrganizationItemAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ItemEntityAssociationType'},
//		Tuple{n21:String='StructuredAddressType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'},
		Tuple{n21:String='TwoDimensionalGeographicCoordinateType',n21namespace:String=niem21_nc_URI,n3:String='Location2DGeospatialCoordinateType'},
		Tuple{n21:String='OrganizationContactInformationAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ContactInformationAssociationType'},
		Tuple{n21:String='PersonContactInformationAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ContactInformationAssociationType'},
		Tuple{n21:String='LengthMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
		Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'}
		//Tuple{n21:String='MeasurePointValueType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'}, 
		//Tuple{n21:String='TelephoneNumberAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberType'}, 
};
// properties having change of name within same namespace (and no extra handling)
property property21to3:Sequence(Tuple(n21:String,n21namespace:String,n3:String)) = Sequence{
		Tuple{n21:String='VehicleSubjectCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='VehicleSubjectCategoryCodeText'},
		Tuple{n21:String='VehicleCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='VehicleCategoryCodeText'},
//		Tuple{n21:String='SupportLevelCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='SupportLevelCategoryCodeText'},
		Tuple{n21:String='SoundexIndexValue',n21namespace:String=niem21_scr_URI,n3:String='SoundexIndexValueText'},
		Tuple{n21:String='SoftwareVersionNumber',n21namespace:String=niem21_scr_URI,n3:String='SoftwareVersionNumberID'},
//		Tuple{n21:String='ScreeningIdentificationAugmentation',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentation'},
		Tuple{n21:String='ReasonExcludedAdmissionCode',n21namespace:String=niem21_scr_URI,n3:String='ReasonExcludedAdmissionCodeText'},
		Tuple{n21:String='PersonConfidenceLevelPercentage',n21namespace:String=niem21_scr_URI,n3:String='PersonConfidenceLevelPercent'},
		Tuple{n21:String='NotificationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='NotificationCategoryCodeText'},
		Tuple{n21:String='InmateNumber',n21namespace:String=niem21_scr_URI,n3:String='InmateNumberID'},
//		Tuple{n21:String='ImmigrationStatus',n21namespace:String=niem21_scr_URI,n3:String='ScreeningImmigrationStatus'},
//		Tuple{n21:String='EncounterDeviceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonEncounterDeviceCategoryCode'},
		Tuple{n21:String='EmployeeCallNumber',n21namespace:String=niem21_scr_URI,n3:String='EmployeeCallNumberID'},
		Tuple{n21:String='EmployeeBadgeNumber',n21namespace:String=niem21_scr_URI,n3:String='EmployeeBadgeNumberID'},
//		Tuple{n21:String='Detention',n21namespace:String=niem21_scr_URI,n3:String='AlienDetention'},
		Tuple{n21:String='DepartureDate',n21namespace:String=niem21_scr_URI,n3:String='PersonDepartureDate'},
		
		Tuple{n21:String='Departure',n21namespace:String=niem21_scr_URI,n3:String='ScreeningDeparture'},
		Tuple{n21:String='CrossingReferralAgencyCode',n21namespace:String=niem21_scr_URI,n3:String='CrossingReferralAgencyCodeText'},
		Tuple{n21:String='CrossingAgencyCode',n21namespace:String=niem21_scr_URI,n3:String='CrossingAgencyCodeText'},
//		Tuple{n21:String='ConveyanceAugmentation',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentation'},
		Tuple{n21:String='ArrivalDate',n21namespace:String=niem21_scr_URI,n3:String='PersonArrivalDate'},
		Tuple{n21:String='Arrival',n21namespace:String=niem21_scr_URI,n3:String='ScreeningArrival'},
		Tuple{n21:String='ApplicationStatusReason',n21namespace:String=niem21_scr_URI,n3:String='ApplicationStatusReasonText'},
		Tuple{n21:String='AlertCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ScreeningAlertCategoryCode'},
//		Tuple{n21:String='Alert',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentation'},
		Tuple{n21:String='UTMGridZoneSquareID',n21namespace:String=niem21_nc_URI,n3:String='MGRSGridZoneSquareID'},
		Tuple{n21:String='UTMGridZoneID',n21namespace:String=niem21_nc_URI,n3:String='MGRSGridZoneID'},
//		Tuple{n21:String='SecurityLevelText',n21namespace:String=niem21_nc_URI,n3:String='DocumentSensitivityText'},
		Tuple{n21:String='ReliabilityNumeric',n21namespace:String=niem21_nc_URI,n3:String='ReliabilityPercent'},
		Tuple{n21:String='ReleaseProperty',n21namespace:String=niem21_nc_URI,n3:String='ReleaseItem'},
		Tuple{n21:String='QualityCommentText',n21namespace:String=niem21_nc_URI,n3:String='QualityComment'},
		Tuple{n21:String='PropertyStyleText',n21namespace:String=niem21_nc_URI,n3:String='ItemStyleText'},
//		Tuple{n21:String='PropertyRecoveredValue',n21namespace:String=niem21_nc_URI,n3:String='ItemRecoveredValue'},
		Tuple{n21:String='PropertyDispositionLocationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemDispositionLocationAssociation'},
		Tuple{n21:String='PropertyCurrentResaleValue',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentResaleValue'},
		Tuple{n21:String='PropertyCurrentLocationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentLocationAssociation'},
		Tuple{n21:String='ProgressPaymentAmountText',n21namespace:String=niem21_nc_URI,n3:String='ProgressPaymentAmount'},
		Tuple{n21:String='ProgramCapacityText',n21namespace:String=niem21_nc_URI,n3:String='ProgramCapacityQuantity'},
		Tuple{n21:String='ProbabilityNumeric',n21namespace:String=niem21_nc_URI,n3:String='ProbabilityPercent'},
		Tuple{n21:String='PersonDonorOrgan',n21namespace:String=niem21_nc_URI,n3:String='PersonOrganDonor'},
		Tuple{n21:String='PersonActivityInvolvementAssociation',n21namespace:String=niem21_nc_URI,n3:String='ActivityPersonAssociation'},
		Tuple{n21:String='Percentage',n21namespace:String=niem21_nc_URI,n3:String='Percent'},
//		Tuple{n21:String='MeasureText',n21namespace:String=niem21_nc_URI,n3:String='MeasureValueText'},
//		Tuple{n21:String='MeasureRangeValue',n21namespace:String=niem21_nc_URI,n3:String='MeasureDecimalRange'},
//		Tuple{n21:String='LocationGeographicElevation',n21namespace:String=niem21_nc_URI,n3:String='LocationElevation'},
//		Tuple{n21:String='LocationDepthMeasure',n21namespace:String=niem21_nc_URI,n3:String='LocationDepth'},
		Tuple{n21:String='LocaleEmergencyServicesCityName',n21namespace:String=niem21_nc_URI,n3:String='LocaleEmergencyServicesName'},
		Tuple{n21:String='IntellectualProperty',n21namespace:String=niem21_nc_URI,n3:String='IntellectualItem'},
		Tuple{n21:String='InsuranceEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='InsuranceEffectiveDateRange'},
		Tuple{n21:String='InsuranceCoveredProperty',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoveredItem'},
		Tuple{n21:String='InstantMessengerClientName',n21namespace:String=niem21_nc_URI,n3:String='InstantMessengerServiceName'},
		Tuple{n21:String='InjuryTreatmentText',n21namespace:String=niem21_nc_URI,n3:String='TreatmentText'},
		Tuple{n21:String='InjuryTreatmentProvider',n21namespace:String=niem21_nc_URI,n3:String='TreatmentProvider'},
		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIdentityAssociation'},
//		Tuple{n21:String='GeographicDatumCode',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		Tuple{n21:String='EmailSubjectText',n21namespace:String=niem21_nc_URI,n3:String='MessageSubjectText'},
		Tuple{n21:String='EmailSentDate',n21namespace:String=niem21_nc_URI,n3:String='MessageSentDate'},
//		Tuple{n21:String='EmailSenderName',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderName'},
//		Tuple{n21:String='EmailSenderEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderEntity'},
		Tuple{n21:String='EmailSenderAddressID',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderAddressID'},
		Tuple{n21:String='EmailSender',n21namespace:String=niem21_nc_URI,n3:String='MessageSender'},
//		Tuple{n21:String='EmailRecipientName',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientName'},
//		Tuple{n21:String='EmailRecipientEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientEntity'},
		Tuple{n21:String='EmailRecipientAddressID',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientAddressID'},
		Tuple{n21:String='EmailRecipient',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipient'},
		Tuple{n21:String='EmailReceivedDate',n21namespace:String=niem21_nc_URI,n3:String='MessageReceivedDate'},
		Tuple{n21:String='EmailMessageText',n21namespace:String=niem21_nc_URI,n3:String='MessageText'},
		Tuple{n21:String='EmailID',n21namespace:String=niem21_nc_URI,n3:String='MessageID'},
//		Tuple{n21:String='EmailAttachmentImage',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentImage'},
//		Tuple{n21:String='EmailAttachmentDocument',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentDocument'},
//		Tuple{n21:String='EmailAttachmentBinary',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentBinary'},
		Tuple{n21:String='EmailAttachment',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachment'},
		Tuple{n21:String='DrugMeasurement',n21namespace:String=niem21_nc_URI,n3:String='DrugMeasure'},
		Tuple{n21:String='DrugDaysSupplyText',n21namespace:String=niem21_nc_URI,n3:String='DrugDaysSupplyQuantity'},
		Tuple{n21:String='DocumentSubmissionFee',n21namespace:String=niem21_nc_URI,n3:String='DocumentSubmissionAmount'},
		Tuple{n21:String='DocumentOtherAddresseeName',n21namespace:String=niem21_nc_URI,n3:String='DocumentOtherRecipient'},
//		Tuple{n21:String='DocumentCoverageTextText',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageText'},
//		Tuple{n21:String='DocumentCoverageTextDate',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageDate'},
//		Tuple{n21:String='DocumentCoverageTextAddress',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageAddress'},
//		Tuple{n21:String='DEAClassScheduleCode',n21namespace:String=niem21_nc_URI,n3:String='DEAClassScheduleText'},
		Tuple{n21:String='ConveyanceSalesTaxPercentage',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceSalesTaxPercent'},
		Tuple{n21:String='BinaryLocationURI',n21namespace:String=niem21_nc_URI,n3:String='BinaryURI'},
		Tuple{n21:String='BinaryFormatID',n21namespace:String=niem21_nc_URI,n3:String='BinaryFormatText'},
		Tuple{n21:String='BinaryAvailableLocationText',n21namespace:String=niem21_nc_URI,n3:String='BinaryLocationText'},
//		Tuple{n21:String='AddressBuildingText',n21namespace:String=niem21_nc_URI,n3:String='AddressBuildingName'},
//		Tuple{n21:String='VictimAffectedProperty',n21namespace:String=niem21_j_URI,n3:String='VictimAffectedItem'},
//		Tuple{n21:String='VehicleCargoBodyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCargoBodyCategoryCode'},
//		Tuple{n21:String='Treatment',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentation'},
		Tuple{n21:String='TargetProperty',n21namespace:String=niem21_j_URI,n3:String='TargetItem'},
//		Tuple{n21:String='StatuteOffenseMinnesotaCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseAPCOCode'},

		Tuple{n21:String='StatuteOffenseEnhancibleIndicator',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseEnhanceableIndicator'},
		Tuple{n21:String='SentenceModificationConfinementCreditDayText',n21namespace:String=niem21_j_URI,n3:String='SentenceModificationConfinementCreditDayQuantity'},
//		Tuple{n21:String='SecuritiesRansomMoneyCode',n21namespace:String=niem21_j_URI,n3:String='SecuritiesRansomMoneyText'},
		Tuple{n21:String='RoadwayGradeSlopePercentage',n21namespace:String=niem21_j_URI,n3:String='RoadwayGradeSlopePercent'},
		Tuple{n21:String='RegisteredOffenderDescription',n21namespace:String=niem21_j_URI,n3:String='RegisteredOffenderDescriptionText'},
		Tuple{n21:String='RegisterActionTitle',n21namespace:String=niem21_j_URI,n3:String='RegisterActionTitleText'},
		Tuple{n21:String='PropertyTotalDamageValue',n21namespace:String=niem21_j_URI,n3:String='ItemTotalDamageValue'},
		Tuple{n21:String='PropertySightedIndicator',n21namespace:String=niem21_j_URI,n3:String='ItemSightedIndicator'},
		Tuple{n21:String='PropertySeizureWarrant',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureWarrant'},
//		Tuple{n21:String='PropertySeizureSeizingEnforcementOfficial',n21namespace:String=niem21_j_URI,n3:String='ItemSeizingEnforcementOfficial'},
		Tuple{n21:String='PropertySeizureReleaseConditionText',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureReleaseConditionText'},
		
		Tuple{n21:String='PropertySeizureProperty',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureItem'},
		Tuple{n21:String='PropertySeizurePossessingPerson',n21namespace:String=niem21_j_URI,n3:String='ItemSeizurePossessingPerson'},
		Tuple{n21:String='PropertySeizureOwningPerson',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureOwningPerson'},
		Tuple{n21:String='PropertySeizureMethodText',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureMethodText'},
		Tuple{n21:String='PropertySeizureDisposition',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureDisposition'},
		Tuple{n21:String='PropertySeizure',n21namespace:String=niem21_j_URI,n3:String='ItemSeizure'},
		Tuple{n21:String='PropertyNCICIdentification',n21namespace:String=niem21_j_URI,n3:String='ItemNCICIdentification'},
		Tuple{n21:String='PropertyMissingValue',n21namespace:String=niem21_j_URI,n3:String='ItemMissingValue'},
		Tuple{n21:String='PropertyFederalIdentification',n21namespace:String=niem21_j_URI,n3:String='ItemFederalIdentification'},
//		Tuple{n21:String='PropertyDispositionCode',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionCode'},
//		Tuple{n21:String='PropertyDispositionAugmentation',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentation'},
		Tuple{n21:String='PropertyDetailValue',n21namespace:String=niem21_j_URI,n3:String='ItemDetailValue'},
		
		
//		Tuple{n21:String='PropertyDetailText',n21namespace:String=niem21_j_URI,n3:String='ItemDetailText'},
		Tuple{n21:String='PropertyDetailDescription',n21namespace:String=niem21_j_URI,n3:String='ItemDetailDescriptionText'},
//		Tuple{n21:String='PropertyDetailCode',n21namespace:String=niem21_j_URI,n3:String='ItemDetailCode'},
//		Tuple{n21:String='PropertyCategoryNIBRSPropertyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSPropertyCategoryCode'},
//		Tuple{n21:String='PropertyCategoryNIBRSCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSCode'},

//		Tuple{n21:String='PropertyCategoryNCICTYPCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPCode'},
//		Tuple{n21:String='PropertyCategoryNCICTYPACode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPACode'},
//		Tuple{n21:String='PersonToothAugmentation',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentation'},
//		Tuple{n21:String='personNameCategoryCode',n21namespace:String=niem21_j_URI,n3:String='PersonNameCategoryCode'},

//		Tuple{n21:String='PersonJewelryCategoryText',n21namespace:String=niem21_j_URI,n3:String='JewelryCategoryText'},
		Tuple{n21:String='PersonIssuedPropertyTitleAbstract',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitleAbstract'},
//		Tuple{n21:String='PersonIssuedPropertyTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitle'},
//		Tuple{n21:String='PersonIssuedPropertyRegistrationTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemRegistrationTitle'},
//		Tuple{n21:String='PersonInjurySeverityCode',n21namespace:String=niem21_j_URI,n3:String='InjurySeverityCode'},
//		Tuple{n21:String='PersonInjuryLocationCode',n21namespace:String=niem21_j_URI,n3:String='InjuryLocationCode'},
//		Tuple{n21:String='PersonHitResultsCode',n21namespace:String=niem21_j_URI,n3:String='PersonHitResultsText'},
//		Tuple{n21:String='PassagePointMethodText',n21namespace:String=niem21_j_URI,n3:String='PassagePointMethodOfAccessText'},
		Tuple{n21:String='MotorCarrierHAZMATTransportationIndicator',n21namespace:String=niem21_j_URI,n3:String='MotorCarrierHazMatTransportationIndicator'},
		Tuple{n21:String='IncidentStolenProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentStolenItem'},
		Tuple{n21:String='IncidentSeizedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentSeizedItem'},
		Tuple{n21:String='IncidentRecoveredProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentRecoveredItem'},
		Tuple{n21:String='IncidentPropertyDisposition',n21namespace:String=niem21_j_URI,n3:String='IncidentItemDisposition'},
		Tuple{n21:String='IncidentInvolvedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentInvolvedItem'},
		Tuple{n21:String='IncidentFormComment',n21namespace:String=niem21_j_URI,n3:String='IncidentFormCommentText'},
		Tuple{n21:String='IncidentDamagedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentDamagedItem'},
		Tuple{n21:String='ForceWeaponProperty',n21namespace:String=niem21_j_URI,n3:String='ForceWeaponItem'},
		Tuple{n21:String='ForceToolProperty',n21namespace:String=niem21_j_URI,n3:String='ForceToolItem'},
		Tuple{n21:String='EvidenceDocumentBinary',n21namespace:String=niem21_j_URI,n3:String='EvidenceDocumentationBinary'},
//		Tuple{n21:String='DrugDEACode',n21namespace:String=niem21_j_URI,n3:String='DrugCategoryDEACode'},
		Tuple{n21:String='DriverLicenseCardID',n21namespace:String=niem21_j_URI,n3:String='DriverLicenseCardIdentification'},
		Tuple{n21:String='CustodyTransferProperty',n21namespace:String=niem21_j_URI,n3:String='CustodyTransferItem'},
//		Tuple{n21:String='CrashLocationAugmentation',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentation'},
		Tuple{n21:String='CourtOrderDesignatedProperty',n21namespace:String=niem21_j_URI,n3:String='CourtOrderDesignatedItem'},
		Tuple{n21:String='CommercialVehiclePRISMPreviouslyTargetedIndicator',n21namespace:String=niem21_j_URI,n3:String='CommercialVehiclePreviouslyTargetedIndicator'},
		Tuple{n21:String='CommercialVehiclePRISMCurrentlyTargetedIndicator',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCurrentlyTargetedIndicator'},
		Tuple{n21:String='BookingSeizedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingSeizedItem'},
		Tuple{n21:String='BookingRetainedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingRetainedItem'},
		Tuple{n21:String='BookingDepositedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingDepositedItem'},
		Tuple{n21:String='Bond',n21namespace:String=niem21_j_URI,n3:String='BailBond'},
		Tuple{n21:String='ArrestInvolvedProperty',n21namespace:String=niem21_j_URI,n3:String='ArrestInvolvedItem'},
		Tuple{n21:String='WCODocumentNameCategory',n21namespace:String=niem21_it_URI,n3:String='WCODocumentNameCategoryCode'},
		Tuple{n21:String='ValuationAdjustmentPercentage',n21namespace:String=niem21_it_URI,n3:String='ValuationAdjustmentPercent'},
		Tuple{n21:String='ValuationAdditionsIndicator',n21namespace:String=niem21_it_URI,n3:String='ValuationAdditionsCode'},
//		Tuple{n21:String='UnloadingLocationCategory',n21namespace:String=niem21_it_URI,n3:String='UnloadingLocationCategoryCode'},
		Tuple{n21:String='UNDGContactIDCode',n21namespace:String=niem21_it_URI,n3:String='UNDGContactIDCategory'},
		Tuple{n21:String='TransshipmentPlace',n21namespace:String=niem21_it_URI,n3:String='TransshipmentPlaceName'},
		Tuple{n21:String='TransportMeansOwnerIDCode',n21namespace:String=niem21_it_URI,n3:String='TransportMeansOwnerIDCategory'},
		Tuple{n21:String='TransportMeansOperatorIDCode',n21namespace:String=niem21_it_URI,n3:String='TransportMeansOperatorIDCategory'},
		Tuple{n21:String='StuffingEstablishmentIDCode',n21namespace:String=niem21_it_URI,n3:String='StuffingEstablishmentIDCategory'},
		Tuple{n21:String='StevedoreIDCode',n21namespace:String=niem21_it_URI,n3:String='StevedoreIDCategory'},
		Tuple{n21:String='SequenceNumber',n21namespace:String=niem21_it_URI,n3:String='SequenceNumeric'},
		Tuple{n21:String='SellerIDCode',n21namespace:String=niem21_it_URI,n3:String='SellerIDCategory'},
		Tuple{n21:String='SealInformation',n21namespace:String=niem21_it_URI,n3:String='Seal'},
		Tuple{n21:String='RateOfExchange',n21namespace:String=niem21_it_URI,n3:String='RateOfExchangePercent'},
		Tuple{n21:String='ProcessingEstablishmentIDCode',n21namespace:String=niem21_it_URI,n3:String='ProcessingEstablishmentIDCategory'},
		Tuple{n21:String='ProcessingEstablishment',n21namespace:String=niem21_it_URI,n3:String='ProcessingEstablishmentText'},
		Tuple{n21:String='PreviousCustomsDocumentNumber',n21namespace:String=niem21_it_URI,n3:String='PreviousCustomsDocumentNumberID'},
//		Tuple{n21:String='PaymentAugmentation',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentation'},
		Tuple{n21:String='NTNPassportNumber',n21namespace:String=niem21_it_URI,n3:String='NTNPassportNumberID'},
		Tuple{n21:String='NotifyPartyIdCode',n21namespace:String=niem21_it_URI,n3:String='NotifyPartyIDCategory'},
		Tuple{n21:String='NonVesselOperatingCarrierIdCode',n21namespace:String=niem21_it_URI,n3:String='NonVesselOperatingCarrierIDCategory'},
		Tuple{n21:String='MasterIdCode',n21namespace:String=niem21_it_URI,n3:String='MasterIDCategory'},
		Tuple{n21:String='ManufacturerIdCode',n21namespace:String=niem21_it_URI,n3:String='ManufacturerIDCategory'},
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_it_URI,n3:String='LocationCategoryCodeText'},
		Tuple{n21:String='LoadingLocationCode',n21namespace:String=niem21_it_URI,n3:String='LoadingLocationCategoryText'},
		Tuple{n21:String='InvoiceSequenceNumber',n21namespace:String=niem21_it_URI,n3:String='InvoiceSequenceNumeric'},
		Tuple{n21:String='InvoiceLineNumber',n21namespace:String=niem21_it_URI,n3:String='InvoiceLineNumberID'},
		Tuple{n21:String='IntermediateConsigneeIdCode',n21namespace:String=niem21_it_URI,n3:String='IntermediateConsigneeIDCategory'},
		Tuple{n21:String='IntermediateCarrierIdCode',n21namespace:String=niem21_it_URI,n3:String='IntermediateCarrierIDCategory'},
		Tuple{n21:String='ImporterIdCode',n21namespace:String=niem21_it_URI,n3:String='ImporterIDCategory'},
		Tuple{n21:String='HandlingInstructions',n21namespace:String=niem21_it_URI,n3:String='HandlingInstructionsText'},
		Tuple{n21:String='GuaranteeReferenceIdentifier',n21namespace:String=niem21_it_URI,n3:String='GuaranteeReferenceID'},
		Tuple{n21:String='GoodsTariffCodeNumberCategory',n21namespace:String=niem21_it_URI,n3:String='GoodsTariffCodeNumberCategoryText'},
		Tuple{n21:String='GoodsStatisticalValue',n21namespace:String=niem21_it_URI,n3:String='GoodsItemStatisticalValue'},
		Tuple{n21:String='GoodsReceivedPlace',n21namespace:String=niem21_it_URI,n3:String='GoodsReceivedPlaceName'},
		Tuple{n21:String='GoodsPackaging',n21namespace:String=niem21_it_URI,n3:String='GoodsItemPackagingText'},
		Tuple{n21:String='GoodsNetWeight',n21namespace:String=niem21_it_URI,n3:String='GoodsNetWeightMeasure'},
//		Tuple{n21:String='GoodsManufacturedRegionOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedRegionOriginCode'},
//		Tuple{n21:String='GoodsManufacturedCountryOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedCountryOriginCode'},
		Tuple{n21:String='GoodsLocationCode',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationCategoryText'},
		Tuple{n21:String='GoodsLocation',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationText'},
		Tuple{n21:String='GoodsItem',n21namespace:String=niem21_it_URI,n3:String='GoodsItemMaterialText'},
		Tuple{n21:String='GoodsConsignedPlace',n21namespace:String=niem21_it_URI,n3:String='GoodsConsignedPlaceName'},
		Tuple{n21:String='ExporterIDCode',n21namespace:String=niem21_it_URI,n3:String='ExporterIDCategory'},
		Tuple{n21:String='EquipmentIdentifier',n21namespace:String=niem21_it_URI,n3:String='EquipmentID'},
		Tuple{n21:String='DutyTaxFeeCategory',n21namespace:String=niem21_it_URI,n3:String='DutyTaxFeeCategoryText'},
		Tuple{n21:String='DeconsolidatorIDCode',n21namespace:String=niem21_it_URI,n3:String='DeconsolidatorIDCategory'},
		Tuple{n21:String='DeclarationTotalItemsNumber',n21namespace:String=niem21_it_URI,n3:String='DeclarationTotalItemsQuantity'},
		Tuple{n21:String='CustomsValuation',n21namespace:String=niem21_it_URI,n3:String='CustomsValuationAmount'},
		Tuple{n21:String='CustomsProcedure',n21namespace:String=niem21_it_URI,n3:String='CustomsProcedureText'},
		Tuple{n21:String='CustomsOfficeDutyTaxPayment',n21namespace:String=niem21_it_URI,n3:String='CustomsOfficeDutyTaxPaymentText'},
		Tuple{n21:String='ContainerTerminalOperatorIDCode',n21namespace:String=niem21_it_URI,n3:String='ContainerTerminalOperatorIDCategory'},
		
		Tuple{n21:String='ContainerReferencedID',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerReferenceID'},
		Tuple{n21:String='ContainerLoadedWeight',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLoadedWeight'},
		Tuple{n21:String='ContainerLoadedText',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLoadedText'},
		Tuple{n21:String='ContainerLegalStatusIndicator',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLegalStatusIndicator'},
		Tuple{n21:String='ContainerLastLocation',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLastLocation'},
		Tuple{n21:String='ContainerIdentification',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerIdentification'},
		Tuple{n21:String='ContainerCargoItem',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerCargoItem'},
		Tuple{n21:String='ConsortiumCarrierIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsortiumCarrierIDCategory'},
		Tuple{n21:String='ConsolidatorIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsolidatorIDCategory'},
		Tuple{n21:String='ConsignorIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsignorIDCategory'},
		Tuple{n21:String='ConsigneeIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsigneeIDCategory'},
		Tuple{n21:String='CarrierIDCode',n21namespace:String=niem21_it_URI,n3:String='CarrierIDCategory'},
		Tuple{n21:String='BuyerIDCode',n21namespace:String=niem21_it_URI,n3:String='BuyerIDCategory'},
		Tuple{n21:String='BrokerIDCode',n21namespace:String=niem21_it_URI,n3:String='BrokerIDCategory'},
		Tuple{n21:String='AgentAuthorizationCodeText',n21namespace:String=niem21_it_URI,n3:String='AgentAuthorizationIDCategory'},
		Tuple{n21:String='AdditionalDocumentRefNumber',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentRefNumberID'},
		
//		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode'},
		Tuple{n21:String='SystemIdentifier',n21namespace:String=niem21_intel_URI,n3:String='SystemIdentification'},
		Tuple{n21:String='SubjectHandlingCode',n21namespace:String=niem21_intel_URI,n3:String='SubjectHandlingCodeText'},
		Tuple{n21:String='SubjectCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='SubjectCategoryCodeText'},
		Tuple{n21:String='StateINACode',n21namespace:String=niem21_intel_URI,n3:String='StateINACodeText'},
//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='PhysicalFeatureCategoryCodeText'},
		Tuple{n21:String='PersonSystemIdentifier',n21namespace:String=niem21_intel_URI,n3:String='PersonSystemIdentification'},
		Tuple{n21:String='PersonLocationUsageCode',n21namespace:String=niem21_intel_URI,n3:String='PersonLocationUsageCodeText'},
//		Tuple{n21:String='PersonLocationDetailsAugmentation',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentation'},
		Tuple{n21:String='PersonEducationDegreeCode',n21namespace:String=niem21_intel_URI,n3:String='PersonEducationDegreeCodeText'},
//		Tuple{n21:String='LocationCountryFIPS10-4PlusNCTCCode',n21namespace:String=niem21_intel_URI,n3:String='LocationCountryFIPS10-4PlusNCTCCodeText'},
//		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentation'},
		Tuple{n21:String='GlobalRegionCode',n21namespace:String=niem21_intel_URI,n3:String='GlobalRegionCodeText'},
		Tuple{n21:String='CBEFF',n21namespace:String=niem21_intel_URI,n3:String='CBEFFText'},
		Tuple{n21:String='AgencySubjectHandlingFBICode',n21namespace:String=niem21_intel_URI,n3:String='AgencySubjectHandlingFBICodeText'},
		Tuple{n21:String='SevisID',n21namespace:String=niem21_im_URI,n3:String='SEVISID'},
		Tuple{n21:String='SentenceTime',n21namespace:String=niem21_im_URI,n3:String='SentenceTimeNumeric'},
		Tuple{n21:String='PL9484AmendedIndicator',n21namespace:String=niem21_im_URI,n3:String='PL94-484AmendedIndicator'},
		Tuple{n21:String='EndDate',n21namespace:String=niem21_im_URI,n3:String='LocationAssociationEndDate'},
//		Tuple{n21:String='EmploymentAugmentation',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentation'},
		Tuple{n21:String='BeginDate',n21namespace:String=niem21_im_URI,n3:String='LocationAssociationBeginDate'},
		
		Tuple{n21:String='DisciplinaryAction',n21namespace:String=niem21_im_URI,n3:String='AlienStudentDisciplinaryAction'},
		Tuple{n21:String='Dependent',n21namespace:String=niem21_im_URI,n3:String='SEVISPersonDependentAssociation'},
//		Tuple{n21:String='Alien',n21namespace:String=niem21_im_URI,n3:String='AlienRole'},
		Tuple{n21:String='ValueListURN',n21namespace:String=niem21_em_URI,n3:String='ValueListURNText'},
		
		Tuple{n21:String='ResourceRequestedArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceRequestedArrivalDateTime'},
		Tuple{n21:String='ResourceFundCode',n21namespace:String=niem21_em_URI,n3:String='ResourceFundCodeText'},
		Tuple{n21:String='ResourceEstimatedDepartureDate',n21namespace:String=niem21_em_URI,n3:String='ResourceEstimatedDepartureDateTime'},
		Tuple{n21:String='ResourceEstimatedArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceEstimatedArrivalDateTime'},
		Tuple{n21:String='ResourceAnticipatedReturnDate',n21namespace:String=niem21_em_URI,n3:String='ResourceAnticipatedReturnDateTime'},
		Tuple{n21:String='ResourceActualDepartureDate',n21namespace:String=niem21_em_URI,n3:String='ResourceActualDepartureDateTime'},
		Tuple{n21:String='ResourceActualArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceActualArrivalDateTime'},
//		Tuple{n21:String='NotificationRecipientContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationRecipientContactEmailID'},
//		Tuple{n21:String='NotificationOriginatorContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationOriginatorContactEmailID'},
		Tuple{n21:String='MessageSentDate',n21namespace:String=niem21_em_URI,n3:String='MessageSentDateTime'},
		Tuple{n21:String='InventoryRefreshDate',n21namespace:String=niem21_em_URI,n3:String='InventoryRefreshDateTime'},
		Tuple{n21:String='EMSOffloadAmbulance',n21namespace:String=niem21_em_URI,n3:String='EMSOffloadAmbulanceCapability'},
		Tuple{n21:String='EMSOffloadAirTransport',n21namespace:String=niem21_em_URI,n3:String='EMSOffloadAirTransportCapability'},
		Tuple{n21:String='DepartureDate',n21namespace:String=niem21_em_URI,n3:String='DepartureDateTime'},
		Tuple{n21:String='BinaryChecksumDigest',n21namespace:String=niem21_em_URI,n3:String='BinaryChecksumDigestID'},
		Tuple{n21:String='ArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ArrivalDateTime'},
//		Tuple{n21:String='AlertHandlingIdentification',n21namespace:String=niem21_em_URI,n3:String='AlertHandlingID'},
//		Tuple{n21:String='AlarmMonitoringServiceProviderIdentification',n21namespace:String=niem21_em_URI,n3:String='AlarmMonitoringServiceProviderID'},
//		Tuple{n21:String='AlarmLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentation'},

		Tuple{n21:String='AlarmEventLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='AlarmEventLocation'},
		Tuple{n21:String='BondAmount',n21namespace:String=niem21_j_URI,n3:String='BailBondAmount'},
		Tuple{n21:String='BondConditionDescriptionText',n21namespace:String=niem21_j_URI,n3:String='BailBondConditionDescriptionText'},
		
		Tuple{n21:String='BondIssuerEntity',n21namespace:String=niem21_j_URI,n3:String='BailBondIssuerEntity'},
		Tuple{n21:String='BondPaymentDescriptionText',n21namespace:String=niem21_j_URI,n3:String='BailBondPaymentDescriptionText'},
		Tuple{n21:String='BondRevokeDate',n21namespace:String=niem21_j_URI,n3:String='BailBondRevokeDate'},
		Tuple{n21:String='BondSuretyName',n21namespace:String=niem21_j_URI,n3:String='BailBondSuretyEntity'},
		Tuple{n21:String='BondTerminationDate',n21namespace:String=niem21_j_URI,n3:String='BailBondTerminationDate'},
		Tuple{n21:String='BondTerminationCategoryText',n21namespace:String=niem21_j_URI,n3:String='BailBondTerminationCategoryText'},
		Tuple{n21:String='RangeMinimumValue',n21namespace:String=niem21_nc_URI,n3:String='RangeMinimumDecimalValue'},
		Tuple{n21:String='RangeMaximumValue',n21namespace:String=niem21_nc_URI,n3:String='RangeMaximumDecimalValue'},
		Tuple{n21:String='RegistrationJurisdiction',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionAbstract'},
		Tuple{n21:String='StatusText',n21namespace:String=niem21_nc_URI,n3:String='StatusCommentText'},
		Tuple{n21:String='AreaPolygonGeographicCoordinate',n21namespace:String=niem21_nc_URI,n3:String='PolygonCoordinate'},
//		Tuple{n21:String='PersonActivityInvolvementText',n21namespace:String=niem21_nc_URI,n3:String='ActivityInvolvementText'},
//		Tuple{n21:String='LocationAddressGrid',n21namespace:String=niem21_nc_URI,n3:String='AddressGrid'},
//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='TelephoneNumberCategoryText'},
		Tuple{n21:String='MeasureCategoryText',n21namespace:String=niem21_nc_URI,n3:String='MeasureMethodText'}
//		Tuple{n21:String='MeasureUnitText',n21namespace:String=niem21_j_URI,n3:String='GeographicDatumText'}
};


////////////////////////////////////////namespace change		
property property21to3WithNamespace:Sequence(Tuple(n21:String,n21namespace:String,n3:String,n3namespace:String)) = Sequence{
		Tuple{n21:String='PropertyHolding',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizureDisposition',n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='RoleOfItemReference',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizureItem',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertySeizedLocation',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizedLocation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertyRegistrationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistrationAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationAuthorityName',n21namespace:String=niem21_nc_URI,n3:String='RegistrationAuthorityName',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationDuplicateQuantity',n21namespace:String=niem21_nc_URI,n3:String='RegistrationDuplicateQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='RegistrationEffectiveDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ActivityFacilityAssociation',n21namespace:String=niem21_j_URI,n3:String='ActivityFacilityAssociation',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='LocationCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lessee',n21namespace:String=niem21_nc_URI,n3:String='Lessee',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LesseeJurisdictionAuthority',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthority',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LesseeJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LesseeJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lessor',n21namespace:String=niem21_nc_URI,n3:String='Lessor',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LessorIdentification',n21namespace:String=niem21_nc_URI,n3:String='LessorIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lien',n21namespace:String=niem21_nc_URI,n3:String='Lien',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienAmount',n21namespace:String=niem21_nc_URI,n3:String='LienAmount',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienDate',n21namespace:String=niem21_nc_URI,n3:String='LienDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienHolder',n21namespace:String=niem21_nc_URI,n3:String='LienHolder',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienReleaseDate',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienReleaseReason',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReason',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LienReleaseReasonCode',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonCode',n3namespace:String=niem21_j_URI},
// here
//		Tuple{n21:String='LienReleaseReasonText',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationIdentification',n21namespace:String=niem21_nc_URI,n3:String='RegistrationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationItem',n21namespace:String=niem21_nc_URI,n3:String='RegistrationItem',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftWingColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftWingColorCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftStyleCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftStyleCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftModelCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftModelCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftMakeCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftFuselageColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftFuselageColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartID',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartID',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartBrand',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartBrand',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartCategory',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategory',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartDescriptionText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePart',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePart',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='ConveyancePartCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='ConveyancePartCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryText',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='InsuranceCoverageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoverageCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleOfCertifyingOfficerText',n21namespace:String=niem21_im_URI,n3:String='TitleOfCertifyingOfficerText',n3namespace:String=niem21_j_URI},
		
		Tuple{n21:String='DriverLicense',n21namespace:String=niem21_nc_URI,n3:String='DriverLicense',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseAssociation',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseBase',n21namespace:String=niem21_nc_URI,n3:String=			'DriverLicenseBase',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseCommercialClass',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClass',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='DriverLicenseCommercialClassCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='DriverLicenseCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassText',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonEthnicityCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEthnicityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonEyeColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEyeColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonGangAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonGangAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonHairColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonHairColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonIntoxication',n21namespace:String=niem21_nc_URI,n3:String='PersonIntoxication',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonInvolvedInDrivingIncidentAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonInvolvedInDrivingIncidentAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='SubstanceUnitCode',n21namespace:String=niem21_nc_URI,n3:String='SubstanceUnitCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Title',n21namespace:String=niem21_nc_URI,n3:String='Title',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleCategoryText',n21namespace:String=niem21_nc_URI,n3:String='TitleCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleDuplicateQuantity',n21namespace:String=niem21_nc_URI,n3:String='TitleDuplicateQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleHolder',n21namespace:String=niem21_nc_URI,n3:String='TitleHolder',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIdentification',n21namespace:String=niem21_nc_URI,n3:String='TitleIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssueDate',n21namespace:String=niem21_nc_URI,n3:String='TitleIssueDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssuingAuthorityName',n21namespace:String=niem21_nc_URI,n3:String='TitleIssuingAuthorityName',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssuingJurisdiction',n21namespace:String=niem21_nc_URI,n3:String='TitleIssuingJurisdiction',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleItem',n21namespace:String=niem21_nc_URI,n3:String='TitleItem',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleLienIndicator',n21namespace:String=niem21_nc_URI,n3:String='TitleLienIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleStatus',n21namespace:String=niem21_nc_URI,n3:String='TitleStatus',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleStatusCode',n21namespace:String=niem21_nc_URI,n3:String='TitleStatusCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ToothPositionIDCode',n21namespace:String=niem21_nc_URI,n3:String='ToothPositionIDCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrand',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrand',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDamagePercentageCategory',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategory',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDesignation',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDesignation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrander',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrander',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBranderCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBranderIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandSalvagePercentage',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandSalvagePercent',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandVehicleDisposition',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDisposition',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandVehicleDispositionCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandVehicleDispositionText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandVehicleSourceName',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleSourceName',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorPrimaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorSecondaryCode',n3namespace:String=niem21_j_URI},
		
		Tuple{n21:String='VehicleEmissionInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleEmissionInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleEmissionInspectionQuantity',n21namespace:String=niem21_nc_URI,n3:String='VehicleEmissionInspectionQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleGarage',n21namespace:String=niem21_nc_URI,n3:String='VehicleGarage',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleGarageIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleGarageIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionAddress',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionAddress',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionEmissionCertificationIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionEmissionCertificationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionEmissionPassIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionEmissionPassIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionInspectorIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionInspectorIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionJurisdictionAuthority',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthority',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionSafetyPassIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSafetyPassIndicator',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionSmogCertificateCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSmogCertificateCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionStationIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionStationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionTestCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionTestCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInvoiceDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleInvoiceDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInvoiceIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInvoiceIdentification',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleOdometerReadingUnitCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleOdometerReadingUnitCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehiclePaperMCOIssuedIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehiclePaperMCOIssuedIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleSafetyInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleSafetyInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleShipDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleShipDate',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleStyleCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleStyleCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTaxableAmount',n21namespace:String=niem21_nc_URI,n3:String='VehicleTaxableAmount',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTitle',n21namespace:String=niem21_nc_URI,n3:String='VehicleTitle',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTitleAssociation',n21namespace:String=niem21_nc_URI,n3:String='VehicleTitleAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleTransmissionCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleTransmissionCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleVINAText',n21namespace:String=niem21_nc_URI,n3:String='VehicleVINAText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleWantedIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleWantedIndicator',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorPrimaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorSecondaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselHullMaterialCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullMaterialCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselHullShapeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullShapeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselPropulsionCode',n21namespace:String=niem21_nc_URI,n3:String='VesselPropulsionCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselTrailerMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselTrailerMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonIssuedCourtOrderAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIssuedCourtOrderAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonOrganDonorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonOrganDonorCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonRaceCode',n21namespace:String=niem21_nc_URI,n3:String='PersonRaceCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonResidentCode',n21namespace:String=niem21_nc_URI,n3:String='PersonResidentCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonSexCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSexCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonSkinToneCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSkinToneCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='PhysicalFeatureCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TelephoneNumberAugmentation',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumber',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentAssociation',n21namespace:String=niem21_scr_URI,n3:String='DocumentAssociation',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentStatusDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='DocumentStatusDescriptionText',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='ManifestCategoryCodeDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='ManifestCategoryCodeDescriptionText',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='PrimaryDocument',n21namespace:String=niem21_scr_URI,n3:String='PrimaryDocument',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='TelephoneCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryCode',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryText',n3namespace:String=niem21_nc_URI},
//////////////////////next batch

		Tuple{n21:String='BiometricRepositoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricRepositoryDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricRepositoryOrganization',n21namespace:String=niem21_nc_URI,n3:String='BiometricRepositoryOrganization',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricAccuracyDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricAccuracyDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTestDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTestDate',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestDate',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricTestMethodText',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestMethodText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTester',n21namespace:String=niem21_nc_URI,n3:String='BiometricTester',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricCapturer',n21namespace:String=niem21_nc_URI,n3:String='BiometricCapturer',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricLabAnalysisText',n21namespace:String=niem21_nc_URI,n3:String='BiometricLabAnalysisText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricBinary',n21namespace:String=niem21_nc_URI,n3:String='BiometricBinary',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricID',n21namespace:String=niem21_nc_URI,n3:String='BiometricID',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricValueText',n21namespace:String=niem21_nc_URI,n3:String='BiometricValueText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricEncodingMethodText',n21namespace:String=niem21_nc_URI,n3:String='BiometricEncodingMethodText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricDescriptionText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricStatus',n21namespace:String=niem21_nc_URI,n3:String='BiometricStatus',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='MaximumRangeIdentification',n21namespace:String=niem21_ansi_nist_URI,n3:String='MaximumRangeIdentification',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='MinimumRangeIdentification',n21namespace:String=niem21_ansi_nist_URI,n3:String='MinimumRangeIdentification',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='ProtectionOrderBradyIndicator',n21namespace:String=niem21_ansi_nist_URI,n3:String='ProtectionOrderBradyIndicator',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='ProtectionOrderConditionText',n21namespace:String=niem21_ansi_nist_URI,n3:String='ProtectionOrderConditionText',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='VehicleOwnershipNICB',n21namespace:String=niem21_ansi_nist_URI,n3:String='VehicleOwnershipNICB',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='DNALocusCategoryText',n21namespace:String=niem21_nc_URI,n3:String='DNALocusCategoryText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='DNALocusValue',n21namespace:String=niem21_nc_URI,n3:String='DNALocusValue',n3namespace:String=niem21_ansi_nist_URI},		
		Tuple{n21:String='ItemRegistration',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistration',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemRegistrationHolder',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistrationHolder',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationHolder',n21namespace:String=niem21_nc_URI,n3:String='RegistrationHolder',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemReplacementTitle',n21namespace:String=niem21_nc_URI,n3:String='ItemReplacementTitle',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitle',n21namespace:String=niem21_nc_URI,n3:String='ItemTitle',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleAssociation',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ItemTitleDocumentCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleDocumentCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitlePurchaseDate',n21namespace:String=niem21_nc_URI,n3:String='ItemTitlePurchaseDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitlePurchasePriceAmount',n21namespace:String=niem21_nc_URI,n3:String='ItemTitlePurchasePriceAmount',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleReplacementAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleReplacementAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleSalesTaxAmount',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleSalesTaxAmount',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleSalesTaxPercentage',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleSalesTaxPercent',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleTaxableValue',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleTaxableValue',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Jewelry',n21namespace:String=niem21_nc_URI,n3:String='Jewelry',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryCaratText',n21namespace:String=niem21_nc_URI,n3:String='JewelryCaratText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationFee',n21namespace:String=niem21_nc_URI,n3:String='RegistrationFee',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationExpirationDate',n21namespace:String=niem21_nc_URI,n3:String='RegistrationExpirationDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseNonCommercialStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseNonCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseNonCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermit',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermit',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitClassificationText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitClassificationText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitQuantity',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitQuantity',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicensePermitStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicensePermitStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePerson',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePerson',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseCommercialStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseEndorsementCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseEndorsementText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseExpirationDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseExpirationDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Firearm',n21namespace:String=niem21_nc_URI,n3:String='Firearm',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCaliberCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeNCICCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCaliberText',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmCaliber',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSize',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmGripText',n21namespace:String=niem21_nc_URI,n3:String='FirearmGripText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmFinish',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinish',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmFinishText',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinishText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmBarrelLengthMeasure',n21namespace:String=niem21_nc_URI,n3:String='FirearmBarrelLengthMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmAutomaticIndicator',n21namespace:String=niem21_nc_URI,n3:String='FirearmAutomaticIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmCategoryDescription',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescription',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationDecal',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationDecal',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationGrossWeightMeasure',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationGrossWeightMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationLocation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationLocation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPermanentIndicator',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPermanentIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateBackgroundText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateBackgroundText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateColor',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColor',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateColorCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateColorText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistration',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistration',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateCategory',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategory',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationRoadIndicator',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationRoadIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationStatus',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatus',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationStatus',n21namespace:String=niem21_nc_URI,n3:String='RegistrationStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateIdentification',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateIdentification',n3namespace:String=niem21_j_URI},
				
//		Tuple{n21:String='LocationStateNCICLISCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLISCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='LocationStateNCICLSTACode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLSTACode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='LocationStateNCICRESCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICRESCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationStatusDetail',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetail',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DecalPeriodCode',n21namespace:String=niem21_nc_URI,n3:String='DecalPeriodCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DisciplinaryActionFacility',n21namespace:String=niem21_nc_URI,n3:String='DisciplinaryActionFacility',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='OrganizationGangAssociation',n21namespace:String=niem21_nc_URI,n3:String='OrganizationGangAssociation',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='SecuritiesDenominationCode',n21namespace:String=niem21_nc_URI,n3:String='SecuritiesDenominationCode',n3namespace:String=niem21_j_URI},		
////////////////////////////////////////namespace change 
		Tuple{n21:String='EngineHorsepowerQuantity',n21namespace:String=niem21_nc_URI,n3:String='EngineHorsepowerQuantity',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='EngineDisplacementUnitCode',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementUnitCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='EngineID',n21namespace:String=niem21_nc_URI,n3:String='EngineID',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Explosive',n21namespace:String=niem21_nc_URI,n3:String='Explosive',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveComponent',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponent',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveComponentCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveComponentText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveContainer',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainer',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveContainerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveContainerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveFiller',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFiller',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveFillerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveFillerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveIgnition',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnition',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveIgnitionCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveIgnitionText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='AlarmLocationDirectionText',n21namespace:String=niem21_em_URI,n3:String='LocationDirectionsText',n3namespace:String=niem21_nc_URI},		
		
		Tuple{n21:String='EngineDisplacementMeasure',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='EngineCylinderQuantity',n21namespace:String=niem21_nc_URI,n3:String='EngineCylinderQuantity',n3namespace:String=niem21_j_URI},	
		
		Tuple{n21:String='Engine',n21namespace:String=niem21_nc_URI,n3:String='Engine',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceFuelCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceFuelCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceEngineAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceEngineAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ClothingCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingColorText',n21namespace:String=niem21_nc_URI,n3:String='ClothingColorText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='ClothingDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingStyleText',n21namespace:String=niem21_nc_URI,n3:String='ClothingStyleText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Clothing',n21namespace:String=niem21_nc_URI,n3:String='Clothing',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyancePartBrand',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartBrand',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseRestriction',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseRestriction',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawal',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawal',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalAction',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalAction',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalActionCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalActionText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalBasis',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasis',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalBasisCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalBasisText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEffectiveDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalEligibilityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalEligibilityDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalExtent',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtent',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalExtentCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalExtentText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthority',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthority',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalLocatorReferenceIdentification',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalLocatorReferenceIdentification',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalPendingIndicator',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalPendingIndicator',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalReasonReferenceCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReasonReferenceCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalReinstatementDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReinstatementDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalValue',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalValue',n3namespace:String=niem21_j_URI},		
		
		
	//	Tuple{n21:String='DrugCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='DrugCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryMetalText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneMaterialText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryStone',n21namespace:String=niem21_nc_URI,n3:String='JewelryStone',n3namespace:String=niem21_j_URI},		
	
//		Tuple{n21:String='DrivingRestrictionCode',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestriction',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestriction',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionValue',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionValue',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionEndDate',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionEndDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DrivingRestrictionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ProgramPurposeText',n21namespace:String=niem21_im_URI,n3:String='ProgramPurposeText',n3namespace:String=niem21_nc_URI},	
		
		
		Tuple{n21:String='JewelryStoneQuantity',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneQuantity',n3namespace:String=niem21_j_URI},	
	
		Tuple{n21:String='JewelryStoneCutText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneCutText',n3namespace:String=niem21_j_URI},	
	
		Tuple{n21:String='JewelryStoneColorText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneColorText',n3namespace:String=niem21_j_URI},		
		
		Tuple{n21:String='DriverLicenseIdentification',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseIdentification',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseIssueDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseIssueDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseNonCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialClassText',n3namespace:String=niem21_j_URI},		
	
		Tuple{n21:String='JewelryStoneCaratText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneCaratText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Intoxication',n21namespace:String=niem21_nc_URI,n3:String='Intoxication',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationAlcoholInvolvedIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationAlcoholInvolvedIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationDrugInvolvedIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationDrugInvolvedIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationIntoxicantCategory',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategory',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='IntoxicationIntoxicantCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='IntoxicationIntoxicantCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationIntoxicantIllegalIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantIllegalIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationLevelText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationLevelText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationOverLimitIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationOverLimitIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationRelatedActivity',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationRelatedActivity',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestDate',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTester',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTester',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='PersonBloodTypeCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBloodTypeCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='PersonBodyXRaysAvailableCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBodyXRaysAvailableCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='PersonClothing',n21namespace:String=niem21_nc_URI,n3:String='PersonClothing',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationOutsideJurisdictionIndicator',n21namespace:String=niem21_nc_URI,n3:String='RegistrationOutsideJurisdictionIndicator',n3namespace:String=niem21_j_URI},		
////////////////////////////////////////namespace change block end		




		Tuple{n21:String='TransmittedDate',n21namespace:String=niem21_scr_URI,n3:String='ManifestTransmittedDate',n3namespace:String=niem21_nc_URI}
};




// namespace changes
property namespace21to3:Sequence(Tuple(n21:String,n3:String)) = Sequence{
		Tuple{n21:String=niem21_ansi_nist_URI,n3:String=niem30_ansi_nist_URI},
		Tuple{n21:String=niem21_ansi_d20_URI,n3:String=niem30_ansi_d20_URI},
		Tuple{n21:String=niem21_apco_URI,n3:String=niem30_apco_URI},
		Tuple{n21:String=niem21_atf_URI,n3:String=niem30_atf_URI},
		Tuple{n21:String=niem21_can_URI,n3:String=niem30_can_URI},
		Tuple{n21:String=niem21_cap_URI,n3:String=niem30_cap_URI},
		Tuple{n21:String=niem21_cbrn_URI,n3:String=niem30_cbrn_URI},
		Tuple{n21:String=niem21_cbrncl_URI,n3:String=niem30_cbrncl_URI},
		Tuple{n21:String=niem21_census_URI,n3:String=niem30_census_URI},
		Tuple{n21:String=niem21_de_URI,n3:String=niem30_de_URI},
		Tuple{n21:String=niem21_dea_URI,n3:String=niem30_dea_URI},
		Tuple{n21:String=niem21_dod_jcs_pub2_0_URI,n3:String=niem30_dod_jcs_pub2_0_URI},
		Tuple{n21:String=niem21_edxl_URI,n3:String=niem30_edxl_URI},
		Tuple{n21:String=niem21_edxl_cap_URI,n3:String=niem30_edxl_cap_URI},
		Tuple{n21:String=niem21_edxl_de_URI,n3:String=niem30_edxl_de_URI},
		Tuple{n21:String=niem21_edxl_have_URI,n3:String=niem30_edxl_have_URI},
		Tuple{n21:String=niem21_em_URI,n3:String=niem30_em_URI},
		Tuple{n21:String=niem21_fbi_URI,n3:String=niem30_fbi_URI},
		Tuple{n21:String=niem21_fips_10_4_URI,n3:String=niem30_fips_10_4_URI},
		Tuple{n21:String=niem21_fips_5_2_URI,n3:String=niem30_fips_5_2_URI},
		Tuple{n21:String=niem21_fips_6_4_URI,n3:String=niem30_fips_6_4_URI},
		Tuple{n21:String=niem21_fs_URI,n3:String=niem30_fs_URI},
		Tuple{n21:String=niem21_gco_URI,n3:String=niem30_gco_URI},
		Tuple{n21:String=niem21_geo_URI,n3:String=niem30_geo_URI},
		Tuple{n21:String=niem21_gmd_URI,n3:String=niem30_gmd_URI},
		Tuple{n21:String=niem21_gml_URI,n3:String=niem30_gml_URI},
		Tuple{n21:String=niem21_gsr_URI,n3:String=niem30_gsr_URI},
		Tuple{n21:String=niem21_gss_URI,n3:String=niem30_gss_URI},
		Tuple{n21:String=niem21_gts_URI,n3:String=niem30_gts_URI},
		Tuple{n21:String=niem21_have_URI,n3:String=niem30_have_URI},
		Tuple{n21:String=niem21_have_codes_URI,n3:String=niem30_have_codes_URI},
		Tuple{n21:String=niem21_hazmat_URI,n3:String=niem30_hazmat_URI},
		Tuple{n21:String=niem21_im_URI,n3:String=niem30_im_URI},
		Tuple{n21:String=niem21_intel_URI,n3:String=niem30_intel_URI},
		Tuple{n21:String=niem21_ip_URI,n3:String=niem30_ip_URI},
		Tuple{n21:String=niem21_iso_3166_URI,n3:String=niem30_iso_3166_URI},
		Tuple{n21:String=niem21_iso_4217_URI,n3:String=niem30_iso_4217_URI},
		Tuple{n21:String=niem21_iso_639_3_URI,n3:String=niem30_iso_639_3_URI},
		Tuple{n21:String=niem21_it_URI,n3:String=niem30_it_URI},
		Tuple{n21:String=niem21_itis_URI,n3:String=niem30_itis_URI},
		Tuple{n21:String=niem21_j_URI,n3:String=niem30_j_URI},
		Tuple{n21:String=niem21_m_URI,n3:String=niem30_m_URI},
		Tuple{n21:String=niem21_mmucc_2_URI,n3:String=niem30_mmucc_2_URI},
		Tuple{n21:String=niem21_nc_URI,n3:String=niem30_nc_URI},
		Tuple{n21:String=niem21_nga_URI,n3:String=niem30_nga_URI},
		Tuple{n21:String=niem21_nlets_URI,n3:String=niem30_nlets_URI},
		Tuple{n21:String=niem21_sar_URI,n3:String=niem30_sar_URI},
		Tuple{n21:String=niem21_scr_URI,n3:String=niem30_scr_URI},
		Tuple{n21:String=niem21_ucr_URI,n3:String=niem30_ucr_URI},
		Tuple{n21:String=niem21_unece_URI,n3:String=niem30_unece_URI},
		Tuple{n21:String=niem21_usps_URI,n3:String=niem30_usps_URI},
		Tuple{n21:String=niem21_ut_offender_URI,n3:String=niem30_ut_offender_URI},
		Tuple{n21:String=niem21_xls_URI,n3:String=niem30_xls_URI}
};


