/*
* generated by Xtext
*/
grammar InternalXpath20;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.w3.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.w3.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.w3.services.Xpath20GrammarAccess;

}

@parser::members {
 
 	private Xpath20GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Xpath20GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXPath
entryRuleXPath 
:
{ before(grammarAccess.getXPathRule()); }
	 ruleXPath
{ after(grammarAccess.getXPathRule()); } 
	 EOF 
;

// Rule XPath
ruleXPath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXPathAccess().getExpressionsAssignment()); }
(rule__XPath__ExpressionsAssignment)
{ after(grammarAccess.getXPathAccess().getExpressionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral 
:
{ before(grammarAccess.getDecimalLiteralRule()); }
	 ruleDecimalLiteral
{ after(grammarAccess.getDecimalLiteralRule()); } 
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalLiteralAccess().getValueAssignment()); }
(rule__DecimalLiteral__ValueAssignment)
{ after(grammarAccess.getDecimalLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral 
:
{ before(grammarAccess.getDoubleLiteralRule()); }
	 ruleDoubleLiteral
{ after(grammarAccess.getDoubleLiteralRule()); } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueAssignment()); }
(rule__DoubleLiteral__ValueAssignment)
{ after(grammarAccess.getDoubleLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQName
entryRuleQName 
:
{ before(grammarAccess.getQNameRule()); }
	 ruleQName
{ after(grammarAccess.getQNameRule()); } 
	 EOF 
;

// Rule QName
ruleQName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQNameAccess().getAlternatives()); }
(rule__QName__Alternatives)
{ after(grammarAccess.getQNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixedName
entryRulePrefixedName 
:
{ before(grammarAccess.getPrefixedNameRule()); }
	 rulePrefixedName
{ after(grammarAccess.getPrefixedNameRule()); } 
	 EOF 
;

// Rule PrefixedName
rulePrefixedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixedNameAccess().getGroup()); }
(rule__PrefixedName__Group__0)
{ after(grammarAccess.getPrefixedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnprefixedName
entryRuleUnprefixedName 
:
{ before(grammarAccess.getUnprefixedNameRule()); }
	 ruleUnprefixedName
{ after(grammarAccess.getUnprefixedNameRule()); } 
	 EOF 
;

// Rule UnprefixedName
ruleUnprefixedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnprefixedNameAccess().getLocalPartAssignment()); }
(rule__UnprefixedName__LocalPartAssignment)
{ after(grammarAccess.getUnprefixedNameAccess().getLocalPartAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefix
entryRulePrefix 
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixAccess().getNCNAMETerminalRuleCall()); }
	RULE_NCNAME
{ after(grammarAccess.getPrefixAccess().getNCNAMETerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalPart
entryRuleLocalPart 
:
{ before(grammarAccess.getLocalPartRule()); }
	 ruleLocalPart
{ after(grammarAccess.getLocalPartRule()); } 
	 EOF 
;

// Rule LocalPart
ruleLocalPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalPartAccess().getNCNAMETerminalRuleCall()); }
	RULE_NCNAME
{ after(grammarAccess.getLocalPartAccess().getNCNAMETerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getGroup()); }
(rule__Expr__Group__0)
{ after(grammarAccess.getExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSingle
entryRuleExprSingle 
:
{ before(grammarAccess.getExprSingleRule()); }
	 ruleExprSingle
{ after(grammarAccess.getExprSingleRule()); } 
	 EOF 
;

// Rule ExprSingle
ruleExprSingle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprSingleAccess().getAlternatives()); }
(rule__ExprSingle__Alternatives)
{ after(grammarAccess.getExprSingleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForExpr
entryRuleForExpr 
:
{ before(grammarAccess.getForExprRule()); }
	 ruleForExpr
{ after(grammarAccess.getForExprRule()); } 
	 EOF 
;

// Rule ForExpr
ruleForExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForExprAccess().getGroup()); }
(rule__ForExpr__Group__0)
{ after(grammarAccess.getForExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleForClause
entryRuleSimpleForClause 
:
{ before(grammarAccess.getSimpleForClauseRule()); }
	 ruleSimpleForClause
{ after(grammarAccess.getSimpleForClauseRule()); } 
	 EOF 
;

// Rule SimpleForClause
ruleSimpleForClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleForClauseAccess().getGroup()); }
(rule__SimpleForClause__Group__0)
{ after(grammarAccess.getSimpleForClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarName
entryRuleVarName 
:
{ before(grammarAccess.getVarNameRule()); }
	 ruleVarName
{ after(grammarAccess.getVarNameRule()); } 
	 EOF 
;

// Rule VarName
ruleVarName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarNameAccess().getQNameParserRuleCall()); }
	ruleQName
{ after(grammarAccess.getVarNameAccess().getQNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedExpr
entryRuleQuantifiedExpr 
:
{ before(grammarAccess.getQuantifiedExprRule()); }
	 ruleQuantifiedExpr
{ after(grammarAccess.getQuantifiedExprRule()); } 
	 EOF 
;

// Rule QuantifiedExpr
ruleQuantifiedExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedExprAccess().getGroup()); }
(rule__QuantifiedExpr__Group__0)
{ after(grammarAccess.getQuantifiedExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpr
entryRuleIfExpr 
:
{ before(grammarAccess.getIfExprRule()); }
	 ruleIfExpr
{ after(grammarAccess.getIfExprRule()); } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExprAccess().getGroup()); }
(rule__IfExpr__Group__0)
{ after(grammarAccess.getIfExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpr
entryRuleOrExpr 
:
{ before(grammarAccess.getOrExprRule()); }
	 ruleOrExpr
{ after(grammarAccess.getOrExprRule()); } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExprAccess().getGroup()); }
(rule__OrExpr__Group__0)
{ after(grammarAccess.getOrExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpr
entryRuleAndExpr 
:
{ before(grammarAccess.getAndExprRule()); }
	 ruleAndExpr
{ after(grammarAccess.getAndExprRule()); } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExprAccess().getGroup()); }
(rule__AndExpr__Group__0)
{ after(grammarAccess.getAndExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpr
entryRuleComparisonExpr 
:
{ before(grammarAccess.getComparisonExprRule()); }
	 ruleComparisonExpr
{ after(grammarAccess.getComparisonExprRule()); } 
	 EOF 
;

// Rule ComparisonExpr
ruleComparisonExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExprAccess().getGroup()); }
(rule__ComparisonExpr__Group__0)
{ after(grammarAccess.getComparisonExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpr
entryRuleRangeExpr 
:
{ before(grammarAccess.getRangeExprRule()); }
	 ruleRangeExpr
{ after(grammarAccess.getRangeExprRule()); } 
	 EOF 
;

// Rule RangeExpr
ruleRangeExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeExprAccess().getGroup()); }
(rule__RangeExpr__Group__0)
{ after(grammarAccess.getRangeExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr 
:
{ before(grammarAccess.getAdditiveExprRule()); }
	 ruleAdditiveExpr
{ after(grammarAccess.getAdditiveExprRule()); } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExprAccess().getGroup()); }
(rule__AdditiveExpr__Group__0)
{ after(grammarAccess.getAdditiveExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr 
:
{ before(grammarAccess.getMultiplicativeExprRule()); }
	 ruleMultiplicativeExpr
{ after(grammarAccess.getMultiplicativeExprRule()); } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
(rule__MultiplicativeExpr__Group__0)
{ after(grammarAccess.getMultiplicativeExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionExpr
entryRuleUnionExpr 
:
{ before(grammarAccess.getUnionExprRule()); }
	 ruleUnionExpr
{ after(grammarAccess.getUnionExprRule()); } 
	 EOF 
;

// Rule UnionExpr
ruleUnionExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnionExprAccess().getGroup()); }
(rule__UnionExpr__Group__0)
{ after(grammarAccess.getUnionExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntersectExceptExpr
entryRuleIntersectExceptExpr 
:
{ before(grammarAccess.getIntersectExceptExprRule()); }
	 ruleIntersectExceptExpr
{ after(grammarAccess.getIntersectExceptExprRule()); } 
	 EOF 
;

// Rule IntersectExceptExpr
ruleIntersectExceptExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getGroup()); }
(rule__IntersectExceptExpr__Group__0)
{ after(grammarAccess.getIntersectExceptExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceofExpr
entryRuleInstanceofExpr 
:
{ before(grammarAccess.getInstanceofExprRule()); }
	 ruleInstanceofExpr
{ after(grammarAccess.getInstanceofExprRule()); } 
	 EOF 
;

// Rule InstanceofExpr
ruleInstanceofExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceofExprAccess().getGroup()); }
(rule__InstanceofExpr__Group__0)
{ after(grammarAccess.getInstanceofExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTreatExpr
entryRuleTreatExpr 
:
{ before(grammarAccess.getTreatExprRule()); }
	 ruleTreatExpr
{ after(grammarAccess.getTreatExprRule()); } 
	 EOF 
;

// Rule TreatExpr
ruleTreatExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTreatExprAccess().getGroup()); }
(rule__TreatExpr__Group__0)
{ after(grammarAccess.getTreatExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceType
entryRuleSequenceType 
:
{ before(grammarAccess.getSequenceTypeRule()); }
	 ruleSequenceType
{ after(grammarAccess.getSequenceTypeRule()); } 
	 EOF 
;

// Rule SequenceType
ruleSequenceType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceTypeAccess().getGroup()); }
(rule__SequenceType__Group__0)
{ after(grammarAccess.getSequenceTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItemType
entryRuleItemType 
:
{ before(grammarAccess.getItemTypeRule()); }
	 ruleItemType
{ after(grammarAccess.getItemTypeRule()); } 
	 EOF 
;

// Rule ItemType
ruleItemType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItemTypeAccess().getGroup()); }
(rule__ItemType__Group__0)
{ after(grammarAccess.getItemTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicType
entryRuleAtomicType 
:
{ before(grammarAccess.getAtomicTypeRule()); }
	 ruleAtomicType
{ after(grammarAccess.getAtomicTypeRule()); } 
	 EOF 
;

// Rule AtomicType
ruleAtomicType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicTypeAccess().getQNameParserRuleCall()); }
	ruleQName
{ after(grammarAccess.getAtomicTypeAccess().getQNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastableExpr
entryRuleCastableExpr 
:
{ before(grammarAccess.getCastableExprRule()); }
	 ruleCastableExpr
{ after(grammarAccess.getCastableExprRule()); } 
	 EOF 
;

// Rule CastableExpr
ruleCastableExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastableExprAccess().getGroup()); }
(rule__CastableExpr__Group__0)
{ after(grammarAccess.getCastableExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastExpr
entryRuleCastExpr 
:
{ before(grammarAccess.getCastExprRule()); }
	 ruleCastExpr
{ after(grammarAccess.getCastExprRule()); } 
	 EOF 
;

// Rule CastExpr
ruleCastExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastExprAccess().getGroup()); }
(rule__CastExpr__Group__0)
{ after(grammarAccess.getCastExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpr
entryRuleValueExpr 
:
{ before(grammarAccess.getValueExprRule()); }
	 ruleValueExpr
{ after(grammarAccess.getValueExprRule()); } 
	 EOF 
;

// Rule ValueExpr
ruleValueExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExprAccess().getPathAssignment()); }
(rule__ValueExpr__PathAssignment)
{ after(grammarAccess.getValueExprAccess().getPathAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleType
entryRuleSingleType 
:
{ before(grammarAccess.getSingleTypeRule()); }
	 ruleSingleType
{ after(grammarAccess.getSingleTypeRule()); } 
	 EOF 
;

// Rule SingleType
ruleSingleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleTypeAccess().getGroup()); }
(rule__SingleType__Group__0)
{ after(grammarAccess.getSingleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelativePathExpr
entryRuleRelativePathExpr 
:
{ before(grammarAccess.getRelativePathExprRule()); }
	 ruleRelativePathExpr
{ after(grammarAccess.getRelativePathExprRule()); } 
	 EOF 
;

// Rule RelativePathExpr
ruleRelativePathExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelativePathExprAccess().getGroup()); }
(rule__RelativePathExpr__Group__0)
{ after(grammarAccess.getRelativePathExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePredicate
entryRulePredicate 
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateAccess().getGroup()); }
(rule__Predicate__Group__0)
{ after(grammarAccess.getPredicateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReverseStep
entryRuleReverseStep 
:
{ before(grammarAccess.getReverseStepRule()); }
	 ruleReverseStep
{ after(grammarAccess.getReverseStepRule()); } 
	 EOF 
;

// Rule ReverseStep
ruleReverseStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReverseStepAccess().getAlternatives()); }
(rule__ReverseStep__Alternatives)
{ after(grammarAccess.getReverseStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReverseAxis
entryRuleReverseAxis 
:
{ before(grammarAccess.getReverseAxisRule()); }
	 ruleReverseAxis
{ after(grammarAccess.getReverseAxisRule()); } 
	 EOF 
;

// Rule ReverseAxis
ruleReverseAxis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReverseAxisAccess().getGroup()); }
(rule__ReverseAxis__Group__0)
{ after(grammarAccess.getReverseAxisAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbbrevReverseStep
entryRuleAbbrevReverseStep 
:
{ before(grammarAccess.getAbbrevReverseStepRule()); }
	 ruleAbbrevReverseStep
{ after(grammarAccess.getAbbrevReverseStepRule()); } 
	 EOF 
;

// Rule AbbrevReverseStep
ruleAbbrevReverseStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbbrevReverseStepAccess().getFullStopFullStopKeyword()); }

	'..' 

{ after(grammarAccess.getAbbrevReverseStepAccess().getFullStopFullStopKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeTest
entryRuleNodeTest 
:
{ before(grammarAccess.getNodeTestRule()); }
	 ruleNodeTest
{ after(grammarAccess.getNodeTestRule()); } 
	 EOF 
;

// Rule NodeTest
ruleNodeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTestAccess().getAlternatives()); }
(rule__NodeTest__Alternatives)
{ after(grammarAccess.getNodeTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameTest
entryRuleNameTest 
:
{ before(grammarAccess.getNameTestRule()); }
	 ruleNameTest
{ after(grammarAccess.getNameTestRule()); } 
	 EOF 
;

// Rule NameTest
ruleNameTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameTestAccess().getAlternatives()); }
(rule__NameTest__Alternatives)
{ after(grammarAccess.getNameTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForwardStep
entryRuleForwardStep 
:
{ before(grammarAccess.getForwardStepRule()); }
	 ruleForwardStep
{ after(grammarAccess.getForwardStepRule()); } 
	 EOF 
;

// Rule ForwardStep
ruleForwardStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForwardStepAccess().getAlternatives()); }
(rule__ForwardStep__Alternatives)
{ after(grammarAccess.getForwardStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForwardAxis
entryRuleForwardAxis 
:
{ before(grammarAccess.getForwardAxisRule()); }
	 ruleForwardAxis
{ after(grammarAccess.getForwardAxisRule()); } 
	 EOF 
;

// Rule ForwardAxis
ruleForwardAxis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForwardAxisAccess().getGroup()); }
(rule__ForwardAxis__Group__0)
{ after(grammarAccess.getForwardAxisAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbbrevForwardStep
entryRuleAbbrevForwardStep 
:
{ before(grammarAccess.getAbbrevForwardStepRule()); }
	 ruleAbbrevForwardStep
{ after(grammarAccess.getAbbrevForwardStepRule()); } 
	 EOF 
;

// Rule AbbrevForwardStep
ruleAbbrevForwardStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getGroup()); }
(rule__AbbrevForwardStep__Group__0)
{ after(grammarAccess.getAbbrevForwardStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral 
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
(rule__NumericLiteral__Alternatives)
{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarRef
entryRuleVarRef 
:
{ before(grammarAccess.getVarRefRule()); }
	 ruleVarRef
{ after(grammarAccess.getVarRefRule()); } 
	 EOF 
;

// Rule VarRef
ruleVarRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarRefAccess().getGroup()); }
(rule__VarRef__Group__0)
{ after(grammarAccess.getVarRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpr
entryRuleParenthesizedExpr 
:
{ before(grammarAccess.getParenthesizedExprRule()); }
	 ruleParenthesizedExpr
{ after(grammarAccess.getParenthesizedExprRule()); } 
	 EOF 
;

// Rule ParenthesizedExpr
ruleParenthesizedExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExprAccess().getGroup()); }
(rule__ParenthesizedExpr__Group__0)
{ after(grammarAccess.getParenthesizedExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextItemExpr
entryRuleContextItemExpr 
:
{ before(grammarAccess.getContextItemExprRule()); }
	 ruleContextItemExpr
{ after(grammarAccess.getContextItemExprRule()); } 
	 EOF 
;

// Rule ContextItemExpr
ruleContextItemExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContextItemExprAccess().getGroup()); }
(rule__ContextItemExpr__Group__0)
{ after(grammarAccess.getContextItemExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKindTest
entryRuleKindTest 
:
{ before(grammarAccess.getKindTestRule()); }
	 ruleKindTest
{ after(grammarAccess.getKindTestRule()); } 
	 EOF 
;

// Rule KindTest
ruleKindTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKindTestAccess().getAlternatives()); }
(rule__KindTest__Alternatives)
{ after(grammarAccess.getKindTestAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration 
:
{ before(grammarAccess.getElementDeclarationRule()); }
	 ruleElementDeclaration
{ after(grammarAccess.getElementDeclarationRule()); } 
	 EOF 
;

// Rule ElementDeclaration
ruleElementDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); }
	ruleElementName
{ after(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeName
entryRuleAttributeName 
:
{ before(grammarAccess.getAttributeNameRule()); }
	 ruleAttributeName
{ after(grammarAccess.getAttributeNameRule()); } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeNameAccess().getQNameParserRuleCall()); }
	ruleQName
{ after(grammarAccess.getAttributeNameAccess().getQNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementName
entryRuleElementName 
:
{ before(grammarAccess.getElementNameRule()); }
	 ruleElementName
{ after(grammarAccess.getElementNameRule()); } 
	 EOF 
;

// Rule ElementName
ruleElementName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementNameAccess().getQNameParserRuleCall()); }
	ruleQName
{ after(grammarAccess.getElementNameAccess().getQNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getQNameParserRuleCall()); }
	ruleQName
{ after(grammarAccess.getTypeNameAccess().getQNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnyKindTest
entryRuleAnyKindTest 
:
{ before(grammarAccess.getAnyKindTestRule()); }
	 ruleAnyKindTest
{ after(grammarAccess.getAnyKindTestRule()); } 
	 EOF 
;

// Rule AnyKindTest
ruleAnyKindTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyKindTestAccess().getGroup()); }
(rule__AnyKindTest__Group__0)
{ after(grammarAccess.getAnyKindTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDocumentTest
entryRuleDocumentTest 
:
{ before(grammarAccess.getDocumentTestRule()); }
	 ruleDocumentTest
{ after(grammarAccess.getDocumentTestRule()); } 
	 EOF 
;

// Rule DocumentTest
ruleDocumentTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDocumentTestAccess().getGroup()); }
(rule__DocumentTest__Group__0)
{ after(grammarAccess.getDocumentTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextTest
entryRuleTextTest 
:
{ before(grammarAccess.getTextTestRule()); }
	 ruleTextTest
{ after(grammarAccess.getTextTestRule()); } 
	 EOF 
;

// Rule TextTest
ruleTextTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextTestAccess().getGroup()); }
(rule__TextTest__Group__0)
{ after(grammarAccess.getTextTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommentTest
entryRuleCommentTest 
:
{ before(grammarAccess.getCommentTestRule()); }
	 ruleCommentTest
{ after(grammarAccess.getCommentTestRule()); } 
	 EOF 
;

// Rule CommentTest
ruleCommentTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentTestAccess().getGroup()); }
(rule__CommentTest__Group__0)
{ after(grammarAccess.getCommentTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePITest
entryRulePITest 
:
{ before(grammarAccess.getPITestRule()); }
	 rulePITest
{ after(grammarAccess.getPITestRule()); } 
	 EOF 
;

// Rule PITest
rulePITest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPITestAccess().getGroup()); }
(rule__PITest__Group__0)
{ after(grammarAccess.getPITestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemaAttributeTest
entryRuleSchemaAttributeTest 
:
{ before(grammarAccess.getSchemaAttributeTestRule()); }
	 ruleSchemaAttributeTest
{ after(grammarAccess.getSchemaAttributeTestRule()); } 
	 EOF 
;

// Rule SchemaAttributeTest
ruleSchemaAttributeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getGroup()); }
(rule__SchemaAttributeTest__Group__0)
{ after(grammarAccess.getSchemaAttributeTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration 
:
{ before(grammarAccess.getAttributeDeclarationRule()); }
	 ruleAttributeDeclaration
{ after(grammarAccess.getAttributeDeclarationRule()); } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttributeNameParserRuleCall()); }
	ruleAttributeName
{ after(grammarAccess.getAttributeDeclarationAccess().getAttributeNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemaElementTest
entryRuleSchemaElementTest 
:
{ before(grammarAccess.getSchemaElementTestRule()); }
	 ruleSchemaElementTest
{ after(grammarAccess.getSchemaElementTestRule()); } 
	 EOF 
;

// Rule SchemaElementTest
ruleSchemaElementTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaElementTestAccess().getGroup()); }
(rule__SchemaElementTest__Group__0)
{ after(grammarAccess.getSchemaElementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr 
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleUnaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExprAccess().getUnaryAssignment()); }
(rule__UnaryExpr__UnaryAssignment)
{ after(grammarAccess.getUnaryExprAccess().getUnaryAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWildcard
entryRuleWildcard 
:
{ before(grammarAccess.getWildcardRule()); }
	 ruleWildcard
{ after(grammarAccess.getWildcardRule()); } 
	 EOF 
;

// Rule Wildcard
ruleWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWildcardAccess().getAlternatives()); }
(rule__Wildcard__Alternatives)
{ after(grammarAccess.getWildcardAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementTest
entryRuleElementTest 
:
{ before(grammarAccess.getElementTestRule()); }
	 ruleElementTest
{ after(grammarAccess.getElementTestRule()); } 
	 EOF 
;

// Rule ElementTest
ruleElementTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementTestAccess().getGroup()); }
(rule__ElementTest__Group__0)
{ after(grammarAccess.getElementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeTest
entryRuleAttributeTest 
:
{ before(grammarAccess.getAttributeTestRule()); }
	 ruleAttributeTest
{ after(grammarAccess.getAttributeTestRule()); } 
	 EOF 
;

// Rule AttributeTest
ruleAttributeTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup()); }
(rule__AttributeTest__Group__0)
{ after(grammarAccess.getAttributeTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAxisStep
entryRuleAxisStep 
:
{ before(grammarAccess.getAxisStepRule()); }
	 ruleAxisStep
{ after(grammarAccess.getAxisStepRule()); } 
	 EOF 
;

// Rule AxisStep
ruleAxisStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAxisStepAccess().getGroup()); }
(rule__AxisStep__Group__0)
{ after(grammarAccess.getAxisStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepExpr
entryRuleStepExpr 
:
{ before(grammarAccess.getStepExprRule()); }
	 ruleStepExpr
{ after(grammarAccess.getStepExprRule()); } 
	 EOF 
;

// Rule StepExpr
ruleStepExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepExprAccess().getAxisStepParserRuleCall()); }
	ruleAxisStep
{ after(grammarAccess.getStepExprAccess().getAxisStepParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePathExpr
entryRulePathExpr 
:
{ before(grammarAccess.getPathExprRule()); }
	 rulePathExpr
{ after(grammarAccess.getPathExprRule()); } 
	 EOF 
;

// Rule PathExpr
rulePathExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathExprAccess().getAlternatives()); }
(rule__PathExpr__Alternatives)
{ after(grammarAccess.getPathExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribNameOrWildcard
entryRuleAttribNameOrWildcard 
:
{ before(grammarAccess.getAttribNameOrWildcardRule()); }
	 ruleAttribNameOrWildcard
{ after(grammarAccess.getAttribNameOrWildcardRule()); } 
	 EOF 
;

// Rule AttribNameOrWildcard
ruleAttribNameOrWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getGroup()); }
(rule__AttribNameOrWildcard__Group__0)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementNameOrWildcard
entryRuleElementNameOrWildcard 
:
{ before(grammarAccess.getElementNameOrWildcardRule()); }
	 ruleElementNameOrWildcard
{ after(grammarAccess.getElementNameOrWildcardRule()); } 
	 EOF 
;

// Rule ElementNameOrWildcard
ruleElementNameOrWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getGroup()); }
(rule__ElementNameOrWildcard__Group__0)
{ after(grammarAccess.getElementNameOrWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr 
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
(rule__PrimaryExpr__Alternatives)
{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule IntersectExcept
ruleIntersectExcept
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptAccess().getAlternatives()); }
(rule__IntersectExcept__Alternatives)
{ after(grammarAccess.getIntersectExceptAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Union
ruleUnion
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionAccess().getAlternatives()); }
(rule__Union__Alternatives)
{ after(grammarAccess.getUnionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Additive
ruleAdditive
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveAccess().getAlternatives()); }
(rule__Additive__Alternatives)
{ after(grammarAccess.getAdditiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule GeneralComp
ruleGeneralComp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralCompAccess().getAlternatives()); }
(rule__GeneralComp__Alternatives)
{ after(grammarAccess.getGeneralCompAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueComp
ruleValueComp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueCompAccess().getAlternatives()); }
(rule__ValueComp__Alternatives)
{ after(grammarAccess.getValueCompAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NodeComp
ruleNodeComp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeCompAccess().getAlternatives()); }
(rule__NodeComp__Alternatives)
{ after(grammarAccess.getNodeCompAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Separator
ruleSeparator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparatorAccess().getAlternatives()); }
(rule__Separator__Alternatives)
{ after(grammarAccess.getSeparatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ReverseAxisEnum
ruleReverseAxisEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseAxisEnumAccess().getAlternatives()); }
(rule__ReverseAxisEnum__Alternatives)
{ after(grammarAccess.getReverseAxisEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ForwardAxisEnum
ruleForwardAxisEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAxisEnumAccess().getAlternatives()); }
(rule__ForwardAxisEnum__Alternatives)
{ after(grammarAccess.getForwardAxisEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule OccurrenceIndicator
ruleOccurrenceIndicator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOccurrenceIndicatorAccess().getAlternatives()); }
(rule__OccurrenceIndicator__Alternatives)
{ after(grammarAccess.getOccurrenceIndicatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Multiplicative
ruleMultiplicative
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeAccess().getAlternatives()); }
(rule__Multiplicative__Alternatives)
{ after(grammarAccess.getMultiplicativeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__QName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQNameAccess().getPrefixedNameParserRuleCall_0()); }
	rulePrefixedName
{ after(grammarAccess.getQNameAccess().getPrefixedNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQNameAccess().getUnprefixedNameParserRuleCall_1()); }
	ruleUnprefixedName
{ after(grammarAccess.getQNameAccess().getUnprefixedNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSingle__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); }
	ruleForExpr
{ after(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); }
	ruleQuantifiedExpr
{ after(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); }
	ruleIfExpr
{ after(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); }
	ruleOrExpr
{ after(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__QuantifierAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getQuantifierSomeKeyword_0_0_0()); }

	'some' 

{ after(grammarAccess.getQuantifiedExprAccess().getQuantifierSomeKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExprAccess().getQuantifierEveryKeyword_0_0_1()); }

	'every' 

{ after(grammarAccess.getQuantifiedExprAccess().getQuantifierEveryKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getValueAssignment_1_0()); }
(rule__ComparisonExpr__ValueAssignment_1_0)
{ after(grammarAccess.getComparisonExprAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getComparisonExprAccess().getGeneralAssignment_1_1()); }
(rule__ComparisonExpr__GeneralAssignment_1_1)
{ after(grammarAccess.getComparisonExprAccess().getGeneralAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getComparisonExprAccess().getGroup_1_2()); }
(rule__ComparisonExpr__Group_1_2__0)
{ after(grammarAccess.getComparisonExprAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getGroup_1_0()); }
(rule__SequenceType__Group_1_0__0)
{ after(grammarAccess.getSequenceTypeAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getSequenceTypeAccess().getGroup_1_1()); }
(rule__SequenceType__Group_1_1__0)
{ after(grammarAccess.getSequenceTypeAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getKindTestAssignment_1_0()); }
(rule__ItemType__KindTestAssignment_1_0)
{ after(grammarAccess.getItemTypeAccess().getKindTestAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getItemTypeAccess().getGroup_1_1()); }
(rule__ItemType__Group_1_1__0)
{ after(grammarAccess.getItemTypeAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getItemTypeAccess().getAtomicTypeAssignment_1_2()); }
(rule__ItemType__AtomicTypeAssignment_1_2)
{ after(grammarAccess.getItemTypeAccess().getAtomicTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getGroup_0()); }
(rule__ReverseStep__Group_0__0)
{ after(grammarAccess.getReverseStepAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getReverseStepAccess().getAbbrevAssignment_1()); }
(rule__ReverseStep__AbbrevAssignment_1)
{ after(grammarAccess.getReverseStepAccess().getAbbrevAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTestAccess().getKindTestParserRuleCall_0()); }
	ruleKindTest
{ after(grammarAccess.getNodeTestAccess().getKindTestParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeTestAccess().getNameTestParserRuleCall_1()); }
	ruleNameTest
{ after(grammarAccess.getNodeTestAccess().getNameTestParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameTestAccess().getQNameParserRuleCall_0()); }
	ruleQName
{ after(grammarAccess.getNameTestAccess().getQNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNameTestAccess().getWildcardParserRuleCall_1()); }
	ruleWildcard
{ after(grammarAccess.getNameTestAccess().getWildcardParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getGroup_0()); }
(rule__ForwardStep__Group_0__0)
{ after(grammarAccess.getForwardStepAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getForwardStepAccess().getAbbrevAssignment_1()); }
(rule__ForwardStep__AbbrevAssignment_1)
{ after(grammarAccess.getForwardStepAccess().getAbbrevAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
	ruleNumericLiteral
{ after(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	ruleIntegerLiteral
{ after(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericLiteralAccess().getDecimalLiteralParserRuleCall_1()); }
	ruleDecimalLiteral
{ after(grammarAccess.getNumericLiteralAccess().getDecimalLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_2()); }
	ruleDoubleLiteral
{ after(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KindTest__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindTestAccess().getDocumentTestParserRuleCall_0()); }
	ruleDocumentTest
{ after(grammarAccess.getKindTestAccess().getDocumentTestParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getElementTestParserRuleCall_1()); }
	ruleElementTest
{ after(grammarAccess.getKindTestAccess().getElementTestParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getAttributeTestParserRuleCall_2()); }
	ruleAttributeTest
{ after(grammarAccess.getKindTestAccess().getAttributeTestParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getSchemaElementTestParserRuleCall_3()); }
	ruleSchemaElementTest
{ after(grammarAccess.getKindTestAccess().getSchemaElementTestParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getSchemaAttributeTestParserRuleCall_4()); }
	ruleSchemaAttributeTest
{ after(grammarAccess.getKindTestAccess().getSchemaAttributeTestParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getPITestParserRuleCall_5()); }
	rulePITest
{ after(grammarAccess.getKindTestAccess().getPITestParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getCommentTestParserRuleCall_6()); }
	ruleCommentTest
{ after(grammarAccess.getKindTestAccess().getCommentTestParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getTextTestParserRuleCall_7()); }
	ruleTextTest
{ after(grammarAccess.getKindTestAccess().getTextTestParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getKindTestAccess().getAnyKindTestParserRuleCall_8()); }
	ruleAnyKindTest
{ after(grammarAccess.getKindTestAccess().getAnyKindTestParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getElementTestAssignment_1_2_0()); }
(rule__DocumentTest__ElementTestAssignment_1_2_0)
{ after(grammarAccess.getDocumentTestAccess().getElementTestAssignment_1_2_0()); }
)

    |(
{ before(grammarAccess.getDocumentTestAccess().getSchemaElementTestAssignment_1_2_1()); }
(rule__DocumentTest__SchemaElementTestAssignment_1_2_1)
{ after(grammarAccess.getDocumentTestAccess().getSchemaElementTestAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getNameAssignment_1_2_0()); }
(rule__PITest__NameAssignment_1_2_0)
{ after(grammarAccess.getPITestAccess().getNameAssignment_1_2_0()); }
)

    |(
{ before(grammarAccess.getPITestAccess().getStringAssignment_1_2_1()); }
(rule__PITest__StringAssignment_1_2_1)
{ after(grammarAccess.getPITestAccess().getStringAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getGroup_0()); }
(rule__Wildcard__Group_0__0)
{ after(grammarAccess.getWildcardAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getWildcardAccess().getAnyAssignment_1()); }
(rule__Wildcard__AnyAssignment_1)
{ after(grammarAccess.getWildcardAccess().getAnyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getReverseStepAssignment_0_0()); }
(rule__AxisStep__ReverseStepAssignment_0_0)
{ after(grammarAccess.getAxisStepAccess().getReverseStepAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getAxisStepAccess().getForwardStepAssignment_0_1()); }
(rule__AxisStep__ForwardStepAssignment_0_1)
{ after(grammarAccess.getAxisStepAccess().getForwardStepAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getGroup_0()); }
(rule__PathExpr__Group_0__0)
{ after(grammarAccess.getPathExprAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPathExprAccess().getGroup_1()); }
(rule__PathExpr__Group_1__0)
{ after(grammarAccess.getPathExprAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPathExprAccess().getRelativePathAssignment_2()); }
(rule__PathExpr__RelativePathAssignment_2)
{ after(grammarAccess.getPathExprAccess().getRelativePathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getVarRefParserRuleCall_1()); }
	ruleVarRef
{ after(grammarAccess.getPrimaryExprAccess().getVarRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getParenthesizedExprParserRuleCall_2()); }
	ruleParenthesizedExpr
{ after(grammarAccess.getPrimaryExprAccess().getParenthesizedExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getContextItemExprParserRuleCall_3()); }
	ruleContextItemExpr
{ after(grammarAccess.getPrimaryExprAccess().getContextItemExprParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExprAccess().getFunctionCallParserRuleCall_4()); }
	ruleFunctionCall
{ after(grammarAccess.getPrimaryExprAccess().getFunctionCallParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExcept__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptAccess().getIntersectEnumLiteralDeclaration_0()); }
(	'intersect' 
)
{ after(grammarAccess.getIntersectExceptAccess().getIntersectEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getIntersectExceptAccess().getExceptEnumLiteralDeclaration_1()); }
(	'except' 
)
{ after(grammarAccess.getIntersectExceptAccess().getExceptEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Union__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionAccess().getUnionEnumLiteralDeclaration_0()); }
(	'union' 
)
{ after(grammarAccess.getUnionAccess().getUnionEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnionAccess().getOrEnumLiteralDeclaration_1()); }
(	'|' 
)
{ after(grammarAccess.getUnionAccess().getOrEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Additive__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralComp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneralCompAccess().getEqEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getGeneralCompAccess().getEqEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getGeneralCompAccess().getNeEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getGeneralCompAccess().getNeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getGeneralCompAccess().getLtEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getGeneralCompAccess().getLtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getGeneralCompAccess().getLeEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getGeneralCompAccess().getLeEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getGeneralCompAccess().getGtEnumLiteralDeclaration_4()); }
(	'>' 
)
{ after(grammarAccess.getGeneralCompAccess().getGtEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getGeneralCompAccess().getGeEnumLiteralDeclaration_5()); }
(	'>=' 
)
{ after(grammarAccess.getGeneralCompAccess().getGeEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueComp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueCompAccess().getEqEnumLiteralDeclaration_0()); }
(	'eq' 
)
{ after(grammarAccess.getValueCompAccess().getEqEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueCompAccess().getNeEnumLiteralDeclaration_1()); }
(	'ne' 
)
{ after(grammarAccess.getValueCompAccess().getNeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValueCompAccess().getLtEnumLiteralDeclaration_2()); }
(	'lt' 
)
{ after(grammarAccess.getValueCompAccess().getLtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getValueCompAccess().getLeEnumLiteralDeclaration_3()); }
(	'le' 
)
{ after(grammarAccess.getValueCompAccess().getLeEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getValueCompAccess().getGtEnumLiteralDeclaration_4()); }
(	'gt' 
)
{ after(grammarAccess.getValueCompAccess().getGtEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getValueCompAccess().getGeEnumLiteralDeclaration_5()); }
(	'ge' 
)
{ after(grammarAccess.getValueCompAccess().getGeEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeComp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeCompAccess().getIsEnumLiteralDeclaration_0()); }
(	'is' 
)
{ after(grammarAccess.getNodeCompAccess().getIsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNodeCompAccess().getLeftEnumLiteralDeclaration_1()); }
(	'<<' 
)
{ after(grammarAccess.getNodeCompAccess().getLeftEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNodeCompAccess().getRightEnumLiteralDeclaration_2()); }
(	'>>' 
)
{ after(grammarAccess.getNodeCompAccess().getRightEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Separator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparatorAccess().getDoubleEnumLiteralDeclaration_0()); }
(	'//' 
)
{ after(grammarAccess.getSeparatorAccess().getDoubleEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSeparatorAccess().getSingleEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getSeparatorAccess().getSingleEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseAxisEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseAxisEnumAccess().getParentEnumLiteralDeclaration_0()); }
(	'parent' 
)
{ after(grammarAccess.getReverseAxisEnumAccess().getParentEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getReverseAxisEnumAccess().getAncestorEnumLiteralDeclaration_1()); }
(	'ancestor' 
)
{ after(grammarAccess.getReverseAxisEnumAccess().getAncestorEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getReverseAxisEnumAccess().getPrecedingSiblingEnumLiteralDeclaration_2()); }
(	'preceding-sibling' 
)
{ after(grammarAccess.getReverseAxisEnumAccess().getPrecedingSiblingEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getReverseAxisEnumAccess().getPrecedingEnumLiteralDeclaration_3()); }
(	'preceding' 
)
{ after(grammarAccess.getReverseAxisEnumAccess().getPrecedingEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getReverseAxisEnumAccess().getAncestorOrSelfEnumLiteralDeclaration_4()); }
(	'ancestor-or-self' 
)
{ after(grammarAccess.getReverseAxisEnumAccess().getAncestorOrSelfEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAxisEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAxisEnumAccess().getChildEnumLiteralDeclaration_0()); }
(	'child' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getChildEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getDescendantEnumLiteralDeclaration_1()); }
(	'descendant' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getDescendantEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getAttributexEnumLiteralDeclaration_2()); }
(	'attributex' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getAttributexEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getSelfEnumLiteralDeclaration_3()); }
(	'self' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getSelfEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getDescendantOrSelfEnumLiteralDeclaration_4()); }
(	'descendant-or-self' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getDescendantOrSelfEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getFollowingSiblingEnumLiteralDeclaration_5()); }
(	'following-sibling' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getFollowingSiblingEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getFollowingEnumLiteralDeclaration_6()); }
(	'following' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getFollowingEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getForwardAxisEnumAccess().getNamespaceEnumLiteralDeclaration_7()); }
(	'namespace' 
)
{ after(grammarAccess.getForwardAxisEnumAccess().getNamespaceEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OccurrenceIndicator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOccurrenceIndicatorAccess().getOptionalEnumLiteralDeclaration_0()); }
(	'?' 
)
{ after(grammarAccess.getOccurrenceIndicatorAccess().getOptionalEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOccurrenceIndicatorAccess().getOneOrMoreEnumLiteralDeclaration_1()); }
(	'+' 
)
{ after(grammarAccess.getOccurrenceIndicatorAccess().getOneOrMoreEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicative__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeAccess().getDivEnumLiteralDeclaration_0()); }
(	'div' 
)
{ after(grammarAccess.getMultiplicativeAccess().getDivEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeAccess().getIdivEnumLiteralDeclaration_1()); }
(	'idiv' 
)
{ after(grammarAccess.getMultiplicativeAccess().getIdivEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeAccess().getModEnumLiteralDeclaration_2()); }
(	'mod' 
)
{ after(grammarAccess.getMultiplicativeAccess().getModEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PrefixedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__0__Impl
	rule__PrefixedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getPrefixAssignment_0()); }
(rule__PrefixedName__PrefixAssignment_0)
{ after(grammarAccess.getPrefixedNameAccess().getPrefixAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__1__Impl
	rule__PrefixedName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getPrefixedNameAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixedName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixedName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getLocalPartAssignment_2()); }
(rule__PrefixedName__LocalPartAssignment_2)
{ after(grammarAccess.getPrefixedNameAccess().getLocalPartAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__0__Impl
	rule__Expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpressionAssignment_0()); }
(rule__Expr__ExpressionAssignment_0)
{ after(grammarAccess.getExprAccess().getExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getGroup_1()); }
(rule__Expr__Group_1__0)*
{ after(grammarAccess.getExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__0__Impl
	rule__Expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExprAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpressionAssignment_1_1()); }
(rule__Expr__ExpressionAssignment_1_1)
{ after(grammarAccess.getExprAccess().getExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__0__Impl
	rule__ForExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getForAssignment_0()); }
(rule__ForExpr__ForAssignment_0)
{ after(grammarAccess.getForExprAccess().getForAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__1__Impl
	rule__ForExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getForExprAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnAssignment_2()); }
(rule__ForExpr__ReturnAssignment_2)
{ after(grammarAccess.getForExprAccess().getReturnAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleForClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__0__Impl
	rule__SimpleForClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getSimpleForClauseAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__1__Impl
	rule__SimpleForClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__2__Impl
	rule__SimpleForClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_2()); }
(rule__SimpleForClause__VariableAssignment_2)
{ after(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__3__Impl
	rule__SimpleForClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getSimpleForClauseAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__4__Impl
	rule__SimpleForClause__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_4()); }
(rule__SimpleForClause__ExpressionAssignment_4)
{ after(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getGroup_5()); }
(rule__SimpleForClause__Group_5__0)*
{ after(grammarAccess.getSimpleForClauseAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SimpleForClause__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group_5__0__Impl
	rule__SimpleForClause__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getSimpleForClauseAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group_5__1__Impl
	rule__SimpleForClause__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_5_1()); }

	'$' 

{ after(grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group_5__2__Impl
	rule__SimpleForClause__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_5_2()); }
(rule__SimpleForClause__VariableAssignment_5_2)
{ after(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group_5__3__Impl
	rule__SimpleForClause__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getInKeyword_5_3()); }

	'in' 

{ after(grammarAccess.getSimpleForClauseAccess().getInKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleForClause__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleForClause__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_5_4()); }
(rule__SimpleForClause__ExpressionAssignment_5_4)
{ after(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QuantifiedExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__0__Impl
	rule__QuantifiedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getQuantifierAssignment_0()); }
(rule__QuantifiedExpr__QuantifierAssignment_0)
{ after(grammarAccess.getQuantifiedExprAccess().getQuantifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__1__Impl
	rule__QuantifiedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1()); }

	'$' 

{ after(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__2__Impl
	rule__QuantifiedExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_2()); }
(rule__QuantifiedExpr__VariableAssignment_2)
{ after(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__3__Impl
	rule__QuantifiedExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getQuantifiedExprAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__4__Impl
	rule__QuantifiedExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_4()); }
(rule__QuantifiedExpr__ExpressionAssignment_4)
{ after(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__5__Impl
	rule__QuantifiedExpr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getGroup_5()); }
(rule__QuantifiedExpr__Group_5__0)*
{ after(grammarAccess.getQuantifiedExprAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__6__Impl
	rule__QuantifiedExpr__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6()); }

	'satisfies' 

{ after(grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfiesAssignment_7()); }
(rule__QuantifiedExpr__SatisfiesAssignment_7)
{ after(grammarAccess.getQuantifiedExprAccess().getSatisfiesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__QuantifiedExpr__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group_5__0__Impl
	rule__QuantifiedExpr__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getQuantifiedExprAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group_5__1__Impl
	rule__QuantifiedExpr__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_5_1()); }

	'$' 

{ after(grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group_5__2__Impl
	rule__QuantifiedExpr__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_5_2()); }
(rule__QuantifiedExpr__VariableAssignment_5_2)
{ after(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group_5__3__Impl
	rule__QuantifiedExpr__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getInKeyword_5_3()); }

	'in' 

{ after(grammarAccess.getQuantifiedExprAccess().getInKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpr__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedExpr__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_5_4()); }
(rule__QuantifiedExpr__ExpressionAssignment_5_4)
{ after(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__0__Impl
	rule__IfExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExprAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__1__Impl
	rule__IfExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__2__Impl
	rule__IfExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfAssignment_2()); }
(rule__IfExpr__IfAssignment_2)
{ after(grammarAccess.getIfExprAccess().getIfAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__3__Impl
	rule__IfExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__4__Impl
	rule__IfExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfExprAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__5__Impl
	rule__IfExpr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenAssignment_5()); }
(rule__IfExpr__ThenAssignment_5)
{ after(grammarAccess.getIfExprAccess().getThenAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__6__Impl
	rule__IfExpr__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseKeyword_6()); }

	'else' 

{ after(grammarAccess.getIfExprAccess().getElseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseAssignment_7()); }
(rule__IfExpr__ElseAssignment_7)
{ after(grammarAccess.getIfExprAccess().getElseAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__OrExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__0__Impl
	rule__OrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrAssignment_0()); }
(rule__OrExpr__OrAssignment_0)
{ after(grammarAccess.getOrExprAccess().getOrAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getGroup_1()); }
(rule__OrExpr__Group_1__0)*
{ after(grammarAccess.getOrExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__0__Impl
	rule__OrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrKeyword_1_0()); }

	'or' 

{ after(grammarAccess.getOrExprAccess().getOrKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrAssignment_1_1()); }
(rule__OrExpr__OrAssignment_1_1)
{ after(grammarAccess.getOrExprAccess().getOrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__0__Impl
	rule__AndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndAssignment_0()); }
(rule__AndExpr__AndAssignment_0)
{ after(grammarAccess.getAndExprAccess().getAndAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getGroup_1()); }
(rule__AndExpr__Group_1__0)*
{ after(grammarAccess.getAndExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__0__Impl
	rule__AndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndKeyword_1_0()); }

	'and' 

{ after(grammarAccess.getAndExprAccess().getAndKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndAssignment_1_1()); }
(rule__AndExpr__AndAssignment_1_1)
{ after(grammarAccess.getAndExprAccess().getAndAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group__0__Impl
	rule__ComparisonExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getOperand1Assignment_0()); }
(rule__ComparisonExpr__Operand1Assignment_0)
{ after(grammarAccess.getComparisonExprAccess().getOperand1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getAlternatives_1()); }
(rule__ComparisonExpr__Alternatives_1)?
{ after(grammarAccess.getComparisonExprAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpr__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group_1_2__0__Impl
	rule__ComparisonExpr__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getNodeAssignment_1_2_0()); }
(rule__ComparisonExpr__NodeAssignment_1_2_0)
{ after(grammarAccess.getComparisonExprAccess().getNodeAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpr__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpr__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getRangeAssignment_1_2_1()); }
(rule__ComparisonExpr__RangeAssignment_1_2_1)
{ after(grammarAccess.getComparisonExprAccess().getRangeAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group__0__Impl
	rule__RangeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getRangeAssignment_0()); }
(rule__RangeExpr__RangeAssignment_0)
{ after(grammarAccess.getRangeExprAccess().getRangeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getGroup_1()); }
(rule__RangeExpr__Group_1__0)?
{ after(grammarAccess.getRangeExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group_1__0__Impl
	rule__RangeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToKeyword_1_0()); }

	'to' 

{ after(grammarAccess.getRangeExprAccess().getToKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToAssignment_1_1()); }
(rule__RangeExpr__ToAssignment_1_1)
{ after(grammarAccess.getRangeExprAccess().getToAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group__0__Impl
	rule__AdditiveExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getAddAssignment_0()); }
(rule__AdditiveExpr__AddAssignment_0)
{ after(grammarAccess.getAdditiveExprAccess().getAddAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
(rule__AdditiveExpr__Group_1__0)*
{ after(grammarAccess.getAdditiveExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group_1__0__Impl
	rule__AdditiveExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getOperatorAssignment_1_0()); }
(rule__AdditiveExpr__OperatorAssignment_1_0)
{ after(grammarAccess.getAdditiveExprAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getAddAssignment_1_1()); }
(rule__AdditiveExpr__AddAssignment_1_1)
{ after(grammarAccess.getAdditiveExprAccess().getAddAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group__0__Impl
	rule__MultiplicativeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_0()); }
(rule__MultiplicativeExpr__MultiplyAssignment_0)
{ after(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
(rule__MultiplicativeExpr__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group_1__0__Impl
	rule__MultiplicativeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getOperatorAssignment_1_0()); }
(rule__MultiplicativeExpr__OperatorAssignment_1_0)
{ after(grammarAccess.getMultiplicativeExprAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_1_1()); }
(rule__MultiplicativeExpr__MultiplyAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group__0__Impl
	rule__UnionExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getUnionAssignment_0()); }
(rule__UnionExpr__UnionAssignment_0)
{ after(grammarAccess.getUnionExprAccess().getUnionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getGroup_1()); }
(rule__UnionExpr__Group_1__0)*
{ after(grammarAccess.getUnionExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group_1__0__Impl
	rule__UnionExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getOperatorAssignment_1_0()); }
(rule__UnionExpr__OperatorAssignment_1_0)
{ after(grammarAccess.getUnionExprAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getUnionAssignment_1_1()); }
(rule__UnionExpr__UnionAssignment_1_1)
{ after(grammarAccess.getUnionExprAccess().getUnionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntersectExceptExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group__0__Impl
	rule__IntersectExceptExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_0()); }
(rule__IntersectExceptExpr__IntersectAssignment_0)
{ after(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntersectExceptExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getGroup_1()); }
(rule__IntersectExceptExpr__Group_1__0)*
{ after(grammarAccess.getIntersectExceptExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntersectExceptExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group_1__0__Impl
	rule__IntersectExceptExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getOperatorAssignment_1_0()); }
(rule__IntersectExceptExpr__OperatorAssignment_1_0)
{ after(grammarAccess.getIntersectExceptExprAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntersectExceptExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntersectExceptExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_1_1()); }
(rule__IntersectExceptExpr__IntersectAssignment_1_1)
{ after(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group__0__Impl
	rule__InstanceofExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getTreatAssignment_0()); }
(rule__InstanceofExpr__TreatAssignment_0)
{ after(grammarAccess.getInstanceofExprAccess().getTreatAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getGroup_1()); }
(rule__InstanceofExpr__Group_1__0)?
{ after(grammarAccess.getInstanceofExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__0__Impl
	rule__InstanceofExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0()); }

	'instance' 

{ after(grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__1__Impl
	rule__InstanceofExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1()); }

	'of' 

{ after(grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getInstanceOfAssignment_1_2()); }
(rule__InstanceofExpr__InstanceOfAssignment_1_2)
{ after(grammarAccess.getInstanceofExprAccess().getInstanceOfAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TreatExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group__0__Impl
	rule__TreatExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getCastableAssignment_0()); }
(rule__TreatExpr__CastableAssignment_0)
{ after(grammarAccess.getTreatExprAccess().getCastableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getGroup_1()); }
(rule__TreatExpr__Group_1__0)?
{ after(grammarAccess.getTreatExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TreatExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__0__Impl
	rule__TreatExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getTreatKeyword_1_0()); }

	'treat' 

{ after(grammarAccess.getTreatExprAccess().getTreatKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__1__Impl
	rule__TreatExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getTreatExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TreatExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TreatExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getTreatAsAssignment_1_2()); }
(rule__TreatExpr__TreatAsAssignment_1_2)
{ after(grammarAccess.getTreatExprAccess().getTreatAsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SequenceType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group__0__Impl
	rule__SequenceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getSequenceTypeAction_0()); }
(

)
{ after(grammarAccess.getSequenceTypeAccess().getSequenceTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getAlternatives_1()); }
(rule__SequenceType__Alternatives_1)
{ after(grammarAccess.getSequenceTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceType__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1_0__0__Impl
	rule__SequenceType__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getEmptySequenceKeyword_1_0_0()); }

	'empty-sequence' 

{ after(grammarAccess.getSequenceTypeAccess().getEmptySequenceKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceType__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1_0__1__Impl
	rule__SequenceType__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getLeftParenthesisKeyword_1_0_1()); }

	'(' 

{ after(grammarAccess.getSequenceTypeAccess().getLeftParenthesisKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceType__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getRightParenthesisKeyword_1_0_2()); }

	')' 

{ after(grammarAccess.getSequenceTypeAccess().getRightParenthesisKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SequenceType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1_1__0__Impl
	rule__SequenceType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getTypeAssignment_1_1_0()); }
(rule__SequenceType__TypeAssignment_1_1_0)
{ after(grammarAccess.getSequenceTypeAccess().getTypeAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceType__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getOccurrenceAssignment_1_1_1()); }
(rule__SequenceType__OccurrenceAssignment_1_1_1)?
{ after(grammarAccess.getSequenceTypeAccess().getOccurrenceAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ItemType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItemType__Group__0__Impl
	rule__ItemType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getItemTypeAction_0()); }
(

)
{ after(grammarAccess.getItemTypeAccess().getItemTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ItemType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItemType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getAlternatives_1()); }
(rule__ItemType__Alternatives_1)
{ after(grammarAccess.getItemTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ItemType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItemType__Group_1_1__0__Impl
	rule__ItemType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getItemKeyword_1_1_0()); }

	'item' 

{ after(grammarAccess.getItemTypeAccess().getItemKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ItemType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItemType__Group_1_1__1__Impl
	rule__ItemType__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getLeftParenthesisKeyword_1_1_1()); }

	'(' 

{ after(grammarAccess.getItemTypeAccess().getLeftParenthesisKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ItemType__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ItemType__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getRightParenthesisKeyword_1_1_2()); }

	')' 

{ after(grammarAccess.getItemTypeAccess().getRightParenthesisKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastableExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group__0__Impl
	rule__CastableExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastAssignment_0()); }
(rule__CastableExpr__CastAssignment_0)
{ after(grammarAccess.getCastableExprAccess().getCastAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getGroup_1()); }
(rule__CastableExpr__Group_1__0)?
{ after(grammarAccess.getCastableExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastableExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__0__Impl
	rule__CastableExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastableKeyword_1_0()); }

	'castable' 

{ after(grammarAccess.getCastableExprAccess().getCastableKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__1__Impl
	rule__CastableExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getCastableExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastableExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastableExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastableAsAssignment_1_2()); }
(rule__CastableExpr__CastableAsAssignment_1_2)
{ after(grammarAccess.getCastableExprAccess().getCastableAsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group__0__Impl
	rule__CastExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastAssignment_0()); }
(rule__CastExpr__CastAssignment_0)
{ after(grammarAccess.getCastExprAccess().getCastAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getGroup_1()); }
(rule__CastExpr__Group_1__0)?
{ after(grammarAccess.getCastExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__0__Impl
	rule__CastExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastKeyword_1_0()); }

	'cast' 

{ after(grammarAccess.getCastExprAccess().getCastKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__1__Impl
	rule__CastExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getAsKeyword_1_1()); }

	'as' 

{ after(grammarAccess.getCastExprAccess().getAsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastAsAssignment_1_2()); }
(rule__CastExpr__CastAsAssignment_1_2)
{ after(grammarAccess.getCastExprAccess().getCastAsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SingleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleType__Group__0__Impl
	rule__SingleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getTypeAssignment_0()); }
(rule__SingleType__TypeAssignment_0)
{ after(grammarAccess.getSingleTypeAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getQuestionAssignment_1()); }
(rule__SingleType__QuestionAssignment_1)?
{ after(grammarAccess.getSingleTypeAccess().getQuestionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelativePathExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group__0__Impl
	rule__RelativePathExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepAssignment_0()); }
(rule__RelativePathExpr__StepAssignment_0)
{ after(grammarAccess.getRelativePathExprAccess().getStepAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativePathExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getGroup_1()); }
(rule__RelativePathExpr__Group_1__0)*
{ after(grammarAccess.getRelativePathExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelativePathExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group_1__0__Impl
	rule__RelativePathExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getSeparatorAssignment_1_0()); }
(rule__RelativePathExpr__SeparatorAssignment_1_0)
{ after(grammarAccess.getRelativePathExprAccess().getSeparatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelativePathExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelativePathExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepAssignment_1_1()); }
(rule__RelativePathExpr__StepAssignment_1_1)
{ after(grammarAccess.getRelativePathExprAccess().getStepAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Predicate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getPredicateAssignment_1()); }
(rule__Predicate__PredicateAssignment_1)
{ after(grammarAccess.getPredicateAccess().getPredicateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Predicate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReverseStep__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseStep__Group_0__0__Impl
	rule__ReverseStep__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getAxisAssignment_0_0()); }
(rule__ReverseStep__AxisAssignment_0_0)
{ after(grammarAccess.getReverseStepAccess().getAxisAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReverseStep__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseStep__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getTestAssignment_0_1()); }
(rule__ReverseStep__TestAssignment_0_1)
{ after(grammarAccess.getReverseStepAccess().getTestAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReverseAxis__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseAxis__Group__0__Impl
	rule__ReverseAxis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseAxis__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseAxisAccess().getAxisAssignment_0()); }
(rule__ReverseAxis__AxisAssignment_0)
{ after(grammarAccess.getReverseAxisAccess().getAxisAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReverseAxis__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReverseAxis__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseAxis__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseAxisAccess().getColonColonKeyword_1()); }

	'::' 

{ after(grammarAccess.getReverseAxisAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForwardStep__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardStep__Group_0__0__Impl
	rule__ForwardStep__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getAxisAssignment_0_0()); }
(rule__ForwardStep__AxisAssignment_0_0)
{ after(grammarAccess.getForwardStepAccess().getAxisAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardStep__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardStep__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getTestAssignment_0_1()); }
(rule__ForwardStep__TestAssignment_0_1)
{ after(grammarAccess.getForwardStepAccess().getTestAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForwardAxis__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardAxis__Group__0__Impl
	rule__ForwardAxis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAxis__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAxisAccess().getAxisAssignment_0()); }
(rule__ForwardAxis__AxisAssignment_0)
{ after(grammarAccess.getForwardAxisAccess().getAxisAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardAxis__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForwardAxis__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAxis__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAxisAccess().getColonColonKeyword_1()); }

	'::' 

{ after(grammarAccess.getForwardAxisAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AbbrevForwardStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbbrevForwardStep__Group__0__Impl
	rule__AbbrevForwardStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAtAssignment_0()); }
(rule__AbbrevForwardStep__AtAssignment_0)?
{ after(grammarAccess.getAbbrevForwardStepAccess().getAtAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AbbrevForwardStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AbbrevForwardStep__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getTestAssignment_1()); }
(rule__AbbrevForwardStep__TestAssignment_1)
{ after(grammarAccess.getAbbrevForwardStepAccess().getTestAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarRef__Group__0__Impl
	rule__VarRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarRefAccess().getDollarSignKeyword_0()); }

	'$' 

{ after(grammarAccess.getVarRefAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarRefAccess().getVarAssignment_1()); }
(rule__VarRef__VarAssignment_1)
{ after(grammarAccess.getVarRefAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__0__Impl
	rule__ParenthesizedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0()); }
(

)
{ after(grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__1__Impl
	rule__ParenthesizedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__2__Impl
	rule__ParenthesizedExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getExpressionAssignment_2()); }
(rule__ParenthesizedExpr__ExpressionAssignment_2)?
{ after(grammarAccess.getParenthesizedExprAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContextItemExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextItemExpr__Group__0__Impl
	rule__ContextItemExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextItemExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextItemExprAccess().getContextItemExprAction_0()); }
(

)
{ after(grammarAccess.getContextItemExprAccess().getContextItemExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextItemExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextItemExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextItemExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextItemExprAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getContextItemExprAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
(rule__FunctionCall__FunctionAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2()); }
(rule__FunctionCall__Group_2__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__0__Impl
	rule__FunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_0()); }
(rule__FunctionCall__ParameterAssignment_2_0)
{ after(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
(rule__FunctionCall__Group_2_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__0__Impl
	rule__FunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_1_1()); }
(rule__FunctionCall__ParameterAssignment_2_1_1)
{ after(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnyKindTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyKindTest__Group__0__Impl
	rule__AnyKindTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyKindTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyKindTestAccess().getAnyKindTestAction_0()); }
(

)
{ after(grammarAccess.getAnyKindTestAccess().getAnyKindTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyKindTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyKindTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyKindTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyKindTestAccess().getGroup_1()); }
(rule__AnyKindTest__Group_1__0)
{ after(grammarAccess.getAnyKindTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AnyKindTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyKindTest__Group_1__0__Impl
	rule__AnyKindTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyKindTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyKindTestAccess().getNodeKeyword_1_0()); }

	'node' 

{ after(grammarAccess.getAnyKindTestAccess().getNodeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyKindTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyKindTest__Group_1__1__Impl
	rule__AnyKindTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyKindTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyKindTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getAnyKindTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyKindTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnyKindTest__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyKindTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyKindTestAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getAnyKindTestAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DocumentTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__0__Impl
	rule__DocumentTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getDocumentTestAction_0()); }
(

)
{ after(grammarAccess.getDocumentTestAccess().getDocumentTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getGroup_1()); }
(rule__DocumentTest__Group_1__0)
{ after(grammarAccess.getDocumentTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DocumentTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group_1__0__Impl
	rule__DocumentTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1_0()); }

	'document-node' 

{ after(grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group_1__1__Impl
	rule__DocumentTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group_1__2__Impl
	rule__DocumentTest__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getAlternatives_1_2()); }
(rule__DocumentTest__Alternatives_1_2)?
{ after(grammarAccess.getDocumentTestAccess().getAlternatives_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DocumentTest__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DocumentTest__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TextTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextTest__Group__0__Impl
	rule__TextTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextTestAccess().getTextTestAction_0()); }
(

)
{ after(grammarAccess.getTextTestAccess().getTextTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextTestAccess().getGroup_1()); }
(rule__TextTest__Group_1__0)
{ after(grammarAccess.getTextTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextTest__Group_1__0__Impl
	rule__TextTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextTestAccess().getTextKeyword_1_0()); }

	'text' 

{ after(grammarAccess.getTextTestAccess().getTextKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextTest__Group_1__1__Impl
	rule__TextTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getTextTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextTest__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextTestAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTextTestAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CommentTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommentTest__Group__0__Impl
	rule__CommentTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTestAccess().getCommentTestAction_0()); }
(

)
{ after(grammarAccess.getCommentTestAccess().getCommentTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommentTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommentTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTestAccess().getGroup_1()); }
(rule__CommentTest__Group_1__0)
{ after(grammarAccess.getCommentTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CommentTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommentTest__Group_1__0__Impl
	rule__CommentTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTestAccess().getCommentKeyword_1_0()); }

	'comment' 

{ after(grammarAccess.getCommentTestAccess().getCommentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommentTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommentTest__Group_1__1__Impl
	rule__CommentTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getCommentTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommentTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommentTest__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommentTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentTestAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getCommentTestAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PITest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__0__Impl
	rule__PITest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getPITestAction_0()); }
(

)
{ after(grammarAccess.getPITestAccess().getPITestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getGroup_1()); }
(rule__PITest__Group_1__0)
{ after(grammarAccess.getPITestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PITest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group_1__0__Impl
	rule__PITest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1_0()); }

	'processing-instruction' 

{ after(grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group_1__1__Impl
	rule__PITest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getPITestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group_1__2__Impl
	rule__PITest__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getAlternatives_1_2()); }
(rule__PITest__Alternatives_1_2)?
{ after(grammarAccess.getPITestAccess().getAlternatives_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PITest__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PITest__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getPITestAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SchemaAttributeTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__0__Impl
	rule__SchemaAttributeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0()); }

	'schema-attribute' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__1__Impl
	rule__SchemaAttributeTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__2__Impl
	rule__SchemaAttributeTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAssignment_2()); }
(rule__SchemaAttributeTest__AttributeDeclarationAssignment_2)
{ after(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaAttributeTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaAttributeTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SchemaElementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__0__Impl
	rule__SchemaElementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0()); }

	'schema-element' 

{ after(grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__1__Impl
	rule__SchemaElementTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__2__Impl
	rule__SchemaElementTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getElementDeclarationAssignment_2()); }
(rule__SchemaElementTest__ElementDeclarationAssignment_2)
{ after(grammarAccess.getSchemaElementTestAccess().getElementDeclarationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaElementTest__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SchemaElementTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Wildcard__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_0__0__Impl
	rule__Wildcard__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getPrefixAssignment_0_0()); }
(rule__Wildcard__PrefixAssignment_0_0)
{ after(grammarAccess.getWildcardAccess().getPrefixAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_0__1__Impl
	rule__Wildcard__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getWildcardAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Wildcard__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Wildcard__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAsteriskKeyword_0_2()); }

	'*' 

{ after(grammarAccess.getWildcardAccess().getAsteriskKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ElementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__0__Impl
	rule__ElementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementTestAction_0()); }
(

)
{ after(grammarAccess.getElementTestAccess().getElementTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getGroup_1()); }
(rule__ElementTest__Group_1__0)
{ after(grammarAccess.getElementTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1__0__Impl
	rule__ElementTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementxKeyword_1_0()); }

	'elementx' 

{ after(grammarAccess.getElementTestAccess().getElementxKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1__1__Impl
	rule__ElementTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1__2__Impl
	rule__ElementTest__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getGroup_1_2()); }
(rule__ElementTest__Group_1_2__0)?
{ after(grammarAccess.getElementTestAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getElementTestAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElementTest__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1_2__0__Impl
	rule__ElementTest__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementNameOrWildcardAssignment_1_2_0()); }
(rule__ElementTest__ElementNameOrWildcardAssignment_1_2_0)
{ after(grammarAccess.getElementTestAccess().getElementNameOrWildcardAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getGroup_1_2_1()); }
(rule__ElementTest__Group_1_2_1__0)?
{ after(grammarAccess.getElementTestAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementTest__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1_2_1__0__Impl
	rule__ElementTest__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getCommaKeyword_1_2_1_0()); }

	',' 

{ after(grammarAccess.getElementTestAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1_2_1__1__Impl
	rule__ElementTest__Group_1_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getTypeNameAssignment_1_2_1_1()); }
(rule__ElementTest__TypeNameAssignment_1_2_1_1)
{ after(grammarAccess.getElementTestAccess().getTypeNameAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementTest__Group_1_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementTest__Group_1_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__Group_1_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getQuestionAssignment_1_2_1_2()); }
(rule__ElementTest__QuestionAssignment_1_2_1_2)?
{ after(grammarAccess.getElementTestAccess().getQuestionAssignment_1_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__0__Impl
	rule__AttributeTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributeTestAction_0()); }
(

)
{ after(grammarAccess.getAttributeTestAccess().getAttributeTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup_1()); }
(rule__AttributeTest__Group_1__0)
{ after(grammarAccess.getAttributeTestAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeTest__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1__0__Impl
	rule__AttributeTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributexKeyword_1_0()); }

	'attributex' 

{ after(grammarAccess.getAttributeTestAccess().getAttributexKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1__1__Impl
	rule__AttributeTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1__2__Impl
	rule__AttributeTest__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup_1_2()); }
(rule__AttributeTest__Group_1_2__0)?
{ after(grammarAccess.getAttributeTestAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AttributeTest__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1_2__0__Impl
	rule__AttributeTest__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAssignment_1_2_0()); }
(rule__AttributeTest__AttributeNameOrWildcardAssignment_1_2_0)
{ after(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getGroup_1_2_1()); }
(rule__AttributeTest__Group_1_2_1__0)?
{ after(grammarAccess.getAttributeTestAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeTest__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1_2_1__0__Impl
	rule__AttributeTest__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getCommaKeyword_1_2_1_0()); }

	',' 

{ after(grammarAccess.getAttributeTestAccess().getCommaKeyword_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeTest__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeTest__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__Group_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getTypeNameAssignment_1_2_1_1()); }
(rule__AttributeTest__TypeNameAssignment_1_2_1_1)
{ after(grammarAccess.getAttributeTestAccess().getTypeNameAssignment_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AxisStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AxisStep__Group__0__Impl
	rule__AxisStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getAlternatives_0()); }
(rule__AxisStep__Alternatives_0)
{ after(grammarAccess.getAxisStepAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AxisStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AxisStep__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getPredicateAssignment_1()); }
(rule__AxisStep__PredicateAssignment_1)*
{ after(grammarAccess.getAxisStepAccess().getPredicateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__PathExpr__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_0__0__Impl
	rule__PathExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSeparatorAssignment_0_0()); }
(rule__PathExpr__SeparatorAssignment_0_0)
{ after(grammarAccess.getPathExprAccess().getSeparatorAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathAssignment_0_1()); }
(rule__PathExpr__RelativePathAssignment_0_1)?
{ after(grammarAccess.getPathExprAccess().getRelativePathAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PathExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_1__0__Impl
	rule__PathExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSeparatorAssignment_1_0()); }
(rule__PathExpr__SeparatorAssignment_1_0)
{ after(grammarAccess.getPathExprAccess().getSeparatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathAssignment_1_1()); }
(rule__PathExpr__RelativePathAssignment_1_1)
{ after(grammarAccess.getPathExprAccess().getRelativePathAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttribNameOrWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttribNameOrWildcard__Group__0__Impl
	rule__AttribNameOrWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_0()); }
(

)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttribNameOrWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttribNameOrWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAssignment_1()); }
(rule__AttribNameOrWildcard__AttributeNameAssignment_1)
{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementNameOrWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementNameOrWildcard__Group__0__Impl
	rule__ElementNameOrWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_0()); }
(

)
{ after(grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementNameOrWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementNameOrWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElementNameAssignment_1()); }
(rule__ElementNameOrWildcard__ElementNameAssignment_1)
{ after(grammarAccess.getElementNameOrWildcardAccess().getElementNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__XPath__ExpressionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXPathAccess().getExpressionsExprParserRuleCall_0()); }
	ruleExpr{ after(grammarAccess.getXPathAccess().getExpressionsExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalLiteralAccess().getValueDECIMALTerminalRuleCall_0()); }
	RULE_DECIMAL{ after(grammarAccess.getDecimalLiteralAccess().getValueDECIMALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0()); }
	RULE_DOUBLE{ after(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__PrefixAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getPrefixPrefixParserRuleCall_0_0()); }
	rulePrefix{ after(grammarAccess.getPrefixedNameAccess().getPrefixPrefixParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixedName__LocalPartAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixedNameAccess().getLocalPartLocalPartParserRuleCall_2_0()); }
	ruleLocalPart{ after(grammarAccess.getPrefixedNameAccess().getLocalPartLocalPartParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnprefixedName__LocalPartAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnprefixedNameAccess().getLocalPartLocalPartParserRuleCall_0()); }
	ruleLocalPart{ after(grammarAccess.getUnprefixedNameAccess().getLocalPartLocalPartParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_0_0()); }
	ruleExprSingle{ after(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_1_1_0()); }
	ruleExprSingle{ after(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__ForAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); }
	ruleSimpleForClause{ after(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForExpr__ReturnAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); }
	ruleExprSingle{ after(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_2_0()); }
	ruleVarName{ after(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_4_0()); }
	ruleExprSingle{ after(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__VariableAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_5_2_0()); }
	ruleVarName{ after(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleForClause__ExpressionAssignment_5_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_5_4_0()); }
	ruleExprSingle{ after(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_5_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__QuantifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getQuantifierAlternatives_0_0()); }
(rule__QuantifiedExpr__QuantifierAlternatives_0_0)
{ after(grammarAccess.getQuantifiedExprAccess().getQuantifierAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); }
	ruleVarName{ after(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_4_0()); }
	ruleExprSingle{ after(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__VariableAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_5_2_0()); }
	ruleVarName{ after(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__ExpressionAssignment_5_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_5_4_0()); }
	ruleExprSingle{ after(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_5_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpr__SatisfiesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExprAccess().getSatisfiesExprSingleParserRuleCall_7_0()); }
	ruleExprSingle{ after(grammarAccess.getQuantifiedExprAccess().getSatisfiesExprSingleParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__IfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ThenAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); }
	ruleExprSingle{ after(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ElseAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); }
	ruleExprSingle{ after(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__OrAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_0_0()); }
	ruleAndExpr{ after(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpr__OrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_1_1_0()); }
	ruleAndExpr{ after(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__AndAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_0_0()); }
	ruleComparisonExpr{ after(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpr__AndAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_1_1_0()); }
	ruleComparisonExpr{ after(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getOperand1RangeExprParserRuleCall_0_0()); }
	ruleRangeExpr{ after(grammarAccess.getComparisonExprAccess().getOperand1RangeExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getValueValueCompEnumRuleCall_1_0_0()); }
	ruleValueComp{ after(grammarAccess.getComparisonExprAccess().getValueValueCompEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__GeneralAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getGeneralGeneralCompEnumRuleCall_1_1_0()); }
	ruleGeneralComp{ after(grammarAccess.getComparisonExprAccess().getGeneralGeneralCompEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__NodeAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getNodeNodeCompEnumRuleCall_1_2_0_0()); }
	ruleNodeComp{ after(grammarAccess.getComparisonExprAccess().getNodeNodeCompEnumRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpr__RangeAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_1_2_1_0()); }
	ruleRangeExpr{ after(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__RangeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getRangeAdditiveExprParserRuleCall_0_0()); }
	ruleAdditiveExpr{ after(grammarAccess.getRangeExprAccess().getRangeAdditiveExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpr__ToAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); }
	ruleAdditiveExpr{ after(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__AddAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_0_0()); }
	ruleMultiplicativeExpr{ after(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getOperatorAdditiveEnumRuleCall_1_0_0()); }
	ruleAdditive{ after(grammarAccess.getAdditiveExprAccess().getOperatorAdditiveEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpr__AddAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpr{ after(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__MultiplyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_0_0()); }
	ruleUnionExpr{ after(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getOperatorMultiplicativeEnumRuleCall_1_0_0()); }
	ruleMultiplicative{ after(grammarAccess.getMultiplicativeExprAccess().getOperatorMultiplicativeEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpr__MultiplyAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_1_1_0()); }
	ruleUnionExpr{ after(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__UnionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_0_0()); }
	ruleIntersectExceptExpr{ after(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getOperatorUnionEnumRuleCall_1_0_0()); }
	ruleUnion{ after(grammarAccess.getUnionExprAccess().getOperatorUnionEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionExpr__UnionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_1_1_0()); }
	ruleIntersectExceptExpr{ after(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__IntersectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_0_0()); }
	ruleInstanceofExpr{ after(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getOperatorIntersectExceptEnumRuleCall_1_0_0()); }
	ruleIntersectExcept{ after(grammarAccess.getIntersectExceptExprAccess().getOperatorIntersectExceptEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntersectExceptExpr__IntersectAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_1_1_0()); }
	ruleInstanceofExpr{ after(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__TreatAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getTreatTreatExprParserRuleCall_0_0()); }
	ruleTreatExpr{ after(grammarAccess.getInstanceofExprAccess().getTreatTreatExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpr__InstanceOfAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExprAccess().getInstanceOfSequenceTypeParserRuleCall_1_2_0()); }
	ruleSequenceType{ after(grammarAccess.getInstanceofExprAccess().getInstanceOfSequenceTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__CastableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getCastableCastableExprParserRuleCall_0_0()); }
	ruleCastableExpr{ after(grammarAccess.getTreatExprAccess().getCastableCastableExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TreatExpr__TreatAsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTreatExprAccess().getTreatAsSequenceTypeParserRuleCall_1_2_0()); }
	ruleSequenceType{ after(grammarAccess.getTreatExprAccess().getTreatAsSequenceTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__TypeAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getTypeItemTypeParserRuleCall_1_1_0_0()); }
	ruleItemType{ after(grammarAccess.getSequenceTypeAccess().getTypeItemTypeParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceType__OccurrenceAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeAccess().getOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0()); }
	ruleOccurrenceIndicator{ after(grammarAccess.getSequenceTypeAccess().getOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__KindTestAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_1_0_0()); }
	ruleKindTest{ after(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ItemType__AtomicTypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_1_2_0()); }
	ruleAtomicType{ after(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__CastAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastCastExprParserRuleCall_0_0()); }
	ruleCastExpr{ after(grammarAccess.getCastableExprAccess().getCastCastExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastableExpr__CastableAsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastableExprAccess().getCastableAsSingleTypeParserRuleCall_1_2_0()); }
	ruleSingleType{ after(grammarAccess.getCastableExprAccess().getCastableAsSingleTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__CastAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastUnaryExprParserRuleCall_0_0()); }
	ruleUnaryExpr{ after(grammarAccess.getCastExprAccess().getCastUnaryExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpr__CastAsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastExprAccess().getCastAsSingleTypeParserRuleCall_1_2_0()); }
	ruleSingleType{ after(grammarAccess.getCastExprAccess().getCastAsSingleTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpr__PathAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExprAccess().getPathPathExprParserRuleCall_0()); }
	rulePathExpr{ after(grammarAccess.getValueExprAccess().getPathPathExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getTypeAtomicTypeParserRuleCall_0_0()); }
	ruleAtomicType{ after(grammarAccess.getSingleTypeAccess().getTypeAtomicTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleType__QuestionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleTypeAccess().getQuestionQuestionMarkKeyword_1_0()); }
(
{ before(grammarAccess.getSingleTypeAccess().getQuestionQuestionMarkKeyword_1_0()); }

	'?' 

{ after(grammarAccess.getSingleTypeAccess().getQuestionQuestionMarkKeyword_1_0()); }
)

{ after(grammarAccess.getSingleTypeAccess().getQuestionQuestionMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__StepAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_0_0()); }
	ruleStepExpr{ after(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__SeparatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getSeparatorSeparatorEnumRuleCall_1_0_0()); }
	ruleSeparator{ after(grammarAccess.getRelativePathExprAccess().getSeparatorSeparatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelativePathExpr__StepAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_1_1_0()); }
	ruleStepExpr{ after(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__PredicateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAccess().getPredicateExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getPredicateAccess().getPredicateExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__AxisAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getAxisReverseAxisParserRuleCall_0_0_0()); }
	ruleReverseAxis{ after(grammarAccess.getReverseStepAccess().getAxisReverseAxisParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__TestAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
	ruleNodeTest{ after(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseStep__AbbrevAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseStepAccess().getAbbrevAbbrevReverseStepParserRuleCall_1_0()); }
	ruleAbbrevReverseStep{ after(grammarAccess.getReverseStepAccess().getAbbrevAbbrevReverseStepParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReverseAxis__AxisAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReverseAxisAccess().getAxisReverseAxisEnumEnumRuleCall_0_0()); }
	ruleReverseAxisEnum{ after(grammarAccess.getReverseAxisAccess().getAxisReverseAxisEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__AxisAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getAxisForwardAxisParserRuleCall_0_0_0()); }
	ruleForwardAxis{ after(grammarAccess.getForwardStepAccess().getAxisForwardAxisParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__TestAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
	ruleNodeTest{ after(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardStep__AbbrevAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardStepAccess().getAbbrevAbbrevForwardStepParserRuleCall_1_0()); }
	ruleAbbrevForwardStep{ after(grammarAccess.getForwardStepAccess().getAbbrevAbbrevForwardStepParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardAxis__AxisAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForwardAxisAccess().getAxisForwardAxisEnumEnumRuleCall_0_0()); }
	ruleForwardAxisEnum{ after(grammarAccess.getForwardAxisAccess().getAxisForwardAxisEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__AtAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAtCommercialAtKeyword_0_0()); }
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getAtCommercialAtKeyword_0_0()); }

	'@' 

{ after(grammarAccess.getAbbrevForwardStepAccess().getAtCommercialAtKeyword_0_0()); }
)

{ after(grammarAccess.getAbbrevForwardStepAccess().getAtCommercialAtKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbbrevForwardStep__TestAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); }
	ruleNodeTest{ after(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarRef__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarRefAccess().getVarVarNameParserRuleCall_1_0()); }
	ruleVarName{ after(grammarAccess.getVarRefAccess().getVarVarNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpr__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExprAccess().getExpressionExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getParenthesizedExprAccess().getExpressionExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionQNameParserRuleCall_0_0()); }
	ruleQName{ after(grammarAccess.getFunctionCallAccess().getFunctionQNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParameterAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_0_0()); }
	ruleExprSingle{ after(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParameterAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_1_1_0()); }
	ruleExprSingle{ after(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__ElementTestAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getElementTestElementTestParserRuleCall_1_2_0_0()); }
	ruleElementTest{ after(grammarAccess.getDocumentTestAccess().getElementTestElementTestParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DocumentTest__SchemaElementTestAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentTestAccess().getSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0()); }
	ruleSchemaElementTest{ after(grammarAccess.getDocumentTestAccess().getSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__NameAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getNameNCNAMETerminalRuleCall_1_2_0_0()); }
	RULE_NCNAME{ after(grammarAccess.getPITestAccess().getNameNCNAMETerminalRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PITest__StringAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPITestAccess().getStringStringLiteralParserRuleCall_1_2_1_0()); }
	ruleStringLiteral{ after(grammarAccess.getPITestAccess().getStringStringLiteralParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaAttributeTest__AttributeDeclarationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAttributeDeclarationParserRuleCall_2_0()); }
	ruleAttributeDeclaration{ after(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAttributeDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaElementTest__ElementDeclarationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaElementTestAccess().getElementDeclarationElementDeclarationParserRuleCall_2_0()); }
	ruleElementDeclaration{ after(grammarAccess.getSchemaElementTestAccess().getElementDeclarationElementDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__UnaryAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_0()); }
	ruleValueExpr{ after(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__PrefixAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getPrefixNCNAMETerminalRuleCall_0_0_0()); }
	RULE_NCNAME{ after(grammarAccess.getWildcardAccess().getPrefixNCNAMETerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Wildcard__AnyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardAccess().getAnyAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getWildcardAccess().getAnyAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getWildcardAccess().getAnyAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getWildcardAccess().getAnyAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__ElementNameOrWildcardAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0()); }
	ruleElementNameOrWildcard{ after(grammarAccess.getElementTestAccess().getElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__TypeNameAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementTest__QuestionAssignment_1_2_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementTestAccess().getQuestionQuestionMarkKeyword_1_2_1_2_0()); }
(
{ before(grammarAccess.getElementTestAccess().getQuestionQuestionMarkKeyword_1_2_1_2_0()); }

	'?' 

{ after(grammarAccess.getElementTestAccess().getQuestionQuestionMarkKeyword_1_2_1_2_0()); }
)

{ after(grammarAccess.getElementTestAccess().getQuestionQuestionMarkKeyword_1_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__AttributeNameOrWildcardAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0()); }
	ruleAttribNameOrWildcard{ after(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeTest__TypeNameAssignment_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__ReverseStepAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getReverseStepReverseStepParserRuleCall_0_0_0()); }
	ruleReverseStep{ after(grammarAccess.getAxisStepAccess().getReverseStepReverseStepParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__ForwardStepAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getForwardStepForwardStepParserRuleCall_0_1_0()); }
	ruleForwardStep{ after(grammarAccess.getAxisStepAccess().getForwardStepForwardStepParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AxisStep__PredicateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAxisStepAccess().getPredicatePredicateParserRuleCall_1_0()); }
	rulePredicate{ after(grammarAccess.getAxisStepAccess().getPredicatePredicateParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PathExpr__SeparatorAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSeparatorSolidusKeyword_0_0_0()); }
(
{ before(grammarAccess.getPathExprAccess().getSeparatorSolidusKeyword_0_0_0()); }

	'/' 

{ after(grammarAccess.getPathExprAccess().getSeparatorSolidusKeyword_0_0_0()); }
)

{ after(grammarAccess.getPathExprAccess().getSeparatorSolidusKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__RelativePathAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_0_1_0()); }
	ruleRelativePathExpr{ after(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__SeparatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getSeparatorSolidusSolidusKeyword_1_0_0()); }
(
{ before(grammarAccess.getPathExprAccess().getSeparatorSolidusSolidusKeyword_1_0_0()); }

	'//' 

{ after(grammarAccess.getPathExprAccess().getSeparatorSolidusSolidusKeyword_1_0_0()); }
)

{ after(grammarAccess.getPathExprAccess().getSeparatorSolidusSolidusKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__RelativePathAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_1_1_0()); }
	ruleRelativePathExpr{ after(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathExpr__RelativePathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_2_0()); }
	ruleRelativePathExpr{ after(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttribNameOrWildcard__AttributeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAttributeNameParserRuleCall_1_0()); }
	ruleAttributeName{ after(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAttributeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementNameOrWildcard__ElementNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementNameOrWildcardAccess().getElementNameElementNameParserRuleCall_1_0()); }
	ruleElementName{ after(grammarAccess.getElementNameOrWildcardAccess().getElementNameElementNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DECIMAL : ('.' ('0'..'9')+|('0'..'9')+ '.' ('0'..'9')*);

RULE_DOUBLE : ('.' ('0'..'9')+|('0'..'9')+ '.' ('0'..'9')*) ('e'|'E') ('+'|'-') ('0'..'9')+;

RULE_COMMENT : '(:' ( options {greedy=false;} : . )*':)';

RULE_NCNAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


