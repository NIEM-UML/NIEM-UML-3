/*
* generated by Xtext
*/
package org.w3.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.w3.services.Xpath20GrammarAccess;

public class Xpath20Parser extends AbstractContentAssistParser {
	
	@Inject
	private Xpath20GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.w3.ui.contentassist.antlr.internal.InternalXpath20Parser createParser() {
		org.w3.ui.contentassist.antlr.internal.InternalXpath20Parser result = new org.w3.ui.contentassist.antlr.internal.InternalXpath20Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQNameAccess().getAlternatives(), "rule__QName__Alternatives");
					put(grammarAccess.getExprSingleAccess().getAlternatives(), "rule__ExprSingle__Alternatives");
					put(grammarAccess.getQuantifiedExprAccess().getQuantifierAlternatives_0_0(), "rule__QuantifiedExpr__QuantifierAlternatives_0_0");
					put(grammarAccess.getComparisonExprAccess().getAlternatives_1(), "rule__ComparisonExpr__Alternatives_1");
					put(grammarAccess.getSequenceTypeAccess().getAlternatives_1(), "rule__SequenceType__Alternatives_1");
					put(grammarAccess.getItemTypeAccess().getAlternatives_1(), "rule__ItemType__Alternatives_1");
					put(grammarAccess.getReverseStepAccess().getAlternatives(), "rule__ReverseStep__Alternatives");
					put(grammarAccess.getNodeTestAccess().getAlternatives(), "rule__NodeTest__Alternatives");
					put(grammarAccess.getNameTestAccess().getAlternatives(), "rule__NameTest__Alternatives");
					put(grammarAccess.getForwardStepAccess().getAlternatives(), "rule__ForwardStep__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getNumericLiteralAccess().getAlternatives(), "rule__NumericLiteral__Alternatives");
					put(grammarAccess.getKindTestAccess().getAlternatives(), "rule__KindTest__Alternatives");
					put(grammarAccess.getDocumentTestAccess().getAlternatives_1_2(), "rule__DocumentTest__Alternatives_1_2");
					put(grammarAccess.getPITestAccess().getAlternatives_1_2(), "rule__PITest__Alternatives_1_2");
					put(grammarAccess.getWildcardAccess().getAlternatives(), "rule__Wildcard__Alternatives");
					put(grammarAccess.getAxisStepAccess().getAlternatives_0(), "rule__AxisStep__Alternatives_0");
					put(grammarAccess.getPathExprAccess().getAlternatives(), "rule__PathExpr__Alternatives");
					put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
					put(grammarAccess.getIntersectExceptAccess().getAlternatives(), "rule__IntersectExcept__Alternatives");
					put(grammarAccess.getUnionAccess().getAlternatives(), "rule__Union__Alternatives");
					put(grammarAccess.getAdditiveAccess().getAlternatives(), "rule__Additive__Alternatives");
					put(grammarAccess.getGeneralCompAccess().getAlternatives(), "rule__GeneralComp__Alternatives");
					put(grammarAccess.getValueCompAccess().getAlternatives(), "rule__ValueComp__Alternatives");
					put(grammarAccess.getNodeCompAccess().getAlternatives(), "rule__NodeComp__Alternatives");
					put(grammarAccess.getSeparatorAccess().getAlternatives(), "rule__Separator__Alternatives");
					put(grammarAccess.getReverseAxisEnumAccess().getAlternatives(), "rule__ReverseAxisEnum__Alternatives");
					put(grammarAccess.getForwardAxisEnumAccess().getAlternatives(), "rule__ForwardAxisEnum__Alternatives");
					put(grammarAccess.getOccurrenceIndicatorAccess().getAlternatives(), "rule__OccurrenceIndicator__Alternatives");
					put(grammarAccess.getMultiplicativeAccess().getAlternatives(), "rule__Multiplicative__Alternatives");
					put(grammarAccess.getPrefixedNameAccess().getGroup(), "rule__PrefixedName__Group__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getForExprAccess().getGroup(), "rule__ForExpr__Group__0");
					put(grammarAccess.getSimpleForClauseAccess().getGroup(), "rule__SimpleForClause__Group__0");
					put(grammarAccess.getSimpleForClauseAccess().getGroup_5(), "rule__SimpleForClause__Group_5__0");
					put(grammarAccess.getQuantifiedExprAccess().getGroup(), "rule__QuantifiedExpr__Group__0");
					put(grammarAccess.getQuantifiedExprAccess().getGroup_5(), "rule__QuantifiedExpr__Group_5__0");
					put(grammarAccess.getIfExprAccess().getGroup(), "rule__IfExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getComparisonExprAccess().getGroup(), "rule__ComparisonExpr__Group__0");
					put(grammarAccess.getComparisonExprAccess().getGroup_1_2(), "rule__ComparisonExpr__Group_1_2__0");
					put(grammarAccess.getRangeExprAccess().getGroup(), "rule__RangeExpr__Group__0");
					put(grammarAccess.getRangeExprAccess().getGroup_1(), "rule__RangeExpr__Group_1__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup(), "rule__AdditiveExpr__Group__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup_1(), "rule__AdditiveExpr__Group_1__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup(), "rule__MultiplicativeExpr__Group__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup_1(), "rule__MultiplicativeExpr__Group_1__0");
					put(grammarAccess.getUnionExprAccess().getGroup(), "rule__UnionExpr__Group__0");
					put(grammarAccess.getUnionExprAccess().getGroup_1(), "rule__UnionExpr__Group_1__0");
					put(grammarAccess.getIntersectExceptExprAccess().getGroup(), "rule__IntersectExceptExpr__Group__0");
					put(grammarAccess.getIntersectExceptExprAccess().getGroup_1(), "rule__IntersectExceptExpr__Group_1__0");
					put(grammarAccess.getInstanceofExprAccess().getGroup(), "rule__InstanceofExpr__Group__0");
					put(grammarAccess.getInstanceofExprAccess().getGroup_1(), "rule__InstanceofExpr__Group_1__0");
					put(grammarAccess.getTreatExprAccess().getGroup(), "rule__TreatExpr__Group__0");
					put(grammarAccess.getTreatExprAccess().getGroup_1(), "rule__TreatExpr__Group_1__0");
					put(grammarAccess.getSequenceTypeAccess().getGroup(), "rule__SequenceType__Group__0");
					put(grammarAccess.getSequenceTypeAccess().getGroup_1_0(), "rule__SequenceType__Group_1_0__0");
					put(grammarAccess.getSequenceTypeAccess().getGroup_1_1(), "rule__SequenceType__Group_1_1__0");
					put(grammarAccess.getItemTypeAccess().getGroup(), "rule__ItemType__Group__0");
					put(grammarAccess.getItemTypeAccess().getGroup_1_1(), "rule__ItemType__Group_1_1__0");
					put(grammarAccess.getCastableExprAccess().getGroup(), "rule__CastableExpr__Group__0");
					put(grammarAccess.getCastableExprAccess().getGroup_1(), "rule__CastableExpr__Group_1__0");
					put(grammarAccess.getCastExprAccess().getGroup(), "rule__CastExpr__Group__0");
					put(grammarAccess.getCastExprAccess().getGroup_1(), "rule__CastExpr__Group_1__0");
					put(grammarAccess.getSingleTypeAccess().getGroup(), "rule__SingleType__Group__0");
					put(grammarAccess.getRelativePathExprAccess().getGroup(), "rule__RelativePathExpr__Group__0");
					put(grammarAccess.getRelativePathExprAccess().getGroup_1(), "rule__RelativePathExpr__Group_1__0");
					put(grammarAccess.getPredicateListAccess().getGroup(), "rule__PredicateList__Group__0");
					put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
					put(grammarAccess.getReverseStepAccess().getGroup_0(), "rule__ReverseStep__Group_0__0");
					put(grammarAccess.getReverseAxisAccess().getGroup(), "rule__ReverseAxis__Group__0");
					put(grammarAccess.getForwardStepAccess().getGroup_0(), "rule__ForwardStep__Group_0__0");
					put(grammarAccess.getForwardAxisAccess().getGroup(), "rule__ForwardAxis__Group__0");
					put(grammarAccess.getAbbrevForwardStepAccess().getGroup(), "rule__AbbrevForwardStep__Group__0");
					put(grammarAccess.getVarRefAccess().getGroup(), "rule__VarRef__Group__0");
					put(grammarAccess.getParenthesizedExprAccess().getGroup(), "rule__ParenthesizedExpr__Group__0");
					put(grammarAccess.getContextItemExprAccess().getGroup(), "rule__ContextItemExpr__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
					put(grammarAccess.getAnyKindTestAccess().getGroup(), "rule__AnyKindTest__Group__0");
					put(grammarAccess.getAnyKindTestAccess().getGroup_1(), "rule__AnyKindTest__Group_1__0");
					put(grammarAccess.getDocumentTestAccess().getGroup(), "rule__DocumentTest__Group__0");
					put(grammarAccess.getDocumentTestAccess().getGroup_1(), "rule__DocumentTest__Group_1__0");
					put(grammarAccess.getTextTestAccess().getGroup(), "rule__TextTest__Group__0");
					put(grammarAccess.getTextTestAccess().getGroup_1(), "rule__TextTest__Group_1__0");
					put(grammarAccess.getCommentTestAccess().getGroup(), "rule__CommentTest__Group__0");
					put(grammarAccess.getCommentTestAccess().getGroup_1(), "rule__CommentTest__Group_1__0");
					put(grammarAccess.getPITestAccess().getGroup(), "rule__PITest__Group__0");
					put(grammarAccess.getPITestAccess().getGroup_1(), "rule__PITest__Group_1__0");
					put(grammarAccess.getSchemaAttributeTestAccess().getGroup(), "rule__SchemaAttributeTest__Group__0");
					put(grammarAccess.getSchemaElementTestAccess().getGroup(), "rule__SchemaElementTest__Group__0");
					put(grammarAccess.getWildcardAccess().getGroup_0(), "rule__Wildcard__Group_0__0");
					put(grammarAccess.getElementTestAccess().getGroup(), "rule__ElementTest__Group__0");
					put(grammarAccess.getElementTestAccess().getGroup_1(), "rule__ElementTest__Group_1__0");
					put(grammarAccess.getElementTestAccess().getGroup_1_2(), "rule__ElementTest__Group_1_2__0");
					put(grammarAccess.getElementTestAccess().getGroup_1_2_1(), "rule__ElementTest__Group_1_2_1__0");
					put(grammarAccess.getAttributeTestAccess().getGroup(), "rule__AttributeTest__Group__0");
					put(grammarAccess.getAttributeTestAccess().getGroup_1(), "rule__AttributeTest__Group_1__0");
					put(grammarAccess.getAttributeTestAccess().getGroup_1_2(), "rule__AttributeTest__Group_1_2__0");
					put(grammarAccess.getAttributeTestAccess().getGroup_1_2_1(), "rule__AttributeTest__Group_1_2_1__0");
					put(grammarAccess.getAxisStepAccess().getGroup(), "rule__AxisStep__Group__0");
					put(grammarAccess.getFilterExprAccess().getGroup(), "rule__FilterExpr__Group__0");
					put(grammarAccess.getPathExprAccess().getGroup_0(), "rule__PathExpr__Group_0__0");
					put(grammarAccess.getPathExprAccess().getGroup_1(), "rule__PathExpr__Group_1__0");
					put(grammarAccess.getAttribNameOrWildcardAccess().getGroup(), "rule__AttribNameOrWildcard__Group__0");
					put(grammarAccess.getElementNameOrWildcardAccess().getGroup(), "rule__ElementNameOrWildcard__Group__0");
					put(grammarAccess.getXPathAccess().getExpressionsAssignment(), "rule__XPath__ExpressionsAssignment");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
					put(grammarAccess.getDecimalLiteralAccess().getValueAssignment(), "rule__DecimalLiteral__ValueAssignment");
					put(grammarAccess.getDoubleLiteralAccess().getValueAssignment(), "rule__DoubleLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getPrefixedNameAccess().getPrefixAssignment_0(), "rule__PrefixedName__PrefixAssignment_0");
					put(grammarAccess.getPrefixedNameAccess().getLocalPartAssignment_2(), "rule__PrefixedName__LocalPartAssignment_2");
					put(grammarAccess.getUnprefixedNameAccess().getLocalPartAssignment(), "rule__UnprefixedName__LocalPartAssignment");
					put(grammarAccess.getExprAccess().getExpressionAssignment_0(), "rule__Expr__ExpressionAssignment_0");
					put(grammarAccess.getExprAccess().getExpressionAssignment_1_1(), "rule__Expr__ExpressionAssignment_1_1");
					put(grammarAccess.getForExprAccess().getForAssignment_0(), "rule__ForExpr__ForAssignment_0");
					put(grammarAccess.getForExprAccess().getReturnAssignment_2(), "rule__ForExpr__ReturnAssignment_2");
					put(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_2(), "rule__SimpleForClause__VariableAssignment_2");
					put(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_4(), "rule__SimpleForClause__ExpressionAssignment_4");
					put(grammarAccess.getSimpleForClauseAccess().getVariableAssignment_5_2(), "rule__SimpleForClause__VariableAssignment_5_2");
					put(grammarAccess.getSimpleForClauseAccess().getExpressionAssignment_5_4(), "rule__SimpleForClause__ExpressionAssignment_5_4");
					put(grammarAccess.getQuantifiedExprAccess().getQuantifierAssignment_0(), "rule__QuantifiedExpr__QuantifierAssignment_0");
					put(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_2(), "rule__QuantifiedExpr__VariableAssignment_2");
					put(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_4(), "rule__QuantifiedExpr__ExpressionAssignment_4");
					put(grammarAccess.getQuantifiedExprAccess().getVariableAssignment_5_2(), "rule__QuantifiedExpr__VariableAssignment_5_2");
					put(grammarAccess.getQuantifiedExprAccess().getExpressionAssignment_5_4(), "rule__QuantifiedExpr__ExpressionAssignment_5_4");
					put(grammarAccess.getQuantifiedExprAccess().getSatisfiesAssignment_7(), "rule__QuantifiedExpr__SatisfiesAssignment_7");
					put(grammarAccess.getIfExprAccess().getIfAssignment_2(), "rule__IfExpr__IfAssignment_2");
					put(grammarAccess.getIfExprAccess().getThenAssignment_5(), "rule__IfExpr__ThenAssignment_5");
					put(grammarAccess.getIfExprAccess().getElseAssignment_7(), "rule__IfExpr__ElseAssignment_7");
					put(grammarAccess.getOrExprAccess().getOrAssignment_0(), "rule__OrExpr__OrAssignment_0");
					put(grammarAccess.getOrExprAccess().getOrAssignment_1_1(), "rule__OrExpr__OrAssignment_1_1");
					put(grammarAccess.getAndExprAccess().getAndAssignment_0(), "rule__AndExpr__AndAssignment_0");
					put(grammarAccess.getAndExprAccess().getAndAssignment_1_1(), "rule__AndExpr__AndAssignment_1_1");
					put(grammarAccess.getComparisonExprAccess().getOperand1Assignment_0(), "rule__ComparisonExpr__Operand1Assignment_0");
					put(grammarAccess.getComparisonExprAccess().getValueAssignment_1_0(), "rule__ComparisonExpr__ValueAssignment_1_0");
					put(grammarAccess.getComparisonExprAccess().getGeneralAssignment_1_1(), "rule__ComparisonExpr__GeneralAssignment_1_1");
					put(grammarAccess.getComparisonExprAccess().getNodeAssignment_1_2_0(), "rule__ComparisonExpr__NodeAssignment_1_2_0");
					put(grammarAccess.getComparisonExprAccess().getRangeAssignment_1_2_1(), "rule__ComparisonExpr__RangeAssignment_1_2_1");
					put(grammarAccess.getRangeExprAccess().getRangeAssignment_0(), "rule__RangeExpr__RangeAssignment_0");
					put(grammarAccess.getRangeExprAccess().getToAssignment_1_1(), "rule__RangeExpr__ToAssignment_1_1");
					put(grammarAccess.getAdditiveExprAccess().getAddAssignment_0(), "rule__AdditiveExpr__AddAssignment_0");
					put(grammarAccess.getAdditiveExprAccess().getOperatorAssignment_1_0(), "rule__AdditiveExpr__OperatorAssignment_1_0");
					put(grammarAccess.getAdditiveExprAccess().getAddAssignment_1_1(), "rule__AdditiveExpr__AddAssignment_1_1");
					put(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_0(), "rule__MultiplicativeExpr__MultiplyAssignment_0");
					put(grammarAccess.getMultiplicativeExprAccess().getOperatorAssignment_1_0(), "rule__MultiplicativeExpr__OperatorAssignment_1_0");
					put(grammarAccess.getMultiplicativeExprAccess().getMultiplyAssignment_1_1(), "rule__MultiplicativeExpr__MultiplyAssignment_1_1");
					put(grammarAccess.getUnionExprAccess().getUnionAssignment_0(), "rule__UnionExpr__UnionAssignment_0");
					put(grammarAccess.getUnionExprAccess().getOperatorAssignment_1_0(), "rule__UnionExpr__OperatorAssignment_1_0");
					put(grammarAccess.getUnionExprAccess().getUnionAssignment_1_1(), "rule__UnionExpr__UnionAssignment_1_1");
					put(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_0(), "rule__IntersectExceptExpr__IntersectAssignment_0");
					put(grammarAccess.getIntersectExceptExprAccess().getOperatorAssignment_1_0(), "rule__IntersectExceptExpr__OperatorAssignment_1_0");
					put(grammarAccess.getIntersectExceptExprAccess().getIntersectAssignment_1_1(), "rule__IntersectExceptExpr__IntersectAssignment_1_1");
					put(grammarAccess.getInstanceofExprAccess().getTreatAssignment_0(), "rule__InstanceofExpr__TreatAssignment_0");
					put(grammarAccess.getInstanceofExprAccess().getInstanceOfAssignment_1_2(), "rule__InstanceofExpr__InstanceOfAssignment_1_2");
					put(grammarAccess.getTreatExprAccess().getCastableAssignment_0(), "rule__TreatExpr__CastableAssignment_0");
					put(grammarAccess.getTreatExprAccess().getTreatAsAssignment_1_2(), "rule__TreatExpr__TreatAsAssignment_1_2");
					put(grammarAccess.getSequenceTypeAccess().getTypeAssignment_1_1_0(), "rule__SequenceType__TypeAssignment_1_1_0");
					put(grammarAccess.getSequenceTypeAccess().getOccurrenceAssignment_1_1_1(), "rule__SequenceType__OccurrenceAssignment_1_1_1");
					put(grammarAccess.getItemTypeAccess().getKindTestAssignment_1_0(), "rule__ItemType__KindTestAssignment_1_0");
					put(grammarAccess.getItemTypeAccess().getAtomicTypeAssignment_1_2(), "rule__ItemType__AtomicTypeAssignment_1_2");
					put(grammarAccess.getCastableExprAccess().getCastAssignment_0(), "rule__CastableExpr__CastAssignment_0");
					put(grammarAccess.getCastableExprAccess().getCastableAsAssignment_1_2(), "rule__CastableExpr__CastableAsAssignment_1_2");
					put(grammarAccess.getCastExprAccess().getCastAssignment_0(), "rule__CastExpr__CastAssignment_0");
					put(grammarAccess.getCastExprAccess().getCastAsAssignment_1_2(), "rule__CastExpr__CastAsAssignment_1_2");
					put(grammarAccess.getValueExprAccess().getPathAssignment(), "rule__ValueExpr__PathAssignment");
					put(grammarAccess.getSingleTypeAccess().getTypeAssignment_0(), "rule__SingleType__TypeAssignment_0");
					put(grammarAccess.getSingleTypeAccess().getQuestionAssignment_1(), "rule__SingleType__QuestionAssignment_1");
					put(grammarAccess.getRelativePathExprAccess().getStepAssignment_0(), "rule__RelativePathExpr__StepAssignment_0");
					put(grammarAccess.getRelativePathExprAccess().getSeparatorAssignment_1_0(), "rule__RelativePathExpr__SeparatorAssignment_1_0");
					put(grammarAccess.getRelativePathExprAccess().getStepAssignment_1_1(), "rule__RelativePathExpr__StepAssignment_1_1");
					put(grammarAccess.getPredicateListAccess().getPredicateAssignment_1(), "rule__PredicateList__PredicateAssignment_1");
					put(grammarAccess.getPredicateAccess().getPredicateAssignment_1(), "rule__Predicate__PredicateAssignment_1");
					put(grammarAccess.getReverseStepAccess().getAxisAssignment_0_0(), "rule__ReverseStep__AxisAssignment_0_0");
					put(grammarAccess.getReverseStepAccess().getTestAssignment_0_1(), "rule__ReverseStep__TestAssignment_0_1");
					put(grammarAccess.getReverseStepAccess().getAbbrevAssignment_1(), "rule__ReverseStep__AbbrevAssignment_1");
					put(grammarAccess.getReverseAxisAccess().getAxisAssignment_0(), "rule__ReverseAxis__AxisAssignment_0");
					put(grammarAccess.getForwardStepAccess().getAxisAssignment_0_0(), "rule__ForwardStep__AxisAssignment_0_0");
					put(grammarAccess.getForwardStepAccess().getTestAssignment_0_1(), "rule__ForwardStep__TestAssignment_0_1");
					put(grammarAccess.getForwardStepAccess().getAbbrevAssignment_1(), "rule__ForwardStep__AbbrevAssignment_1");
					put(grammarAccess.getForwardAxisAccess().getAxisAssignment_0(), "rule__ForwardAxis__AxisAssignment_0");
					put(grammarAccess.getAbbrevForwardStepAccess().getAtAssignment_0(), "rule__AbbrevForwardStep__AtAssignment_0");
					put(grammarAccess.getAbbrevForwardStepAccess().getTestAssignment_1(), "rule__AbbrevForwardStep__TestAssignment_1");
					put(grammarAccess.getVarRefAccess().getVarAssignment_1(), "rule__VarRef__VarAssignment_1");
					put(grammarAccess.getParenthesizedExprAccess().getExpressionAssignment_2(), "rule__ParenthesizedExpr__ExpressionAssignment_2");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0(), "rule__FunctionCall__FunctionAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_0(), "rule__FunctionCall__ParameterAssignment_2_0");
					put(grammarAccess.getFunctionCallAccess().getParameterAssignment_2_1_1(), "rule__FunctionCall__ParameterAssignment_2_1_1");
					put(grammarAccess.getDocumentTestAccess().getElementTestAssignment_1_2_0(), "rule__DocumentTest__ElementTestAssignment_1_2_0");
					put(grammarAccess.getDocumentTestAccess().getSchemaElementTestAssignment_1_2_1(), "rule__DocumentTest__SchemaElementTestAssignment_1_2_1");
					put(grammarAccess.getPITestAccess().getNameAssignment_1_2_0(), "rule__PITest__NameAssignment_1_2_0");
					put(grammarAccess.getPITestAccess().getStringAssignment_1_2_1(), "rule__PITest__StringAssignment_1_2_1");
					put(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAssignment_2(), "rule__SchemaAttributeTest__AttributeDeclarationAssignment_2");
					put(grammarAccess.getSchemaElementTestAccess().getElementDeclarationAssignment_2(), "rule__SchemaElementTest__ElementDeclarationAssignment_2");
					put(grammarAccess.getUnaryExprAccess().getUnaryAssignment(), "rule__UnaryExpr__UnaryAssignment");
					put(grammarAccess.getWildcardAccess().getPrefixAssignment_0_0(), "rule__Wildcard__PrefixAssignment_0_0");
					put(grammarAccess.getWildcardAccess().getAnyAssignment_1(), "rule__Wildcard__AnyAssignment_1");
					put(grammarAccess.getElementTestAccess().getElementNameOrWildcardAssignment_1_2_0(), "rule__ElementTest__ElementNameOrWildcardAssignment_1_2_0");
					put(grammarAccess.getElementTestAccess().getTypeNameAssignment_1_2_1_1(), "rule__ElementTest__TypeNameAssignment_1_2_1_1");
					put(grammarAccess.getElementTestAccess().getQuestionAssignment_1_2_1_2(), "rule__ElementTest__QuestionAssignment_1_2_1_2");
					put(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAssignment_1_2_0(), "rule__AttributeTest__AttributeNameOrWildcardAssignment_1_2_0");
					put(grammarAccess.getAttributeTestAccess().getTypeNameAssignment_1_2_1_1(), "rule__AttributeTest__TypeNameAssignment_1_2_1_1");
					put(grammarAccess.getAxisStepAccess().getReverseStepAssignment_0_0(), "rule__AxisStep__ReverseStepAssignment_0_0");
					put(grammarAccess.getAxisStepAccess().getForwardStepAssignment_0_1(), "rule__AxisStep__ForwardStepAssignment_0_1");
					put(grammarAccess.getAxisStepAccess().getPredicateAssignment_1(), "rule__AxisStep__PredicateAssignment_1");
					put(grammarAccess.getFilterExprAccess().getFilterAssignment_0(), "rule__FilterExpr__FilterAssignment_0");
					put(grammarAccess.getFilterExprAccess().getPredicateAssignment_1(), "rule__FilterExpr__PredicateAssignment_1");
					put(grammarAccess.getPathExprAccess().getSeparatorAssignment_0_0(), "rule__PathExpr__SeparatorAssignment_0_0");
					put(grammarAccess.getPathExprAccess().getRelativePathAssignment_0_1(), "rule__PathExpr__RelativePathAssignment_0_1");
					put(grammarAccess.getPathExprAccess().getSeparatorAssignment_1_0(), "rule__PathExpr__SeparatorAssignment_1_0");
					put(grammarAccess.getPathExprAccess().getRelativePathAssignment_1_1(), "rule__PathExpr__RelativePathAssignment_1_1");
					put(grammarAccess.getPathExprAccess().getRelativePathAssignment_2(), "rule__PathExpr__RelativePathAssignment_2");
					put(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAssignment_1(), "rule__AttribNameOrWildcard__AttributeNameAssignment_1");
					put(grammarAccess.getElementNameOrWildcardAccess().getElementNameAssignment_1(), "rule__ElementNameOrWildcard__ElementNameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.w3.ui.contentassist.antlr.internal.InternalXpath20Parser typedParser = (org.w3.ui.contentassist.antlr.internal.InternalXpath20Parser) parser;
			typedParser.entryRuleXPath();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_COMMENT" };
	}
	
	public Xpath20GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Xpath20GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
