/*
* generated by Xtext
*/
package org.w3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Xpath20GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPath");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExprParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//XPath:
		//	expressions=Expr;
		public ParserRule getRule() { return rule; }

		//expressions=Expr
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }

		//Expr
		public RuleCall getExpressionsExprParserRuleCall_0() { return cExpressionsExprParserRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DecimalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecimalLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DecimalLiteral:
		//	value=DECIMAL;
		public ParserRule getRule() { return rule; }

		//value=DECIMAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0() { return cValueDECIMALTerminalRuleCall_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleLiteral:
		//	value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// * ws: explicit * / StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnprefixedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * gn: comments * / QName:
		//	PrefixedName | UnprefixedName;
		public ParserRule getRule() { return rule; }

		//PrefixedName | UnprefixedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrefixedName
		public RuleCall getPrefixedNameParserRuleCall_0() { return cPrefixedNameParserRuleCall_0; }

		//UnprefixedName
		public RuleCall getUnprefixedNameParserRuleCall_1() { return cUnprefixedNameParserRuleCall_1; }
	}

	public class PrefixedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixPrefixParserRuleCall_0_0 = (RuleCall)cPrefixAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocalPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocalPartLocalPartParserRuleCall_2_0 = (RuleCall)cLocalPartAssignment_2.eContents().get(0);
		
		//PrefixedName:
		//	prefix=Prefix ":" localPart=LocalPart;
		public ParserRule getRule() { return rule; }

		//prefix=Prefix ":" localPart=LocalPart
		public Group getGroup() { return cGroup; }

		//prefix=Prefix
		public Assignment getPrefixAssignment_0() { return cPrefixAssignment_0; }

		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_0_0() { return cPrefixPrefixParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//localPart=LocalPart
		public Assignment getLocalPartAssignment_2() { return cLocalPartAssignment_2; }

		//LocalPart
		public RuleCall getLocalPartLocalPartParserRuleCall_2_0() { return cLocalPartLocalPartParserRuleCall_2_0; }
	}

	public class UnprefixedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnprefixedName");
		private final Assignment cLocalPartAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLocalPartLocalPartParserRuleCall_0 = (RuleCall)cLocalPartAssignment.eContents().get(0);
		
		//UnprefixedName:
		//	localPart=LocalPart;
		public ParserRule getRule() { return rule; }

		//localPart=LocalPart
		public Assignment getLocalPartAssignment() { return cLocalPartAssignment; }

		//LocalPart
		public RuleCall getLocalPartLocalPartParserRuleCall_0() { return cLocalPartLocalPartParserRuleCall_0; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final RuleCall cNCNAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Prefix:
		//	NCNAME;
		public ParserRule getRule() { return rule; }

		//NCNAME
		public RuleCall getNCNAMETerminalRuleCall() { return cNCNAMETerminalRuleCall; }
	}

	public class LocalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalPart");
		private final RuleCall cNCNAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LocalPart:
		//	NCNAME;
		public ParserRule getRule() { return rule; }

		//NCNAME
		public RuleCall getNCNAMETerminalRuleCall() { return cNCNAMETerminalRuleCall; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExprSingleParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExprSingleParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Expr:
		//	expression+=ExprSingle ("," expression+=ExprSingle)*;
		public ParserRule getRule() { return rule; }

		//expression+=ExprSingle ("," expression+=ExprSingle)*
		public Group getGroup() { return cGroup; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_0_0() { return cExpressionExprSingleParserRuleCall_0_0; }

		//("," expression+=ExprSingle)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_1_1_0() { return cExpressionExprSingleParserRuleCall_1_1_0; }
	}

	public class ExprSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantifiedExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExprSingle:
		//	ForExpr | QuantifiedExpr | IfExpr | OrExpr;
		public ParserRule getRule() { return rule; }

		//ForExpr | QuantifiedExpr | IfExpr | OrExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ForExpr
		public RuleCall getForExprParserRuleCall_0() { return cForExprParserRuleCall_0; }

		//QuantifiedExpr
		public RuleCall getQuantifiedExprParserRuleCall_1() { return cQuantifiedExprParserRuleCall_1; }

		//IfExpr
		public RuleCall getIfExprParserRuleCall_2() { return cIfExprParserRuleCall_2; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_3() { return cOrExprParserRuleCall_3; }
	}

	public class ForExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cForSimpleForClauseParserRuleCall_0_0 = (RuleCall)cForAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnExprSingleParserRuleCall_2_0 = (RuleCall)cReturnAssignment_2.eContents().get(0);
		
		//ForExpr:
		//	for=SimpleForClause "return" return=ExprSingle;
		public ParserRule getRule() { return rule; }

		//for=SimpleForClause "return" return=ExprSingle
		public Group getGroup() { return cGroup; }

		//for=SimpleForClause
		public Assignment getForAssignment_0() { return cForAssignment_0; }

		//SimpleForClause
		public RuleCall getForSimpleForClauseParserRuleCall_0_0() { return cForSimpleForClauseParserRuleCall_0_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//return=ExprSingle
		public Assignment getReturnAssignment_2() { return cReturnAssignment_2; }

		//ExprSingle
		public RuleCall getReturnExprSingleParserRuleCall_2_0() { return cReturnExprSingleParserRuleCall_2_0; }
	}

	public class SimpleForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExprSingleParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDollarSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVariableAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_5_2_0 = (RuleCall)cVariableAssignment_5_2.eContents().get(0);
		private final Keyword cInKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExprSingleParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		
		//SimpleForClause:
		//	"for" "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in" expression+=ExprSingle)*;
		public ParserRule getRule() { return rule; }

		//"for" "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in" expression+=ExprSingle)*
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//variable+=VarName
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_2_0() { return cVariableVarNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_4_0() { return cExpressionExprSingleParserRuleCall_4_0; }

		//("," "$" variable+=VarName "in" expression+=ExprSingle)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"$"
		public Keyword getDollarSignKeyword_5_1() { return cDollarSignKeyword_5_1; }

		//variable+=VarName
		public Assignment getVariableAssignment_5_2() { return cVariableAssignment_5_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_5_2_0() { return cVariableVarNameParserRuleCall_5_2_0; }

		//"in"
		public Keyword getInKeyword_5_3() { return cInKeyword_5_3; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_5_4_0() { return cExpressionExprSingleParserRuleCall_5_4_0; }
	}

	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarName");
		private final RuleCall cQNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VarName:
		//	QName;
		public ParserRule getRule() { return rule; }

		//QName
		public RuleCall getQNameParserRuleCall() { return cQNameParserRuleCall; }
	}

	public class QuantifiedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifiedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cQuantifierAlternatives_0_0 = (Alternatives)cQuantifierAssignment_0.eContents().get(0);
		private final Keyword cQuantifierSomeKeyword_0_0_0 = (Keyword)cQuantifierAlternatives_0_0.eContents().get(0);
		private final Keyword cQuantifierEveryKeyword_0_0_1 = (Keyword)cQuantifierAlternatives_0_0.eContents().get(1);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExprSingleParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDollarSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVariableAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVariableVarNameParserRuleCall_5_2_0 = (RuleCall)cVariableAssignment_5_2.eContents().get(0);
		private final Keyword cInKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExprSingleParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		private final Keyword cSatisfiesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSatisfiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSatisfiesExprSingleParserRuleCall_7_0 = (RuleCall)cSatisfiesAssignment_7.eContents().get(0);
		
		//QuantifiedExpr:
		//	quantifier=("some" | "every") "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in"
		//	expression+=ExprSingle)* "satisfies" satisfies=ExprSingle;
		public ParserRule getRule() { return rule; }

		//quantifier=("some" | "every") "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in"
		//expression+=ExprSingle)* "satisfies" satisfies=ExprSingle
		public Group getGroup() { return cGroup; }

		//quantifier=("some" | "every")
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }

		//"some" | "every"
		public Alternatives getQuantifierAlternatives_0_0() { return cQuantifierAlternatives_0_0; }

		//"some"
		public Keyword getQuantifierSomeKeyword_0_0_0() { return cQuantifierSomeKeyword_0_0_0; }

		//"every"
		public Keyword getQuantifierEveryKeyword_0_0_1() { return cQuantifierEveryKeyword_0_0_1; }

		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }

		//variable+=VarName
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_2_0() { return cVariableVarNameParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_4_0() { return cExpressionExprSingleParserRuleCall_4_0; }

		//("," "$" variable+=VarName "in" expression+=ExprSingle)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//"$"
		public Keyword getDollarSignKeyword_5_1() { return cDollarSignKeyword_5_1; }

		//variable+=VarName
		public Assignment getVariableAssignment_5_2() { return cVariableAssignment_5_2; }

		//VarName
		public RuleCall getVariableVarNameParserRuleCall_5_2_0() { return cVariableVarNameParserRuleCall_5_2_0; }

		//"in"
		public Keyword getInKeyword_5_3() { return cInKeyword_5_3; }

		//expression+=ExprSingle
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }

		//ExprSingle
		public RuleCall getExpressionExprSingleParserRuleCall_5_4_0() { return cExpressionExprSingleParserRuleCall_5_4_0; }

		//"satisfies"
		public Keyword getSatisfiesKeyword_6() { return cSatisfiesKeyword_6; }

		//satisfies=ExprSingle
		public Assignment getSatisfiesAssignment_7() { return cSatisfiesAssignment_7; }

		//ExprSingle
		public RuleCall getSatisfiesExprSingleParserRuleCall_7_0() { return cSatisfiesExprSingleParserRuleCall_7_0; }
	}

	public class IfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfExprParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExprSingleParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseExprSingleParserRuleCall_7_0 = (RuleCall)cElseAssignment_7.eContents().get(0);
		
		//IfExpr:
		//	"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=Expr
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//Expr
		public RuleCall getIfExprParserRuleCall_2_0() { return cIfExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//then=ExprSingle
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//ExprSingle
		public RuleCall getThenExprSingleParserRuleCall_5_0() { return cThenExprSingleParserRuleCall_5_0; }

		//"else"
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }

		//else=ExprSingle
		public Assignment getElseAssignment_7() { return cElseAssignment_7; }

		//ExprSingle
		public RuleCall getElseExprSingleParserRuleCall_7_0() { return cElseExprSingleParserRuleCall_7_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrAndExprParserRuleCall_0_0 = (RuleCall)cOrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrAndExprParserRuleCall_1_1_0 = (RuleCall)cOrAssignment_1_1.eContents().get(0);
		
		//OrExpr:
		//	or+=AndExpr ("or" or+=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//or+=AndExpr ("or" or+=AndExpr)*
		public Group getGroup() { return cGroup; }

		//or+=AndExpr
		public Assignment getOrAssignment_0() { return cOrAssignment_0; }

		//AndExpr
		public RuleCall getOrAndExprParserRuleCall_0_0() { return cOrAndExprParserRuleCall_0_0; }

		//("or" or+=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//or+=AndExpr
		public Assignment getOrAssignment_1_1() { return cOrAssignment_1_1; }

		//AndExpr
		public RuleCall getOrAndExprParserRuleCall_1_1_0() { return cOrAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAndComparisonExprParserRuleCall_0_0 = (RuleCall)cAndAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndComparisonExprParserRuleCall_1_1_0 = (RuleCall)cAndAssignment_1_1.eContents().get(0);
		
		//AndExpr:
		//	and+=ComparisonExpr ("and" and+=ComparisonExpr)*;
		public ParserRule getRule() { return rule; }

		//and+=ComparisonExpr ("and" and+=ComparisonExpr)*
		public Group getGroup() { return cGroup; }

		//and+=ComparisonExpr
		public Assignment getAndAssignment_0() { return cAndAssignment_0; }

		//ComparisonExpr
		public RuleCall getAndComparisonExprParserRuleCall_0_0() { return cAndComparisonExprParserRuleCall_0_0; }

		//("and" and+=ComparisonExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//and+=ComparisonExpr
		public Assignment getAndAssignment_1_1() { return cAndAssignment_1_1; }

		//ComparisonExpr
		public RuleCall getAndComparisonExprParserRuleCall_1_1_0() { return cAndComparisonExprParserRuleCall_1_1_0; }
	}

	public class ComparisonExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1RangeExprParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueValueCompEnumRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cGeneralAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGeneralGeneralCompEnumRuleCall_1_1_0 = (RuleCall)cGeneralAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cNodeAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cNodeNodeCompEnumRuleCall_1_2_0_0 = (RuleCall)cNodeAssignment_1_2_0.eContents().get(0);
		private final Assignment cRangeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRangeRangeExprParserRuleCall_1_2_1_0 = (RuleCall)cRangeAssignment_1_2_1.eContents().get(0);
		
		//ComparisonExpr:
		//	operand1=RangeExpr (value=ValueComp | general=GeneralComp | node=NodeComp range=RangeExpr)?;
		public ParserRule getRule() { return rule; }

		//operand1=RangeExpr (value=ValueComp | general=GeneralComp | node=NodeComp range=RangeExpr)?
		public Group getGroup() { return cGroup; }

		//operand1=RangeExpr
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//RangeExpr
		public RuleCall getOperand1RangeExprParserRuleCall_0_0() { return cOperand1RangeExprParserRuleCall_0_0; }

		//(value=ValueComp | general=GeneralComp | node=NodeComp range=RangeExpr)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=ValueComp
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//ValueComp
		public RuleCall getValueValueCompEnumRuleCall_1_0_0() { return cValueValueCompEnumRuleCall_1_0_0; }

		//general=GeneralComp
		public Assignment getGeneralAssignment_1_1() { return cGeneralAssignment_1_1; }

		//GeneralComp
		public RuleCall getGeneralGeneralCompEnumRuleCall_1_1_0() { return cGeneralGeneralCompEnumRuleCall_1_1_0; }

		//node=NodeComp range=RangeExpr
		public Group getGroup_1_2() { return cGroup_1_2; }

		//node=NodeComp
		public Assignment getNodeAssignment_1_2_0() { return cNodeAssignment_1_2_0; }

		//NodeComp
		public RuleCall getNodeNodeCompEnumRuleCall_1_2_0_0() { return cNodeNodeCompEnumRuleCall_1_2_0_0; }

		//range=RangeExpr
		public Assignment getRangeAssignment_1_2_1() { return cRangeAssignment_1_2_1; }

		//RangeExpr
		public RuleCall getRangeRangeExprParserRuleCall_1_2_1_0() { return cRangeRangeExprParserRuleCall_1_2_1_0; }
	}

	public class RangeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeAdditiveExprParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cToAdditiveExprParserRuleCall_1_1_0 = (RuleCall)cToAssignment_1_1.eContents().get(0);
		
		//RangeExpr:
		//	range=AdditiveExpr ("to" to=AdditiveExpr)?;
		public ParserRule getRule() { return rule; }

		//range=AdditiveExpr ("to" to=AdditiveExpr)?
		public Group getGroup() { return cGroup; }

		//range=AdditiveExpr
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }

		//AdditiveExpr
		public RuleCall getRangeAdditiveExprParserRuleCall_0_0() { return cRangeAdditiveExprParserRuleCall_0_0; }

		//("to" to=AdditiveExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//to=AdditiveExpr
		public Assignment getToAssignment_1_1() { return cToAssignment_1_1; }

		//AdditiveExpr
		public RuleCall getToAdditiveExprParserRuleCall_1_1_0() { return cToAdditiveExprParserRuleCall_1_1_0; }
	}

	public class AdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAddAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAddMultiplicativeExprParserRuleCall_0_0 = (RuleCall)cAddAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorAdditiveEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cAddAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddMultiplicativeExprParserRuleCall_1_1_0 = (RuleCall)cAddAssignment_1_1.eContents().get(0);
		
		//AdditiveExpr:
		//	add+=MultiplicativeExpr (operator+=Additive add+=MultiplicativeExpr)*;
		public ParserRule getRule() { return rule; }

		//add+=MultiplicativeExpr (operator+=Additive add+=MultiplicativeExpr)*
		public Group getGroup() { return cGroup; }

		//add+=MultiplicativeExpr
		public Assignment getAddAssignment_0() { return cAddAssignment_0; }

		//MultiplicativeExpr
		public RuleCall getAddMultiplicativeExprParserRuleCall_0_0() { return cAddMultiplicativeExprParserRuleCall_0_0; }

		//(operator+=Additive add+=MultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=Additive
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Additive
		public RuleCall getOperatorAdditiveEnumRuleCall_1_0_0() { return cOperatorAdditiveEnumRuleCall_1_0_0; }

		//add+=MultiplicativeExpr
		public Assignment getAddAssignment_1_1() { return cAddAssignment_1_1; }

		//MultiplicativeExpr
		public RuleCall getAddMultiplicativeExprParserRuleCall_1_1_0() { return cAddMultiplicativeExprParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplyUnionExprParserRuleCall_0_0 = (RuleCall)cMultiplyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorMultiplicativeEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cMultiplyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplyUnionExprParserRuleCall_1_1_0 = (RuleCall)cMultiplyAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpr:
		//	multiply+=UnionExpr (operator+=Multiplicative multiply+=UnionExpr)*;
		public ParserRule getRule() { return rule; }

		//multiply+=UnionExpr (operator+=Multiplicative multiply+=UnionExpr)*
		public Group getGroup() { return cGroup; }

		//multiply+=UnionExpr
		public Assignment getMultiplyAssignment_0() { return cMultiplyAssignment_0; }

		//UnionExpr
		public RuleCall getMultiplyUnionExprParserRuleCall_0_0() { return cMultiplyUnionExprParserRuleCall_0_0; }

		//(operator+=Multiplicative multiply+=UnionExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=Multiplicative
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Multiplicative
		public RuleCall getOperatorMultiplicativeEnumRuleCall_1_0_0() { return cOperatorMultiplicativeEnumRuleCall_1_0_0; }

		//multiply+=UnionExpr
		public Assignment getMultiplyAssignment_1_1() { return cMultiplyAssignment_1_1; }

		//UnionExpr
		public RuleCall getMultiplyUnionExprParserRuleCall_1_1_0() { return cMultiplyUnionExprParserRuleCall_1_1_0; }
	}

	public class UnionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnionIntersectExceptExprParserRuleCall_0_0 = (RuleCall)cUnionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorUnionEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cUnionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnionIntersectExceptExprParserRuleCall_1_1_0 = (RuleCall)cUnionAssignment_1_1.eContents().get(0);
		
		//UnionExpr:
		//	union+=IntersectExceptExpr (operator+=Union union+=IntersectExceptExpr)*;
		public ParserRule getRule() { return rule; }

		//union+=IntersectExceptExpr (operator+=Union union+=IntersectExceptExpr)*
		public Group getGroup() { return cGroup; }

		//union+=IntersectExceptExpr
		public Assignment getUnionAssignment_0() { return cUnionAssignment_0; }

		//IntersectExceptExpr
		public RuleCall getUnionIntersectExceptExprParserRuleCall_0_0() { return cUnionIntersectExceptExprParserRuleCall_0_0; }

		//(operator+=Union union+=IntersectExceptExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=Union
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Union
		public RuleCall getOperatorUnionEnumRuleCall_1_0_0() { return cOperatorUnionEnumRuleCall_1_0_0; }

		//union+=IntersectExceptExpr
		public Assignment getUnionAssignment_1_1() { return cUnionAssignment_1_1; }

		//IntersectExceptExpr
		public RuleCall getUnionIntersectExceptExprParserRuleCall_1_1_0() { return cUnionIntersectExceptExprParserRuleCall_1_1_0; }
	}

	public class IntersectExceptExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntersectExceptExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntersectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntersectInstanceofExprParserRuleCall_0_0 = (RuleCall)cIntersectAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorIntersectExceptEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cIntersectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIntersectInstanceofExprParserRuleCall_1_1_0 = (RuleCall)cIntersectAssignment_1_1.eContents().get(0);
		
		//IntersectExceptExpr:
		//	intersect+=InstanceofExpr (operator+=IntersectExcept intersect+=InstanceofExpr)*;
		public ParserRule getRule() { return rule; }

		//intersect+=InstanceofExpr (operator+=IntersectExcept intersect+=InstanceofExpr)*
		public Group getGroup() { return cGroup; }

		//intersect+=InstanceofExpr
		public Assignment getIntersectAssignment_0() { return cIntersectAssignment_0; }

		//InstanceofExpr
		public RuleCall getIntersectInstanceofExprParserRuleCall_0_0() { return cIntersectInstanceofExprParserRuleCall_0_0; }

		//(operator+=IntersectExcept intersect+=InstanceofExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=IntersectExcept
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//IntersectExcept
		public RuleCall getOperatorIntersectExceptEnumRuleCall_1_0_0() { return cOperatorIntersectExceptEnumRuleCall_1_0_0; }

		//intersect+=InstanceofExpr
		public Assignment getIntersectAssignment_1_1() { return cIntersectAssignment_1_1; }

		//InstanceofExpr
		public RuleCall getIntersectInstanceofExprParserRuleCall_1_1_0() { return cIntersectInstanceofExprParserRuleCall_1_1_0; }
	}

	public class InstanceofExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceofExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTreatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTreatTreatExprParserRuleCall_0_0 = (RuleCall)cTreatAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInstanceOfAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInstanceOfSequenceTypeParserRuleCall_1_2_0 = (RuleCall)cInstanceOfAssignment_1_2.eContents().get(0);
		
		//InstanceofExpr:
		//	treat=TreatExpr ("instance" "of" instanceOf=SequenceType)?;
		public ParserRule getRule() { return rule; }

		//treat=TreatExpr ("instance" "of" instanceOf=SequenceType)?
		public Group getGroup() { return cGroup; }

		//treat=TreatExpr
		public Assignment getTreatAssignment_0() { return cTreatAssignment_0; }

		//TreatExpr
		public RuleCall getTreatTreatExprParserRuleCall_0_0() { return cTreatTreatExprParserRuleCall_0_0; }

		//("instance" "of" instanceOf=SequenceType)?
		public Group getGroup_1() { return cGroup_1; }

		//"instance"
		public Keyword getInstanceKeyword_1_0() { return cInstanceKeyword_1_0; }

		//"of"
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }

		//instanceOf=SequenceType
		public Assignment getInstanceOfAssignment_1_2() { return cInstanceOfAssignment_1_2; }

		//SequenceType
		public RuleCall getInstanceOfSequenceTypeParserRuleCall_1_2_0() { return cInstanceOfSequenceTypeParserRuleCall_1_2_0; }
	}

	public class TreatExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TreatExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCastableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCastableCastableExprParserRuleCall_0_0 = (RuleCall)cCastableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTreatKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTreatAsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTreatAsSequenceTypeParserRuleCall_1_2_0 = (RuleCall)cTreatAsAssignment_1_2.eContents().get(0);
		
		//TreatExpr:
		//	castable=CastableExpr ("treat" "as" treatAs=SequenceType)?;
		public ParserRule getRule() { return rule; }

		//castable=CastableExpr ("treat" "as" treatAs=SequenceType)?
		public Group getGroup() { return cGroup; }

		//castable=CastableExpr
		public Assignment getCastableAssignment_0() { return cCastableAssignment_0; }

		//CastableExpr
		public RuleCall getCastableCastableExprParserRuleCall_0_0() { return cCastableCastableExprParserRuleCall_0_0; }

		//("treat" "as" treatAs=SequenceType)?
		public Group getGroup_1() { return cGroup_1; }

		//"treat"
		public Keyword getTreatKeyword_1_0() { return cTreatKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//treatAs=SequenceType
		public Assignment getTreatAsAssignment_1_2() { return cTreatAsAssignment_1_2; }

		//SequenceType
		public RuleCall getTreatAsSequenceTypeParserRuleCall_1_2_0() { return cTreatAsSequenceTypeParserRuleCall_1_2_0; }
	}

	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEmptySequenceKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypeItemTypeParserRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cOccurrenceAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0 = (RuleCall)cOccurrenceAssignment_1_1_1.eContents().get(0);
		
		//SequenceType:
		//	{SequenceType} ("empty-sequence" "(" ")" | type=ItemType occurrence=OccurrenceIndicator?);
		public ParserRule getRule() { return rule; }

		//{SequenceType} ("empty-sequence" "(" ")" | type=ItemType occurrence=OccurrenceIndicator?)
		public Group getGroup() { return cGroup; }

		//{SequenceType}
		public Action getSequenceTypeAction_0() { return cSequenceTypeAction_0; }

		//"empty-sequence" "(" ")" | type=ItemType occurrence=OccurrenceIndicator?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"empty-sequence" "(" ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"empty-sequence"
		public Keyword getEmptySequenceKeyword_1_0_0() { return cEmptySequenceKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//type=ItemType occurrence=OccurrenceIndicator?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//type=ItemType
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }

		//ItemType
		public RuleCall getTypeItemTypeParserRuleCall_1_1_0_0() { return cTypeItemTypeParserRuleCall_1_1_0_0; }

		//occurrence=OccurrenceIndicator?
		public Assignment getOccurrenceAssignment_1_1_1() { return cOccurrenceAssignment_1_1_1; }

		//OccurrenceIndicator
		public RuleCall getOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0() { return cOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0; }
	}

	public class ItemTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cItemTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cKindTestAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cKindTestKindTestParserRuleCall_1_0_0 = (RuleCall)cKindTestAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cItemKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cAtomicTypeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cAtomicTypeAtomicTypeParserRuleCall_1_2_0 = (RuleCall)cAtomicTypeAssignment_1_2.eContents().get(0);
		
		//ItemType:
		//	{ItemType} (kindTest=KindTest | "item" "(" ")" | atomicType=AtomicType);
		public ParserRule getRule() { return rule; }

		//{ItemType} (kindTest=KindTest | "item" "(" ")" | atomicType=AtomicType)
		public Group getGroup() { return cGroup; }

		//{ItemType}
		public Action getItemTypeAction_0() { return cItemTypeAction_0; }

		//kindTest=KindTest | "item" "(" ")" | atomicType=AtomicType
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//kindTest=KindTest
		public Assignment getKindTestAssignment_1_0() { return cKindTestAssignment_1_0; }

		//KindTest
		public RuleCall getKindTestKindTestParserRuleCall_1_0_0() { return cKindTestKindTestParserRuleCall_1_0_0; }

		//"item" "(" ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"item"
		public Keyword getItemKeyword_1_1_0() { return cItemKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }

		//atomicType=AtomicType
		public Assignment getAtomicTypeAssignment_1_2() { return cAtomicTypeAssignment_1_2; }

		//AtomicType
		public RuleCall getAtomicTypeAtomicTypeParserRuleCall_1_2_0() { return cAtomicTypeAtomicTypeParserRuleCall_1_2_0; }
	}

	public class AtomicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicType");
		private final RuleCall cQNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AtomicType:
		//	QName;
		public ParserRule getRule() { return rule; }

		//QName
		public RuleCall getQNameParserRuleCall() { return cQNameParserRuleCall; }
	}

	public class CastableExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastableExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCastAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCastCastExprParserRuleCall_0_0 = (RuleCall)cCastAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCastableKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCastableAsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCastableAsSingleTypeParserRuleCall_1_2_0 = (RuleCall)cCastableAsAssignment_1_2.eContents().get(0);
		
		//CastableExpr:
		//	cast=CastExpr ("castable" "as" castableAs=SingleType)?;
		public ParserRule getRule() { return rule; }

		//cast=CastExpr ("castable" "as" castableAs=SingleType)?
		public Group getGroup() { return cGroup; }

		//cast=CastExpr
		public Assignment getCastAssignment_0() { return cCastAssignment_0; }

		//CastExpr
		public RuleCall getCastCastExprParserRuleCall_0_0() { return cCastCastExprParserRuleCall_0_0; }

		//("castable" "as" castableAs=SingleType)?
		public Group getGroup_1() { return cGroup_1; }

		//"castable"
		public Keyword getCastableKeyword_1_0() { return cCastableKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//castableAs=SingleType
		public Assignment getCastableAsAssignment_1_2() { return cCastableAsAssignment_1_2; }

		//SingleType
		public RuleCall getCastableAsSingleTypeParserRuleCall_1_2_0() { return cCastableAsSingleTypeParserRuleCall_1_2_0; }
	}

	public class CastExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCastAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCastUnaryExprParserRuleCall_0_0 = (RuleCall)cCastAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCastKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCastAsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCastAsSingleTypeParserRuleCall_1_2_0 = (RuleCall)cCastAsAssignment_1_2.eContents().get(0);
		
		//CastExpr:
		//	cast=UnaryExpr ("cast" "as" castAs=SingleType)?;
		public ParserRule getRule() { return rule; }

		//cast=UnaryExpr ("cast" "as" castAs=SingleType)?
		public Group getGroup() { return cGroup; }

		//cast=UnaryExpr
		public Assignment getCastAssignment_0() { return cCastAssignment_0; }

		//UnaryExpr
		public RuleCall getCastUnaryExprParserRuleCall_0_0() { return cCastUnaryExprParserRuleCall_0_0; }

		//("cast" "as" castAs=SingleType)?
		public Group getGroup_1() { return cGroup_1; }

		//"cast"
		public Keyword getCastKeyword_1_0() { return cCastKeyword_1_0; }

		//"as"
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }

		//castAs=SingleType
		public Assignment getCastAsAssignment_1_2() { return cCastAsAssignment_1_2; }

		//SingleType
		public RuleCall getCastAsSingleTypeParserRuleCall_1_2_0() { return cCastAsSingleTypeParserRuleCall_1_2_0; }
	}

	public class ValueExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpr");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathPathExprParserRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//ValueExpr:
		//	path=PathExpr;
		public ParserRule getRule() { return rule; }

		//path=PathExpr
		public Assignment getPathAssignment() { return cPathAssignment; }

		//PathExpr
		public RuleCall getPathPathExprParserRuleCall_0() { return cPathPathExprParserRuleCall_0; }
	}

	public class SingleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAtomicTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cQuestionQuestionMarkKeyword_1_0 = (Keyword)cQuestionAssignment_1.eContents().get(0);
		
		//SingleType:
		//	type=AtomicType question?="?"?;
		public ParserRule getRule() { return rule; }

		//type=AtomicType question?="?"?
		public Group getGroup() { return cGroup; }

		//type=AtomicType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AtomicType
		public RuleCall getTypeAtomicTypeParserRuleCall_0_0() { return cTypeAtomicTypeParserRuleCall_0_0; }

		//question?="?"?
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//"?"
		public Keyword getQuestionQuestionMarkKeyword_1_0() { return cQuestionQuestionMarkKeyword_1_0; }
	}

	public class RelativePathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelativePathExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStepAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStepStepExprParserRuleCall_0_0 = (RuleCall)cStepAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSeparatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSeparatorSeparatorEnumRuleCall_1_0_0 = (RuleCall)cSeparatorAssignment_1_0.eContents().get(0);
		private final Assignment cStepAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStepStepExprParserRuleCall_1_1_0 = (RuleCall)cStepAssignment_1_1.eContents().get(0);
		
		//RelativePathExpr:
		//	step+=StepExpr (separator+=Separator step+=StepExpr)*;
		public ParserRule getRule() { return rule; }

		//step+=StepExpr (separator+=Separator step+=StepExpr)*
		public Group getGroup() { return cGroup; }

		//step+=StepExpr
		public Assignment getStepAssignment_0() { return cStepAssignment_0; }

		//StepExpr
		public RuleCall getStepStepExprParserRuleCall_0_0() { return cStepStepExprParserRuleCall_0_0; }

		//(separator+=Separator step+=StepExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//separator+=Separator
		public Assignment getSeparatorAssignment_1_0() { return cSeparatorAssignment_1_0; }

		//Separator
		public RuleCall getSeparatorSeparatorEnumRuleCall_1_0_0() { return cSeparatorSeparatorEnumRuleCall_1_0_0; }

		//step+=StepExpr
		public Assignment getStepAssignment_1_1() { return cStepAssignment_1_1; }

		//StepExpr
		public RuleCall getStepStepExprParserRuleCall_1_1_0() { return cStepStepExprParserRuleCall_1_1_0; }
	}

	public class PredicateListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPredicateListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//PredicateList:
		//	{PredicateList} predicate+=Predicate*;
		public ParserRule getRule() { return rule; }

		//{PredicateList} predicate+=Predicate*
		public Group getGroup() { return cGroup; }

		//{PredicateList}
		public Action getPredicateListAction_0() { return cPredicateListAction_0; }

		//predicate+=Predicate*
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateExprParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Predicate:
		//	"[" predicate=Expr "]";
		public ParserRule getRule() { return rule; }

		//"[" predicate=Expr "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//predicate=Expr
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Expr
		public RuleCall getPredicateExprParserRuleCall_1_0() { return cPredicateExprParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ReverseStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReverseStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAxisAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAxisReverseAxisParserRuleCall_0_0_0 = (RuleCall)cAxisAssignment_0_0.eContents().get(0);
		private final Assignment cTestAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTestNodeTestParserRuleCall_0_1_0 = (RuleCall)cTestAssignment_0_1.eContents().get(0);
		private final Assignment cAbbrevAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAbbrevAbbrevReverseStepParserRuleCall_1_0 = (RuleCall)cAbbrevAssignment_1.eContents().get(0);
		
		//ReverseStep:
		//	axis=ReverseAxis test=NodeTest | abbrev=AbbrevReverseStep;
		public ParserRule getRule() { return rule; }

		//axis=ReverseAxis test=NodeTest | abbrev=AbbrevReverseStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//axis=ReverseAxis test=NodeTest
		public Group getGroup_0() { return cGroup_0; }

		//axis=ReverseAxis
		public Assignment getAxisAssignment_0_0() { return cAxisAssignment_0_0; }

		//ReverseAxis
		public RuleCall getAxisReverseAxisParserRuleCall_0_0_0() { return cAxisReverseAxisParserRuleCall_0_0_0; }

		//test=NodeTest
		public Assignment getTestAssignment_0_1() { return cTestAssignment_0_1; }

		//NodeTest
		public RuleCall getTestNodeTestParserRuleCall_0_1_0() { return cTestNodeTestParserRuleCall_0_1_0; }

		//abbrev=AbbrevReverseStep
		public Assignment getAbbrevAssignment_1() { return cAbbrevAssignment_1; }

		//AbbrevReverseStep
		public RuleCall getAbbrevAbbrevReverseStepParserRuleCall_1_0() { return cAbbrevAbbrevReverseStepParserRuleCall_1_0; }
	}

	public class ReverseAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReverseAxis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAxisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAxisReverseAxisEnumEnumRuleCall_0_0 = (RuleCall)cAxisAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReverseAxis:
		//	axis=ReverseAxisEnum "::";
		public ParserRule getRule() { return rule; }

		//axis=ReverseAxisEnum "::"
		public Group getGroup() { return cGroup; }

		//axis=ReverseAxisEnum
		public Assignment getAxisAssignment_0() { return cAxisAssignment_0; }

		//ReverseAxisEnum
		public RuleCall getAxisReverseAxisEnumEnumRuleCall_0_0() { return cAxisReverseAxisEnumEnumRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}

	public class AbbrevReverseStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbbrevReverseStep");
		private final Keyword cFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//AbbrevReverseStep:
		//	"..";
		public ParserRule getRule() { return rule; }

		//".."
		public Keyword getFullStopFullStopKeyword() { return cFullStopFullStopKeyword; }
	}

	public class NodeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKindTestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NodeTest:
		//	KindTest | NameTest;
		public ParserRule getRule() { return rule; }

		//KindTest | NameTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//KindTest
		public RuleCall getKindTestParserRuleCall_0() { return cKindTestParserRuleCall_0; }

		//NameTest
		public RuleCall getNameTestParserRuleCall_1() { return cNameTestParserRuleCall_1; }
	}

	public class NameTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWildcardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NameTest:
		//	QName | Wildcard;
		public ParserRule getRule() { return rule; }

		//QName | Wildcard
		public Alternatives getAlternatives() { return cAlternatives; }

		//QName
		public RuleCall getQNameParserRuleCall_0() { return cQNameParserRuleCall_0; }

		//Wildcard
		public RuleCall getWildcardParserRuleCall_1() { return cWildcardParserRuleCall_1; }
	}

	public class ForwardStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAxisAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAxisForwardAxisParserRuleCall_0_0_0 = (RuleCall)cAxisAssignment_0_0.eContents().get(0);
		private final Assignment cTestAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTestNodeTestParserRuleCall_0_1_0 = (RuleCall)cTestAssignment_0_1.eContents().get(0);
		private final Assignment cAbbrevAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAbbrevAbbrevForwardStepParserRuleCall_1_0 = (RuleCall)cAbbrevAssignment_1.eContents().get(0);
		
		//ForwardStep:
		//	axis=ForwardAxis test=NodeTest | abbrev=AbbrevForwardStep;
		public ParserRule getRule() { return rule; }

		//axis=ForwardAxis test=NodeTest | abbrev=AbbrevForwardStep
		public Alternatives getAlternatives() { return cAlternatives; }

		//axis=ForwardAxis test=NodeTest
		public Group getGroup_0() { return cGroup_0; }

		//axis=ForwardAxis
		public Assignment getAxisAssignment_0_0() { return cAxisAssignment_0_0; }

		//ForwardAxis
		public RuleCall getAxisForwardAxisParserRuleCall_0_0_0() { return cAxisForwardAxisParserRuleCall_0_0_0; }

		//test=NodeTest
		public Assignment getTestAssignment_0_1() { return cTestAssignment_0_1; }

		//NodeTest
		public RuleCall getTestNodeTestParserRuleCall_0_1_0() { return cTestNodeTestParserRuleCall_0_1_0; }

		//abbrev=AbbrevForwardStep
		public Assignment getAbbrevAssignment_1() { return cAbbrevAssignment_1; }

		//AbbrevForwardStep
		public RuleCall getAbbrevAbbrevForwardStepParserRuleCall_1_0() { return cAbbrevAbbrevForwardStepParserRuleCall_1_0; }
	}

	public class ForwardAxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardAxis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAxisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAxisForwardAxisEnumEnumRuleCall_0_0 = (RuleCall)cAxisAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ForwardAxis:
		//	axis=ForwardAxisEnum "::";
		public ParserRule getRule() { return rule; }

		//axis=ForwardAxisEnum "::"
		public Group getGroup() { return cGroup; }

		//axis=ForwardAxisEnum
		public Assignment getAxisAssignment_0() { return cAxisAssignment_0; }

		//ForwardAxisEnum
		public RuleCall getAxisForwardAxisEnumEnumRuleCall_0_0() { return cAxisForwardAxisEnumEnumRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}

	public class AbbrevForwardStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbbrevForwardStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAtCommercialAtKeyword_0_0 = (Keyword)cAtAssignment_0.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestNodeTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		
		//AbbrevForwardStep:
		//	at?="@"? test=NodeTest;
		public ParserRule getRule() { return rule; }

		//at?="@"? test=NodeTest
		public Group getGroup() { return cGroup; }

		//at?="@"?
		public Assignment getAtAssignment_0() { return cAtAssignment_0; }

		//"@"
		public Keyword getAtCommercialAtKeyword_0_0() { return cAtCommercialAtKeyword_0_0; }

		//test=NodeTest
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//NodeTest
		public RuleCall getTestNodeTestParserRuleCall_1_0() { return cTestNodeTestParserRuleCall_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	NumericLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//NumericLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}

	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NumericLiteral:
		//	IntegerLiteral | DecimalLiteral | DoubleLiteral;
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | DecimalLiteral | DoubleLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//DecimalLiteral
		public RuleCall getDecimalLiteralParserRuleCall_1() { return cDecimalLiteralParserRuleCall_1; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_2() { return cDoubleLiteralParserRuleCall_2; }
	}

	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarNameParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//VarRef:
		//	"$" var=VarName;
		public ParserRule getRule() { return rule; }

		//"$" var=VarName
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//var=VarName
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//VarName
		public RuleCall getVarVarNameParserRuleCall_1_0() { return cVarVarNameParserRuleCall_1_0; }
	}

	public class ParenthesizedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedExpr:
		//	{ParenthesizedExpr} "(" expression=Expr? ")";
		public ParserRule getRule() { return rule; }

		//{ParenthesizedExpr} "(" expression=Expr? ")"
		public Group getGroup() { return cGroup; }

		//{ParenthesizedExpr}
		public Action getParenthesizedExprAction_0() { return cParenthesizedExprAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expr?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expr
		public RuleCall getExpressionExprParserRuleCall_2_0() { return cExpressionExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ContextItemExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextItemExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextItemExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContextItemExpr:
		//	{ContextItemExpr} ".";
		public ParserRule getRule() { return rule; }

		//{ContextItemExpr} "."
		public Group getGroup() { return cGroup; }

		//{ContextItemExpr}
		public Action getContextItemExprAction_0() { return cContextItemExprAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionQNameParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterExprSingleParserRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterExprSingleParserRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	function=QName "(" (parameter+=ExprSingle ("," parameter+=ExprSingle)*)? ")";
		public ParserRule getRule() { return rule; }

		//function=QName "(" (parameter+=ExprSingle ("," parameter+=ExprSingle)*)? ")"
		public Group getGroup() { return cGroup; }

		//function=QName
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//QName
		public RuleCall getFunctionQNameParserRuleCall_0_0() { return cFunctionQNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameter+=ExprSingle ("," parameter+=ExprSingle)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameter+=ExprSingle
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }

		//ExprSingle
		public RuleCall getParameterExprSingleParserRuleCall_2_0_0() { return cParameterExprSingleParserRuleCall_2_0_0; }

		//("," parameter+=ExprSingle)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameter+=ExprSingle
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }

		//ExprSingle
		public RuleCall getParameterExprSingleParserRuleCall_2_1_1_0() { return cParameterExprSingleParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class KindTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KindTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDocumentTestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeTestParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSchemaElementTestParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSchemaAttributeTestParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPITestParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCommentTestParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTextTestParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAnyKindTestParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//KindTest:
		//	DocumentTest | ElementTest | AttributeTest | SchemaElementTest | SchemaAttributeTest | PITest | CommentTest |
		//	TextTest | AnyKindTest;
		public ParserRule getRule() { return rule; }

		//DocumentTest | ElementTest | AttributeTest | SchemaElementTest | SchemaAttributeTest | PITest | CommentTest | TextTest |
		//AnyKindTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//DocumentTest
		public RuleCall getDocumentTestParserRuleCall_0() { return cDocumentTestParserRuleCall_0; }

		//ElementTest
		public RuleCall getElementTestParserRuleCall_1() { return cElementTestParserRuleCall_1; }

		//AttributeTest
		public RuleCall getAttributeTestParserRuleCall_2() { return cAttributeTestParserRuleCall_2; }

		//SchemaElementTest
		public RuleCall getSchemaElementTestParserRuleCall_3() { return cSchemaElementTestParserRuleCall_3; }

		//SchemaAttributeTest
		public RuleCall getSchemaAttributeTestParserRuleCall_4() { return cSchemaAttributeTestParserRuleCall_4; }

		//PITest
		public RuleCall getPITestParserRuleCall_5() { return cPITestParserRuleCall_5; }

		//CommentTest
		public RuleCall getCommentTestParserRuleCall_6() { return cCommentTestParserRuleCall_6; }

		//TextTest
		public RuleCall getTextTestParserRuleCall_7() { return cTextTestParserRuleCall_7; }

		//AnyKindTest
		public RuleCall getAnyKindTestParserRuleCall_8() { return cAnyKindTestParserRuleCall_8; }
	}

	public class ElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementDeclaration");
		private final RuleCall cElementNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementDeclaration:
		//	ElementName;
		public ParserRule getRule() { return rule; }

		//ElementName
		public RuleCall getElementNameParserRuleCall() { return cElementNameParserRuleCall; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final RuleCall cQNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AttributeName:
		//	QName;
		public ParserRule getRule() { return rule; }

		//QName
		public RuleCall getQNameParserRuleCall() { return cQNameParserRuleCall; }
	}

	public class ElementNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementName");
		private final RuleCall cQNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementName:
		//	QName;
		public ParserRule getRule() { return rule; }

		//QName
		public RuleCall getQNameParserRuleCall() { return cQNameParserRuleCall; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final RuleCall cQNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeName:
		//	QName;
		public ParserRule getRule() { return rule; }

		//QName
		public RuleCall getQNameParserRuleCall() { return cQNameParserRuleCall; }
	}

	public class AnyKindTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyKindTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyKindTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNodeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AnyKindTest:
		//	{AnyKindTest} ("node" "(" ")");
		public ParserRule getRule() { return rule; }

		//{AnyKindTest} ("node" "(" ")")
		public Group getGroup() { return cGroup; }

		//{AnyKindTest}
		public Action getAnyKindTestAction_0() { return cAnyKindTestAction_0; }

		//"node" "(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"node"
		public Keyword getNodeKeyword_1_0() { return cNodeKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class DocumentTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocumentTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDocumentNodeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cElementTestAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cElementTestElementTestParserRuleCall_1_2_0_0 = (RuleCall)cElementTestAssignment_1_2_0.eContents().get(0);
		private final Assignment cSchemaElementTestAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0 = (RuleCall)cSchemaElementTestAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//DocumentTest:
		//	{DocumentTest} ("document-node" "(" (elementTest=ElementTest | schemaElementTest=SchemaElementTest)? ")");
		public ParserRule getRule() { return rule; }

		//{DocumentTest} ("document-node" "(" (elementTest=ElementTest | schemaElementTest=SchemaElementTest)? ")")
		public Group getGroup() { return cGroup; }

		//{DocumentTest}
		public Action getDocumentTestAction_0() { return cDocumentTestAction_0; }

		//"document-node" "(" (elementTest=ElementTest | schemaElementTest=SchemaElementTest)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"document-node"
		public Keyword getDocumentNodeKeyword_1_0() { return cDocumentNodeKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(elementTest=ElementTest | schemaElementTest=SchemaElementTest)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//elementTest=ElementTest
		public Assignment getElementTestAssignment_1_2_0() { return cElementTestAssignment_1_2_0; }

		//ElementTest
		public RuleCall getElementTestElementTestParserRuleCall_1_2_0_0() { return cElementTestElementTestParserRuleCall_1_2_0_0; }

		//schemaElementTest=SchemaElementTest
		public Assignment getSchemaElementTestAssignment_1_2_1() { return cSchemaElementTestAssignment_1_2_1; }

		//SchemaElementTest
		public RuleCall getSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0() { return cSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TextTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TextTest:
		//	{TextTest} ("text" "(" ")");
		public ParserRule getRule() { return rule; }

		//{TextTest} ("text" "(" ")")
		public Group getGroup() { return cGroup; }

		//{TextTest}
		public Action getTextTestAction_0() { return cTextTestAction_0; }

		//"text" "(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"text"
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class CommentTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommentTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//CommentTest:
		//	{CommentTest} ("comment" "(" ")");
		public ParserRule getRule() { return rule; }

		//{CommentTest} ("comment" "(" ")")
		public Group getGroup() { return cGroup; }

		//{CommentTest}
		public Action getCommentTestAction_0() { return cCommentTestAction_0; }

		//"comment" "(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//"comment"
		public Keyword getCommentKeyword_1_0() { return cCommentKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class PITestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PITest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPITestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cProcessingInstructionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cNameNCNAMETerminalRuleCall_1_2_0_0 = (RuleCall)cNameAssignment_1_2_0.eContents().get(0);
		private final Assignment cStringAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cStringStringLiteralParserRuleCall_1_2_1_0 = (RuleCall)cStringAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PITest:
		//	{PITest} ("processing-instruction" "(" (name=NCNAME | string=StringLiteral)? ")");
		public ParserRule getRule() { return rule; }

		//{PITest} ("processing-instruction" "(" (name=NCNAME | string=StringLiteral)? ")")
		public Group getGroup() { return cGroup; }

		//{PITest}
		public Action getPITestAction_0() { return cPITestAction_0; }

		//"processing-instruction" "(" (name=NCNAME | string=StringLiteral)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"processing-instruction"
		public Keyword getProcessingInstructionKeyword_1_0() { return cProcessingInstructionKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(name=NCNAME | string=StringLiteral)?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//name=NCNAME
		public Assignment getNameAssignment_1_2_0() { return cNameAssignment_1_2_0; }

		//NCNAME
		public RuleCall getNameNCNAMETerminalRuleCall_1_2_0_0() { return cNameNCNAMETerminalRuleCall_1_2_0_0; }

		//string=StringLiteral
		public Assignment getStringAssignment_1_2_1() { return cStringAssignment_1_2_1; }

		//StringLiteral
		public RuleCall getStringStringLiteralParserRuleCall_1_2_1_0() { return cStringStringLiteralParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class SchemaAttributeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemaAttributeTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeDeclarationAttributeDeclarationParserRuleCall_2_0 = (RuleCall)cAttributeDeclarationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaAttributeTest:
		//	"schema-attribute" "(" attributeDeclaration=AttributeDeclaration ")";
		public ParserRule getRule() { return rule; }

		//"schema-attribute" "(" attributeDeclaration=AttributeDeclaration ")"
		public Group getGroup() { return cGroup; }

		//"schema-attribute"
		public Keyword getSchemaAttributeKeyword_0() { return cSchemaAttributeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attributeDeclaration=AttributeDeclaration
		public Assignment getAttributeDeclarationAssignment_2() { return cAttributeDeclarationAssignment_2; }

		//AttributeDeclaration
		public RuleCall getAttributeDeclarationAttributeDeclarationParserRuleCall_2_0() { return cAttributeDeclarationAttributeDeclarationParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDeclaration");
		private final RuleCall cAttributeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AttributeDeclaration:
		//	AttributeName;
		public ParserRule getRule() { return rule; }

		//AttributeName
		public RuleCall getAttributeNameParserRuleCall() { return cAttributeNameParserRuleCall; }
	}

	public class SchemaElementTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SchemaElementTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementDeclarationElementDeclarationParserRuleCall_2_0 = (RuleCall)cElementDeclarationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaElementTest:
		//	"schema-element" "(" elementDeclaration=ElementDeclaration ")";
		public ParserRule getRule() { return rule; }

		//"schema-element" "(" elementDeclaration=ElementDeclaration ")"
		public Group getGroup() { return cGroup; }

		//"schema-element"
		public Keyword getSchemaElementKeyword_0() { return cSchemaElementKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//elementDeclaration=ElementDeclaration
		public Assignment getElementDeclarationAssignment_2() { return cElementDeclarationAssignment_2; }

		//ElementDeclaration
		public RuleCall getElementDeclarationElementDeclarationParserRuleCall_2_0() { return cElementDeclarationElementDeclarationParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpr");
		private final Assignment cUnaryAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnaryValueExprParserRuleCall_0 = (RuleCall)cUnaryAssignment.eContents().get(0);
		
		/////////////////////////////////expressions with problems
		//UnaryExpr: // operator+=Additive*  // does not parse
		//	unary=ValueExpr;
		public ParserRule getRule() { return rule; }

		//// operator+=Additive*  // does not parse
		//unary=ValueExpr
		public Assignment getUnaryAssignment() { return cUnaryAssignment; }

		//ValueExpr
		public RuleCall getUnaryValueExprParserRuleCall_0() { return cUnaryValueExprParserRuleCall_0; }
	}

	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Wildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrefixAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrefixNCNAMETerminalRuleCall_0_0_0 = (RuleCall)cPrefixAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAnyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAnyAsteriskKeyword_1_0 = (Keyword)cAnyAssignment_1.eContents().get(0);
		
		//Wildcard:
		//	prefix=NCNAME ":" "*" //	| ("*" ":" localName=NCNAME)
		//	// not parsing this 
		//	| any="*";
		public ParserRule getRule() { return rule; }

		//prefix=NCNAME ":" "*" //	| ("*" ":" localName=NCNAME)
		//// not parsing this 
		//| any="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//prefix=NCNAME ":" "*"
		public Group getGroup_0() { return cGroup_0; }

		//prefix=NCNAME
		public Assignment getPrefixAssignment_0_0() { return cPrefixAssignment_0_0; }

		//NCNAME
		public RuleCall getPrefixNCNAMETerminalRuleCall_0_0_0() { return cPrefixNCNAMETerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_0_2() { return cAsteriskKeyword_0_2; }

		//any="*"
		public Assignment getAnyAssignment_1() { return cAnyAssignment_1; }

		//"*"
		public Keyword getAnyAsteriskKeyword_1_0() { return cAnyAsteriskKeyword_1_0; }
	}

	public class ElementTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElementxKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cElementNameOrWildcardAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0 = (RuleCall)cElementNameOrWildcardAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_2_1_1_0 = (RuleCall)cTypeNameAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cQuestionAssignment_1_2_1_2 = (Assignment)cGroup_1_2_1.eContents().get(2);
		private final Keyword cQuestionQuestionMarkKeyword_1_2_1_2_0 = (Keyword)cQuestionAssignment_1_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// following misinterprets use of "element"		
		//ElementTest:
		//	{ElementTest} ("elementx" "(" (elementNameOrWildcard=ElementNameOrWildcard ("," typeName=TypeName question?="?"?)?)?
		//	")");
		public ParserRule getRule() { return rule; }

		//{ElementTest} ("elementx" "(" (elementNameOrWildcard=ElementNameOrWildcard ("," typeName=TypeName question?="?"?)?)?
		//")")
		public Group getGroup() { return cGroup; }

		//{ElementTest}
		public Action getElementTestAction_0() { return cElementTestAction_0; }

		//"elementx" "(" (elementNameOrWildcard=ElementNameOrWildcard ("," typeName=TypeName question?="?"?)?)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"elementx"
		public Keyword getElementxKeyword_1_0() { return cElementxKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(elementNameOrWildcard=ElementNameOrWildcard ("," typeName=TypeName question?="?"?)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//elementNameOrWildcard=ElementNameOrWildcard
		public Assignment getElementNameOrWildcardAssignment_1_2_0() { return cElementNameOrWildcardAssignment_1_2_0; }

		//ElementNameOrWildcard
		public RuleCall getElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0() { return cElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0; }

		//("," typeName=TypeName question?="?"?)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_2_1_1() { return cTypeNameAssignment_1_2_1_1; }

		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_2_1_1_0() { return cTypeNameTypeNameParserRuleCall_1_2_1_1_0; }

		//question?="?"?
		public Assignment getQuestionAssignment_1_2_1_2() { return cQuestionAssignment_1_2_1_2; }

		//"?"
		public Keyword getQuestionQuestionMarkKeyword_1_2_1_2_0() { return cQuestionQuestionMarkKeyword_1_2_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class AttributeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAttributexKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cAttributeNameOrWildcardAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0 = (RuleCall)cAttributeNameOrWildcardAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_2_1_1_0 = (RuleCall)cTypeNameAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// following misinterprets use of "attribute"		
		//AttributeTest:
		//	{AttributeTest} ("attributex" "(" (attributeNameOrWildcard=AttribNameOrWildcard ("," typeName=TypeName)?)? ")");
		public ParserRule getRule() { return rule; }

		//{AttributeTest} ("attributex" "(" (attributeNameOrWildcard=AttribNameOrWildcard ("," typeName=TypeName)?)? ")")
		public Group getGroup() { return cGroup; }

		//{AttributeTest}
		public Action getAttributeTestAction_0() { return cAttributeTestAction_0; }

		//"attributex" "(" (attributeNameOrWildcard=AttribNameOrWildcard ("," typeName=TypeName)?)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"attributex"
		public Keyword getAttributexKeyword_1_0() { return cAttributexKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(attributeNameOrWildcard=AttribNameOrWildcard ("," typeName=TypeName)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//attributeNameOrWildcard=AttribNameOrWildcard
		public Assignment getAttributeNameOrWildcardAssignment_1_2_0() { return cAttributeNameOrWildcardAssignment_1_2_0; }

		//AttribNameOrWildcard
		public RuleCall getAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0() { return cAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0; }

		//("," typeName=TypeName)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//typeName=TypeName
		public Assignment getTypeNameAssignment_1_2_1_1() { return cTypeNameAssignment_1_2_1_1; }

		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_2_1_1_0() { return cTypeNameTypeNameParserRuleCall_1_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class AxisStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AxisStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReverseStepAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cReverseStepReverseStepParserRuleCall_0_0_0 = (RuleCall)cReverseStepAssignment_0_0.eContents().get(0);
		private final Assignment cForwardStepAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cForwardStepForwardStepParserRuleCall_0_1_0 = (RuleCall)cForwardStepAssignment_0_1.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//AxisStep:
		//	(reverseStep=ReverseStep | forwardStep=ForwardStep) predicate+=Predicate*;
		public ParserRule getRule() { return rule; }

		//(reverseStep=ReverseStep | forwardStep=ForwardStep) predicate+=Predicate*
		public Group getGroup() { return cGroup; }

		//reverseStep=ReverseStep | forwardStep=ForwardStep
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//reverseStep=ReverseStep
		public Assignment getReverseStepAssignment_0_0() { return cReverseStepAssignment_0_0; }

		//ReverseStep
		public RuleCall getReverseStepReverseStepParserRuleCall_0_0_0() { return cReverseStepReverseStepParserRuleCall_0_0_0; }

		//forwardStep=ForwardStep
		public Assignment getForwardStepAssignment_0_1() { return cForwardStepAssignment_0_1; }

		//ForwardStep
		public RuleCall getForwardStepForwardStepParserRuleCall_0_1_0() { return cForwardStepForwardStepParserRuleCall_0_1_0; }

		//predicate+=Predicate*
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
	}

	public class StepExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepExpr");
		private final RuleCall cAxisStepParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////StepExpr 	   :    	FilterExpr | AxisStep;
		//// ambiguous '/' vs '//'
		//StepExpr:
		//	AxisStep;
		public ParserRule getRule() { return rule; }

		//AxisStep
		public RuleCall getAxisStepParserRuleCall() { return cAxisStepParserRuleCall; }
	}

	public class FilterExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilterPrimaryExprParserRuleCall_0_0 = (RuleCall)cFilterAssignment_0.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//FilterExpr:
		//	filter=PrimaryExpr predicate+=Predicate*;
		public ParserRule getRule() { return rule; }

		//filter=PrimaryExpr predicate+=Predicate*
		public Group getGroup() { return cGroup; }

		//filter=PrimaryExpr
		public Assignment getFilterAssignment_0() { return cFilterAssignment_0; }

		//PrimaryExpr
		public RuleCall getFilterPrimaryExprParserRuleCall_0_0() { return cFilterPrimaryExprParserRuleCall_0_0; }

		//predicate+=Predicate*
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
	}

	public class PathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSeparatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cSeparatorSolidusKeyword_0_0_0 = (Keyword)cSeparatorAssignment_0_0.eContents().get(0);
		private final Assignment cRelativePathAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRelativePathRelativePathExprParserRuleCall_0_1_0 = (RuleCall)cRelativePathAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSeparatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSeparatorSolidusSolidusKeyword_1_0_0 = (Keyword)cSeparatorAssignment_1_0.eContents().get(0);
		private final Assignment cRelativePathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelativePathRelativePathExprParserRuleCall_1_1_0 = (RuleCall)cRelativePathAssignment_1_1.eContents().get(0);
		private final Assignment cRelativePathAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRelativePathRelativePathExprParserRuleCall_2_0 = (RuleCall)cRelativePathAssignment_2.eContents().get(0);
		
		//PathExpr:
		//	separator="/" relativePath=RelativePathExpr? | separator="//" relativePath=RelativePathExpr |
		//	relativePath=RelativePathExpr;
		public ParserRule getRule() { return rule; }

		//separator="/" relativePath=RelativePathExpr? | separator="//" relativePath=RelativePathExpr |
		//relativePath=RelativePathExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//separator="/" relativePath=RelativePathExpr?
		public Group getGroup_0() { return cGroup_0; }

		//separator="/"
		public Assignment getSeparatorAssignment_0_0() { return cSeparatorAssignment_0_0; }

		//"/"
		public Keyword getSeparatorSolidusKeyword_0_0_0() { return cSeparatorSolidusKeyword_0_0_0; }

		//relativePath=RelativePathExpr?
		public Assignment getRelativePathAssignment_0_1() { return cRelativePathAssignment_0_1; }

		//RelativePathExpr
		public RuleCall getRelativePathRelativePathExprParserRuleCall_0_1_0() { return cRelativePathRelativePathExprParserRuleCall_0_1_0; }

		//separator="//" relativePath=RelativePathExpr
		public Group getGroup_1() { return cGroup_1; }

		//separator="//"
		public Assignment getSeparatorAssignment_1_0() { return cSeparatorAssignment_1_0; }

		//"//"
		public Keyword getSeparatorSolidusSolidusKeyword_1_0_0() { return cSeparatorSolidusSolidusKeyword_1_0_0; }

		//relativePath=RelativePathExpr
		public Assignment getRelativePathAssignment_1_1() { return cRelativePathAssignment_1_1; }

		//RelativePathExpr
		public RuleCall getRelativePathRelativePathExprParserRuleCall_1_1_0() { return cRelativePathRelativePathExprParserRuleCall_1_1_0; }

		//relativePath=RelativePathExpr
		public Assignment getRelativePathAssignment_2() { return cRelativePathAssignment_2; }

		//RelativePathExpr
		public RuleCall getRelativePathRelativePathExprParserRuleCall_2_0() { return cRelativePathRelativePathExprParserRuleCall_2_0; }
	}

	public class AttribNameOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttribNameOrWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttribNameOrWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeNameAttributeNameParserRuleCall_1_0 = (RuleCall)cAttributeNameAssignment_1.eContents().get(0);
		
		////AttribNameOrWildcard 	   :   {AttribNameOrWildcard}( 	(attributeName=AttributeName) | "*");
		////ElementNameOrWildcard 	   :  {ElementNameOrWildcard}(  	(elementName=ElementName) | "*");
		////enum OccurrenceIndicator 	   : optional="?" |many= "*" | oneOrMore="+"; 	
		////enum Multiplicative 	   :  multiply="*" | div | idiv | mod;
		//AttribNameOrWildcard:
		//	{AttribNameOrWildcard} attributeName=AttributeName;
		public ParserRule getRule() { return rule; }

		//{AttribNameOrWildcard} attributeName=AttributeName
		public Group getGroup() { return cGroup; }

		//{AttribNameOrWildcard}
		public Action getAttribNameOrWildcardAction_0() { return cAttribNameOrWildcardAction_0; }

		//attributeName=AttributeName
		public Assignment getAttributeNameAssignment_1() { return cAttributeNameAssignment_1; }

		//AttributeName
		public RuleCall getAttributeNameAttributeNameParserRuleCall_1_0() { return cAttributeNameAttributeNameParserRuleCall_1_0; }
	}

	public class ElementNameOrWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementNameOrWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementNameOrWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementNameElementNameParserRuleCall_1_0 = (RuleCall)cElementNameAssignment_1.eContents().get(0);
		
		//ElementNameOrWildcard:
		//	{ElementNameOrWildcard} elementName=ElementName;
		public ParserRule getRule() { return rule; }

		//{ElementNameOrWildcard} elementName=ElementName
		public Group getGroup() { return cGroup; }

		//{ElementNameOrWildcard}
		public Action getElementNameOrWildcardAction_0() { return cElementNameOrWildcardAction_0; }

		//elementName=ElementName
		public Assignment getElementNameAssignment_1() { return cElementNameAssignment_1; }

		//ElementName
		public RuleCall getElementNameElementNameParserRuleCall_1_0() { return cElementNameElementNameParserRuleCall_1_0; }
	}

	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextItemExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////PrimaryExpr 	   :    	 FunctionCall;
		//PrimaryExpr:
		//	Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall;
		public ParserRule getRule() { return rule; }

		//Literal //PrimaryExpr 	   :    	 FunctionCall;
		//| VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VarRef
		public RuleCall getVarRefParserRuleCall_1() { return cVarRefParserRuleCall_1; }

		//ParenthesizedExpr
		public RuleCall getParenthesizedExprParserRuleCall_2() { return cParenthesizedExprParserRuleCall_2; }

		//ContextItemExpr
		public RuleCall getContextItemExprParserRuleCall_3() { return cContextItemExprParserRuleCall_3; }

		////PrimaryExpr 	   :    	 FunctionCall;
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4() { return cFunctionCallParserRuleCall_4; }
	}
	
	
	public class IntersectExceptElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IntersectExcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntersectEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntersectIntersectKeyword_0_0 = (Keyword)cIntersectEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExceptEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExceptExceptKeyword_1_0 = (Keyword)cExceptEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IntersectExcept:
		//	intersect | except;
		public EnumRule getRule() { return rule; }

		//intersect | except
		public Alternatives getAlternatives() { return cAlternatives; }

		//intersect
		public EnumLiteralDeclaration getIntersectEnumLiteralDeclaration_0() { return cIntersectEnumLiteralDeclaration_0; }

		//"intersect"
		public Keyword getIntersectIntersectKeyword_0_0() { return cIntersectIntersectKeyword_0_0; }

		//except
		public EnumLiteralDeclaration getExceptEnumLiteralDeclaration_1() { return cExceptEnumLiteralDeclaration_1; }

		//"except"
		public Keyword getExceptExceptKeyword_1_0() { return cExceptExceptKeyword_1_0; }
	}

	public class UnionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Union");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnionUnionKeyword_0_0 = (Keyword)cUnionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Union:
		//	union | or="|";
		public EnumRule getRule() { return rule; }

		//union | or="|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//union
		public EnumLiteralDeclaration getUnionEnumLiteralDeclaration_0() { return cUnionEnumLiteralDeclaration_0; }

		//"union"
		public Keyword getUnionUnionKeyword_0_0() { return cUnionUnionKeyword_0_0; }

		//or="|"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"|"
		public Keyword getOrVerticalLineKeyword_1_0() { return cOrVerticalLineKeyword_1_0; }
	}

	public class AdditiveElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Additive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Additive:
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class GeneralCompElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GeneralComp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqEqualsSignKeyword_0_0 = (Keyword)cEqEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLtLessThanSignKeyword_2_0 = (Keyword)cLtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLeLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGtGreaterThanSignKeyword_4_0 = (Keyword)cGtEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum GeneralComp:
		//	eq="=" | ne="!=" | lt="<" | le="<=" | gt=">" | ge=">=";
		public EnumRule getRule() { return rule; }

		//eq="=" | ne="!=" | lt="<" | le="<=" | gt=">" | ge=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//eq="="
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_0() { return cEqEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEqEqualsSignKeyword_0_0() { return cEqEqualsSignKeyword_0_0; }

		//ne="!="
		public EnumLiteralDeclaration getNeEnumLiteralDeclaration_1() { return cNeEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNeExclamationMarkEqualsSignKeyword_1_0() { return cNeExclamationMarkEqualsSignKeyword_1_0; }

		//lt="<"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_2() { return cLtEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLtLessThanSignKeyword_2_0() { return cLtLessThanSignKeyword_2_0; }

		//le="<="
		public EnumLiteralDeclaration getLeEnumLiteralDeclaration_3() { return cLeEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLeLessThanSignEqualsSignKeyword_3_0() { return cLeLessThanSignEqualsSignKeyword_3_0; }

		//gt=">"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_4() { return cGtEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGtGreaterThanSignKeyword_4_0() { return cGtGreaterThanSignKeyword_4_0; }

		//ge=">="
		public EnumLiteralDeclaration getGeEnumLiteralDeclaration_5() { return cGeEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}

	public class ValueCompElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValueComp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqEqKeyword_0_0 = (Keyword)cEqEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNeNeKeyword_1_0 = (Keyword)cNeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLtLtKeyword_2_0 = (Keyword)cLtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLeLeKeyword_3_0 = (Keyword)cLeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGtGtKeyword_4_0 = (Keyword)cGtEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGeGeKeyword_5_0 = (Keyword)cGeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ValueComp:
		//	eq | ne | lt | le | gt | ge;
		public EnumRule getRule() { return rule; }

		//eq | ne | lt | le | gt | ge
		public Alternatives getAlternatives() { return cAlternatives; }

		//eq
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_0() { return cEqEnumLiteralDeclaration_0; }

		//"eq"
		public Keyword getEqEqKeyword_0_0() { return cEqEqKeyword_0_0; }

		//ne
		public EnumLiteralDeclaration getNeEnumLiteralDeclaration_1() { return cNeEnumLiteralDeclaration_1; }

		//"ne"
		public Keyword getNeNeKeyword_1_0() { return cNeNeKeyword_1_0; }

		//lt
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_2() { return cLtEnumLiteralDeclaration_2; }

		//"lt"
		public Keyword getLtLtKeyword_2_0() { return cLtLtKeyword_2_0; }

		//le
		public EnumLiteralDeclaration getLeEnumLiteralDeclaration_3() { return cLeEnumLiteralDeclaration_3; }

		//"le"
		public Keyword getLeLeKeyword_3_0() { return cLeLeKeyword_3_0; }

		//gt
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_4() { return cGtEnumLiteralDeclaration_4; }

		//"gt"
		public Keyword getGtGtKeyword_4_0() { return cGtGtKeyword_4_0; }

		//ge
		public EnumLiteralDeclaration getGeEnumLiteralDeclaration_5() { return cGeEnumLiteralDeclaration_5; }

		//"ge"
		public Keyword getGeGeKeyword_5_0() { return cGeGeKeyword_5_0; }
	}

	public class NodeCompElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NodeComp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIsIsKeyword_0_0 = (Keyword)cIsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLeftLessThanSignLessThanSignKeyword_1_0 = (Keyword)cLeftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightGreaterThanSignGreaterThanSignKeyword_2_0 = (Keyword)cRightEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NodeComp:
		//	is | left="<<" | right=">>";
		public EnumRule getRule() { return rule; }

		//is | left="<<" | right=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//is
		public EnumLiteralDeclaration getIsEnumLiteralDeclaration_0() { return cIsEnumLiteralDeclaration_0; }

		//"is"
		public Keyword getIsIsKeyword_0_0() { return cIsIsKeyword_0_0; }

		//left="<<"
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_1() { return cLeftEnumLiteralDeclaration_1; }

		//"<<"
		public Keyword getLeftLessThanSignLessThanSignKeyword_1_0() { return cLeftLessThanSignLessThanSignKeyword_1_0; }

		//right=">>"
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_2() { return cRightEnumLiteralDeclaration_2; }

		//">>"
		public Keyword getRightGreaterThanSignGreaterThanSignKeyword_2_0() { return cRightGreaterThanSignGreaterThanSignKeyword_2_0; }
	}

	public class SeparatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDoubleSolidusSolidusKeyword_0_0 = (Keyword)cDoubleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSingleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSingleSolidusKeyword_1_0 = (Keyword)cSingleEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Separator:
		//	double="//" | single="/";
		public EnumRule getRule() { return rule; }

		//double="//" | single="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//double="//"
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_0() { return cDoubleEnumLiteralDeclaration_0; }

		//"//"
		public Keyword getDoubleSolidusSolidusKeyword_0_0() { return cDoubleSolidusSolidusKeyword_0_0; }

		//single="/"
		public EnumLiteralDeclaration getSingleEnumLiteralDeclaration_1() { return cSingleEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getSingleSolidusKeyword_1_0() { return cSingleSolidusKeyword_1_0; }
	}

	public class ReverseAxisEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ReverseAxisEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cParentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cParentParentKeyword_0_0 = (Keyword)cParentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAncestorAncestorKeyword_1_0 = (Keyword)cAncestorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrecedingSiblingEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrecedingSiblingPrecedingSiblingKeyword_2_0 = (Keyword)cPrecedingSiblingEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrecedingEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrecedingPrecedingKeyword_3_0 = (Keyword)cPrecedingEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAncestorOrSelfEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAncestorOrSelfAncestorOrSelfKeyword_4_0 = (Keyword)cAncestorOrSelfEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ReverseAxisEnum:
		//	parent | ancestor | precedingSibling="preceding-sibling" | preceding | ancestorOrSelf="ancestor-or-self";
		public EnumRule getRule() { return rule; }

		//parent | ancestor | precedingSibling="preceding-sibling" | preceding | ancestorOrSelf="ancestor-or-self"
		public Alternatives getAlternatives() { return cAlternatives; }

		//parent
		public EnumLiteralDeclaration getParentEnumLiteralDeclaration_0() { return cParentEnumLiteralDeclaration_0; }

		//"parent"
		public Keyword getParentParentKeyword_0_0() { return cParentParentKeyword_0_0; }

		//ancestor
		public EnumLiteralDeclaration getAncestorEnumLiteralDeclaration_1() { return cAncestorEnumLiteralDeclaration_1; }

		//"ancestor"
		public Keyword getAncestorAncestorKeyword_1_0() { return cAncestorAncestorKeyword_1_0; }

		//precedingSibling="preceding-sibling"
		public EnumLiteralDeclaration getPrecedingSiblingEnumLiteralDeclaration_2() { return cPrecedingSiblingEnumLiteralDeclaration_2; }

		//"preceding-sibling"
		public Keyword getPrecedingSiblingPrecedingSiblingKeyword_2_0() { return cPrecedingSiblingPrecedingSiblingKeyword_2_0; }

		//preceding
		public EnumLiteralDeclaration getPrecedingEnumLiteralDeclaration_3() { return cPrecedingEnumLiteralDeclaration_3; }

		//"preceding"
		public Keyword getPrecedingPrecedingKeyword_3_0() { return cPrecedingPrecedingKeyword_3_0; }

		//ancestorOrSelf="ancestor-or-self"
		public EnumLiteralDeclaration getAncestorOrSelfEnumLiteralDeclaration_4() { return cAncestorOrSelfEnumLiteralDeclaration_4; }

		//"ancestor-or-self"
		public Keyword getAncestorOrSelfAncestorOrSelfKeyword_4_0() { return cAncestorOrSelfAncestorOrSelfKeyword_4_0; }
	}

	public class ForwardAxisEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardAxisEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChildEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChildChildKeyword_0_0 = (Keyword)cChildEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDescendantDescendantKeyword_1_0 = (Keyword)cDescendantEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAttributexEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAttributexAttributexKeyword_2_0 = (Keyword)cAttributexEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSelfEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSelfSelfKeyword_3_0 = (Keyword)cSelfEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDescendantOrSelfEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDescendantOrSelfDescendantOrSelfKeyword_4_0 = (Keyword)cDescendantOrSelfEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFollowingSiblingEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFollowingSiblingFollowingSiblingKeyword_5_0 = (Keyword)cFollowingSiblingEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFollowingEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFollowingFollowingKeyword_6_0 = (Keyword)cFollowingEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNamespaceEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNamespaceNamespaceKeyword_7_0 = (Keyword)cNamespaceEnumLiteralDeclaration_7.eContents().get(0);
		
		////enum ForwardAxisEnum :child|descendant|attribute|self|descendantOrSelf="descendant-or-self"|followingSibling="following-sibling"|following|namespace;	
		//enum ForwardAxisEnum:
		//	child | descendant | attributex | self | descendantOrSelf="descendant-or-self" | followingSibling="following-sibling"
		//	| following | namespace;
		public EnumRule getRule() { return rule; }

		//child | descendant | attributex | self | descendantOrSelf="descendant-or-self" | followingSibling="following-sibling" |
		//following | namespace
		public Alternatives getAlternatives() { return cAlternatives; }

		//child
		public EnumLiteralDeclaration getChildEnumLiteralDeclaration_0() { return cChildEnumLiteralDeclaration_0; }

		//"child"
		public Keyword getChildChildKeyword_0_0() { return cChildChildKeyword_0_0; }

		//descendant
		public EnumLiteralDeclaration getDescendantEnumLiteralDeclaration_1() { return cDescendantEnumLiteralDeclaration_1; }

		//"descendant"
		public Keyword getDescendantDescendantKeyword_1_0() { return cDescendantDescendantKeyword_1_0; }

		//attributex
		public EnumLiteralDeclaration getAttributexEnumLiteralDeclaration_2() { return cAttributexEnumLiteralDeclaration_2; }

		//"attributex"
		public Keyword getAttributexAttributexKeyword_2_0() { return cAttributexAttributexKeyword_2_0; }

		//self
		public EnumLiteralDeclaration getSelfEnumLiteralDeclaration_3() { return cSelfEnumLiteralDeclaration_3; }

		//"self"
		public Keyword getSelfSelfKeyword_3_0() { return cSelfSelfKeyword_3_0; }

		//descendantOrSelf="descendant-or-self"
		public EnumLiteralDeclaration getDescendantOrSelfEnumLiteralDeclaration_4() { return cDescendantOrSelfEnumLiteralDeclaration_4; }

		//"descendant-or-self"
		public Keyword getDescendantOrSelfDescendantOrSelfKeyword_4_0() { return cDescendantOrSelfDescendantOrSelfKeyword_4_0; }

		//followingSibling="following-sibling"
		public EnumLiteralDeclaration getFollowingSiblingEnumLiteralDeclaration_5() { return cFollowingSiblingEnumLiteralDeclaration_5; }

		//"following-sibling"
		public Keyword getFollowingSiblingFollowingSiblingKeyword_5_0() { return cFollowingSiblingFollowingSiblingKeyword_5_0; }

		//following
		public EnumLiteralDeclaration getFollowingEnumLiteralDeclaration_6() { return cFollowingEnumLiteralDeclaration_6; }

		//"following"
		public Keyword getFollowingFollowingKeyword_6_0() { return cFollowingFollowingKeyword_6_0; }

		//namespace
		public EnumLiteralDeclaration getNamespaceEnumLiteralDeclaration_7() { return cNamespaceEnumLiteralDeclaration_7; }

		//"namespace"
		public Keyword getNamespaceNamespaceKeyword_7_0() { return cNamespaceNamespaceKeyword_7_0; }
	}

	public class OccurrenceIndicatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OccurrenceIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOptionalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOptionalQuestionMarkKeyword_0_0 = (Keyword)cOptionalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOneOrMoreEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOneOrMorePlusSignKeyword_1_0 = (Keyword)cOneOrMoreEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OccurrenceIndicator:
		//	optional="?" | oneOrMore="+";
		public EnumRule getRule() { return rule; }

		//optional="?" | oneOrMore="+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//optional="?"
		public EnumLiteralDeclaration getOptionalEnumLiteralDeclaration_0() { return cOptionalEnumLiteralDeclaration_0; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_0_0() { return cOptionalQuestionMarkKeyword_0_0; }

		//oneOrMore="+"
		public EnumLiteralDeclaration getOneOrMoreEnumLiteralDeclaration_1() { return cOneOrMoreEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getOneOrMorePlusSignKeyword_1_0() { return cOneOrMorePlusSignKeyword_1_0; }
	}

	public class MultiplicativeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDivDivKeyword_0_0 = (Keyword)cDivEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIdivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIdivIdivKeyword_1_0 = (Keyword)cIdivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModModKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Multiplicative:
		//	div | idiv | mod;
		public EnumRule getRule() { return rule; }

		//div | idiv | mod
		public Alternatives getAlternatives() { return cAlternatives; }

		//div
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_0() { return cDivEnumLiteralDeclaration_0; }

		//"div"
		public Keyword getDivDivKeyword_0_0() { return cDivDivKeyword_0_0; }

		//idiv
		public EnumLiteralDeclaration getIdivEnumLiteralDeclaration_1() { return cIdivEnumLiteralDeclaration_1; }

		//"idiv"
		public Keyword getIdivIdivKeyword_1_0() { return cIdivIdivKeyword_1_0; }

		//mod
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"mod"
		public Keyword getModModKeyword_2_0() { return cModModKeyword_2_0; }
	}
	
	private XPathElements pXPath;
	private IntegerLiteralElements pIntegerLiteral;
	private TerminalRule tDECIMAL;
	private TerminalRule tDOUBLE;
	private DecimalLiteralElements pDecimalLiteral;
	private DoubleLiteralElements pDoubleLiteral;
	private StringLiteralElements pStringLiteral;
	private TerminalRule tCOMMENT;
	private QNameElements pQName;
	private PrefixedNameElements pPrefixedName;
	private UnprefixedNameElements pUnprefixedName;
	private PrefixElements pPrefix;
	private LocalPartElements pLocalPart;
	private TerminalRule tNCNAME;
	private ExprElements pExpr;
	private ExprSingleElements pExprSingle;
	private ForExprElements pForExpr;
	private SimpleForClauseElements pSimpleForClause;
	private VarNameElements pVarName;
	private QuantifiedExprElements pQuantifiedExpr;
	private IfExprElements pIfExpr;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private ComparisonExprElements pComparisonExpr;
	private RangeExprElements pRangeExpr;
	private IntersectExceptElements unknownRuleIntersectExcept;
	private UnionElements unknownRuleUnion;
	private AdditiveElements unknownRuleAdditive;
	private GeneralCompElements unknownRuleGeneralComp;
	private ValueCompElements unknownRuleValueComp;
	private NodeCompElements unknownRuleNodeComp;
	private AdditiveExprElements pAdditiveExpr;
	private MultiplicativeExprElements pMultiplicativeExpr;
	private UnionExprElements pUnionExpr;
	private IntersectExceptExprElements pIntersectExceptExpr;
	private InstanceofExprElements pInstanceofExpr;
	private TreatExprElements pTreatExpr;
	private SequenceTypeElements pSequenceType;
	private ItemTypeElements pItemType;
	private AtomicTypeElements pAtomicType;
	private CastableExprElements pCastableExpr;
	private CastExprElements pCastExpr;
	private ValueExprElements pValueExpr;
	private SingleTypeElements pSingleType;
	private RelativePathExprElements pRelativePathExpr;
	private SeparatorElements unknownRuleSeparator;
	private PredicateListElements pPredicateList;
	private PredicateElements pPredicate;
	private ReverseStepElements pReverseStep;
	private ReverseAxisElements pReverseAxis;
	private AbbrevReverseStepElements pAbbrevReverseStep;
	private NodeTestElements pNodeTest;
	private NameTestElements pNameTest;
	private ReverseAxisEnumElements unknownRuleReverseAxisEnum;
	private ForwardStepElements pForwardStep;
	private ForwardAxisElements pForwardAxis;
	private AbbrevForwardStepElements pAbbrevForwardStep;
	private LiteralElements pLiteral;
	private NumericLiteralElements pNumericLiteral;
	private VarRefElements pVarRef;
	private ParenthesizedExprElements pParenthesizedExpr;
	private ContextItemExprElements pContextItemExpr;
	private FunctionCallElements pFunctionCall;
	private KindTestElements pKindTest;
	private ElementDeclarationElements pElementDeclaration;
	private AttributeNameElements pAttributeName;
	private ElementNameElements pElementName;
	private TypeNameElements pTypeName;
	private AnyKindTestElements pAnyKindTest;
	private DocumentTestElements pDocumentTest;
	private TextTestElements pTextTest;
	private CommentTestElements pCommentTest;
	private PITestElements pPITest;
	private SchemaAttributeTestElements pSchemaAttributeTest;
	private AttributeDeclarationElements pAttributeDeclaration;
	private SchemaElementTestElements pSchemaElementTest;
	private UnaryExprElements pUnaryExpr;
	private WildcardElements pWildcard;
	private ElementTestElements pElementTest;
	private AttributeTestElements pAttributeTest;
	private ForwardAxisEnumElements unknownRuleForwardAxisEnum;
	private AxisStepElements pAxisStep;
	private StepExprElements pStepExpr;
	private FilterExprElements pFilterExpr;
	private PathExprElements pPathExpr;
	private AttribNameOrWildcardElements pAttribNameOrWildcard;
	private ElementNameOrWildcardElements pElementNameOrWildcard;
	private OccurrenceIndicatorElements unknownRuleOccurrenceIndicator;
	private MultiplicativeElements unknownRuleMultiplicative;
	private PrimaryExprElements pPrimaryExpr;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Xpath20GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.w3.Xpath20".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XPath:
	//	expressions=Expr;
	public XPathElements getXPathAccess() {
		return (pXPath != null) ? pXPath : (pXPath = new XPathElements());
	}
	
	public ParserRule getXPathRule() {
		return getXPathAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//terminal DECIMAL returns ecore::EBigDecimal:
	//	"." "0".."9"+ | "0".."9"+ "." "0".."9"*;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	("." "0".."9"+ | "0".."9"+ "." "0".."9"*) ("e" | "E") ("+" | "-") "0".."9"+;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//DecimalLiteral:
	//	value=DECIMAL;
	public DecimalLiteralElements getDecimalLiteralAccess() {
		return (pDecimalLiteral != null) ? pDecimalLiteral : (pDecimalLiteral = new DecimalLiteralElements());
	}
	
	public ParserRule getDecimalLiteralRule() {
		return getDecimalLiteralAccess().getRule();
	}

	//DoubleLiteral:
	//	value=DOUBLE;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return (pDoubleLiteral != null) ? pDoubleLiteral : (pDoubleLiteral = new DoubleLiteralElements());
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	/// * ws: explicit * / StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * ws: explicit * / terminal COMMENT:
	//	"(:"->":)";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	/// * gn: comments * / QName:
	//	PrefixedName | UnprefixedName;
	public QNameElements getQNameAccess() {
		return (pQName != null) ? pQName : (pQName = new QNameElements());
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//PrefixedName:
	//	prefix=Prefix ":" localPart=LocalPart;
	public PrefixedNameElements getPrefixedNameAccess() {
		return (pPrefixedName != null) ? pPrefixedName : (pPrefixedName = new PrefixedNameElements());
	}
	
	public ParserRule getPrefixedNameRule() {
		return getPrefixedNameAccess().getRule();
	}

	//UnprefixedName:
	//	localPart=LocalPart;
	public UnprefixedNameElements getUnprefixedNameAccess() {
		return (pUnprefixedName != null) ? pUnprefixedName : (pUnprefixedName = new UnprefixedNameElements());
	}
	
	public ParserRule getUnprefixedNameRule() {
		return getUnprefixedNameAccess().getRule();
	}

	//Prefix:
	//	NCNAME;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//LocalPart:
	//	NCNAME;
	public LocalPartElements getLocalPartAccess() {
		return (pLocalPart != null) ? pLocalPart : (pLocalPart = new LocalPartElements());
	}
	
	public ParserRule getLocalPartRule() {
		return getLocalPartAccess().getRule();
	}

	//terminal NCNAME:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "-" | "." | "0".."9")*;
	public TerminalRule getNCNAMERule() {
		return (tNCNAME != null) ? tNCNAME : (tNCNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NCNAME"));
	} 

	//Expr:
	//	expression+=ExprSingle ("," expression+=ExprSingle)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprSingle:
	//	ForExpr | QuantifiedExpr | IfExpr | OrExpr;
	public ExprSingleElements getExprSingleAccess() {
		return (pExprSingle != null) ? pExprSingle : (pExprSingle = new ExprSingleElements());
	}
	
	public ParserRule getExprSingleRule() {
		return getExprSingleAccess().getRule();
	}

	//ForExpr:
	//	for=SimpleForClause "return" return=ExprSingle;
	public ForExprElements getForExprAccess() {
		return (pForExpr != null) ? pForExpr : (pForExpr = new ForExprElements());
	}
	
	public ParserRule getForExprRule() {
		return getForExprAccess().getRule();
	}

	//SimpleForClause:
	//	"for" "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in" expression+=ExprSingle)*;
	public SimpleForClauseElements getSimpleForClauseAccess() {
		return (pSimpleForClause != null) ? pSimpleForClause : (pSimpleForClause = new SimpleForClauseElements());
	}
	
	public ParserRule getSimpleForClauseRule() {
		return getSimpleForClauseAccess().getRule();
	}

	//VarName:
	//	QName;
	public VarNameElements getVarNameAccess() {
		return (pVarName != null) ? pVarName : (pVarName = new VarNameElements());
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}

	//QuantifiedExpr:
	//	quantifier=("some" | "every") "$" variable+=VarName "in" expression+=ExprSingle ("," "$" variable+=VarName "in"
	//	expression+=ExprSingle)* "satisfies" satisfies=ExprSingle;
	public QuantifiedExprElements getQuantifiedExprAccess() {
		return (pQuantifiedExpr != null) ? pQuantifiedExpr : (pQuantifiedExpr = new QuantifiedExprElements());
	}
	
	public ParserRule getQuantifiedExprRule() {
		return getQuantifiedExprAccess().getRule();
	}

	//IfExpr:
	//	"if" "(" if=Expr ")" "then" then=ExprSingle "else" else=ExprSingle;
	public IfExprElements getIfExprAccess() {
		return (pIfExpr != null) ? pIfExpr : (pIfExpr = new IfExprElements());
	}
	
	public ParserRule getIfExprRule() {
		return getIfExprAccess().getRule();
	}

	//OrExpr:
	//	or+=AndExpr ("or" or+=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr:
	//	and+=ComparisonExpr ("and" and+=ComparisonExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//ComparisonExpr:
	//	operand1=RangeExpr (value=ValueComp | general=GeneralComp | node=NodeComp range=RangeExpr)?;
	public ComparisonExprElements getComparisonExprAccess() {
		return (pComparisonExpr != null) ? pComparisonExpr : (pComparisonExpr = new ComparisonExprElements());
	}
	
	public ParserRule getComparisonExprRule() {
		return getComparisonExprAccess().getRule();
	}

	//RangeExpr:
	//	range=AdditiveExpr ("to" to=AdditiveExpr)?;
	public RangeExprElements getRangeExprAccess() {
		return (pRangeExpr != null) ? pRangeExpr : (pRangeExpr = new RangeExprElements());
	}
	
	public ParserRule getRangeExprRule() {
		return getRangeExprAccess().getRule();
	}

	//enum IntersectExcept:
	//	intersect | except;
	public IntersectExceptElements getIntersectExceptAccess() {
		return (unknownRuleIntersectExcept != null) ? unknownRuleIntersectExcept : (unknownRuleIntersectExcept = new IntersectExceptElements());
	}
	
	public EnumRule getIntersectExceptRule() {
		return getIntersectExceptAccess().getRule();
	}

	//enum Union:
	//	union | or="|";
	public UnionElements getUnionAccess() {
		return (unknownRuleUnion != null) ? unknownRuleUnion : (unknownRuleUnion = new UnionElements());
	}
	
	public EnumRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//enum Additive:
	//	plus="+" | minus="-";
	public AdditiveElements getAdditiveAccess() {
		return (unknownRuleAdditive != null) ? unknownRuleAdditive : (unknownRuleAdditive = new AdditiveElements());
	}
	
	public EnumRule getAdditiveRule() {
		return getAdditiveAccess().getRule();
	}

	//enum GeneralComp:
	//	eq="=" | ne="!=" | lt="<" | le="<=" | gt=">" | ge=">=";
	public GeneralCompElements getGeneralCompAccess() {
		return (unknownRuleGeneralComp != null) ? unknownRuleGeneralComp : (unknownRuleGeneralComp = new GeneralCompElements());
	}
	
	public EnumRule getGeneralCompRule() {
		return getGeneralCompAccess().getRule();
	}

	//enum ValueComp:
	//	eq | ne | lt | le | gt | ge;
	public ValueCompElements getValueCompAccess() {
		return (unknownRuleValueComp != null) ? unknownRuleValueComp : (unknownRuleValueComp = new ValueCompElements());
	}
	
	public EnumRule getValueCompRule() {
		return getValueCompAccess().getRule();
	}

	//enum NodeComp:
	//	is | left="<<" | right=">>";
	public NodeCompElements getNodeCompAccess() {
		return (unknownRuleNodeComp != null) ? unknownRuleNodeComp : (unknownRuleNodeComp = new NodeCompElements());
	}
	
	public EnumRule getNodeCompRule() {
		return getNodeCompAccess().getRule();
	}

	//AdditiveExpr:
	//	add+=MultiplicativeExpr (operator+=Additive add+=MultiplicativeExpr)*;
	public AdditiveExprElements getAdditiveExprAccess() {
		return (pAdditiveExpr != null) ? pAdditiveExpr : (pAdditiveExpr = new AdditiveExprElements());
	}
	
	public ParserRule getAdditiveExprRule() {
		return getAdditiveExprAccess().getRule();
	}

	//MultiplicativeExpr:
	//	multiply+=UnionExpr (operator+=Multiplicative multiply+=UnionExpr)*;
	public MultiplicativeExprElements getMultiplicativeExprAccess() {
		return (pMultiplicativeExpr != null) ? pMultiplicativeExpr : (pMultiplicativeExpr = new MultiplicativeExprElements());
	}
	
	public ParserRule getMultiplicativeExprRule() {
		return getMultiplicativeExprAccess().getRule();
	}

	//UnionExpr:
	//	union+=IntersectExceptExpr (operator+=Union union+=IntersectExceptExpr)*;
	public UnionExprElements getUnionExprAccess() {
		return (pUnionExpr != null) ? pUnionExpr : (pUnionExpr = new UnionExprElements());
	}
	
	public ParserRule getUnionExprRule() {
		return getUnionExprAccess().getRule();
	}

	//IntersectExceptExpr:
	//	intersect+=InstanceofExpr (operator+=IntersectExcept intersect+=InstanceofExpr)*;
	public IntersectExceptExprElements getIntersectExceptExprAccess() {
		return (pIntersectExceptExpr != null) ? pIntersectExceptExpr : (pIntersectExceptExpr = new IntersectExceptExprElements());
	}
	
	public ParserRule getIntersectExceptExprRule() {
		return getIntersectExceptExprAccess().getRule();
	}

	//InstanceofExpr:
	//	treat=TreatExpr ("instance" "of" instanceOf=SequenceType)?;
	public InstanceofExprElements getInstanceofExprAccess() {
		return (pInstanceofExpr != null) ? pInstanceofExpr : (pInstanceofExpr = new InstanceofExprElements());
	}
	
	public ParserRule getInstanceofExprRule() {
		return getInstanceofExprAccess().getRule();
	}

	//TreatExpr:
	//	castable=CastableExpr ("treat" "as" treatAs=SequenceType)?;
	public TreatExprElements getTreatExprAccess() {
		return (pTreatExpr != null) ? pTreatExpr : (pTreatExpr = new TreatExprElements());
	}
	
	public ParserRule getTreatExprRule() {
		return getTreatExprAccess().getRule();
	}

	//SequenceType:
	//	{SequenceType} ("empty-sequence" "(" ")" | type=ItemType occurrence=OccurrenceIndicator?);
	public SequenceTypeElements getSequenceTypeAccess() {
		return (pSequenceType != null) ? pSequenceType : (pSequenceType = new SequenceTypeElements());
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//ItemType:
	//	{ItemType} (kindTest=KindTest | "item" "(" ")" | atomicType=AtomicType);
	public ItemTypeElements getItemTypeAccess() {
		return (pItemType != null) ? pItemType : (pItemType = new ItemTypeElements());
	}
	
	public ParserRule getItemTypeRule() {
		return getItemTypeAccess().getRule();
	}

	//AtomicType:
	//	QName;
	public AtomicTypeElements getAtomicTypeAccess() {
		return (pAtomicType != null) ? pAtomicType : (pAtomicType = new AtomicTypeElements());
	}
	
	public ParserRule getAtomicTypeRule() {
		return getAtomicTypeAccess().getRule();
	}

	//CastableExpr:
	//	cast=CastExpr ("castable" "as" castableAs=SingleType)?;
	public CastableExprElements getCastableExprAccess() {
		return (pCastableExpr != null) ? pCastableExpr : (pCastableExpr = new CastableExprElements());
	}
	
	public ParserRule getCastableExprRule() {
		return getCastableExprAccess().getRule();
	}

	//CastExpr:
	//	cast=UnaryExpr ("cast" "as" castAs=SingleType)?;
	public CastExprElements getCastExprAccess() {
		return (pCastExpr != null) ? pCastExpr : (pCastExpr = new CastExprElements());
	}
	
	public ParserRule getCastExprRule() {
		return getCastExprAccess().getRule();
	}

	//ValueExpr:
	//	path=PathExpr;
	public ValueExprElements getValueExprAccess() {
		return (pValueExpr != null) ? pValueExpr : (pValueExpr = new ValueExprElements());
	}
	
	public ParserRule getValueExprRule() {
		return getValueExprAccess().getRule();
	}

	//SingleType:
	//	type=AtomicType question?="?"?;
	public SingleTypeElements getSingleTypeAccess() {
		return (pSingleType != null) ? pSingleType : (pSingleType = new SingleTypeElements());
	}
	
	public ParserRule getSingleTypeRule() {
		return getSingleTypeAccess().getRule();
	}

	//RelativePathExpr:
	//	step+=StepExpr (separator+=Separator step+=StepExpr)*;
	public RelativePathExprElements getRelativePathExprAccess() {
		return (pRelativePathExpr != null) ? pRelativePathExpr : (pRelativePathExpr = new RelativePathExprElements());
	}
	
	public ParserRule getRelativePathExprRule() {
		return getRelativePathExprAccess().getRule();
	}

	//enum Separator:
	//	double="//" | single="/";
	public SeparatorElements getSeparatorAccess() {
		return (unknownRuleSeparator != null) ? unknownRuleSeparator : (unknownRuleSeparator = new SeparatorElements());
	}
	
	public EnumRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}

	//PredicateList:
	//	{PredicateList} predicate+=Predicate*;
	public PredicateListElements getPredicateListAccess() {
		return (pPredicateList != null) ? pPredicateList : (pPredicateList = new PredicateListElements());
	}
	
	public ParserRule getPredicateListRule() {
		return getPredicateListAccess().getRule();
	}

	//Predicate:
	//	"[" predicate=Expr "]";
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//ReverseStep:
	//	axis=ReverseAxis test=NodeTest | abbrev=AbbrevReverseStep;
	public ReverseStepElements getReverseStepAccess() {
		return (pReverseStep != null) ? pReverseStep : (pReverseStep = new ReverseStepElements());
	}
	
	public ParserRule getReverseStepRule() {
		return getReverseStepAccess().getRule();
	}

	//ReverseAxis:
	//	axis=ReverseAxisEnum "::";
	public ReverseAxisElements getReverseAxisAccess() {
		return (pReverseAxis != null) ? pReverseAxis : (pReverseAxis = new ReverseAxisElements());
	}
	
	public ParserRule getReverseAxisRule() {
		return getReverseAxisAccess().getRule();
	}

	//AbbrevReverseStep:
	//	"..";
	public AbbrevReverseStepElements getAbbrevReverseStepAccess() {
		return (pAbbrevReverseStep != null) ? pAbbrevReverseStep : (pAbbrevReverseStep = new AbbrevReverseStepElements());
	}
	
	public ParserRule getAbbrevReverseStepRule() {
		return getAbbrevReverseStepAccess().getRule();
	}

	//NodeTest:
	//	KindTest | NameTest;
	public NodeTestElements getNodeTestAccess() {
		return (pNodeTest != null) ? pNodeTest : (pNodeTest = new NodeTestElements());
	}
	
	public ParserRule getNodeTestRule() {
		return getNodeTestAccess().getRule();
	}

	//NameTest:
	//	QName | Wildcard;
	public NameTestElements getNameTestAccess() {
		return (pNameTest != null) ? pNameTest : (pNameTest = new NameTestElements());
	}
	
	public ParserRule getNameTestRule() {
		return getNameTestAccess().getRule();
	}

	//enum ReverseAxisEnum:
	//	parent | ancestor | precedingSibling="preceding-sibling" | preceding | ancestorOrSelf="ancestor-or-self";
	public ReverseAxisEnumElements getReverseAxisEnumAccess() {
		return (unknownRuleReverseAxisEnum != null) ? unknownRuleReverseAxisEnum : (unknownRuleReverseAxisEnum = new ReverseAxisEnumElements());
	}
	
	public EnumRule getReverseAxisEnumRule() {
		return getReverseAxisEnumAccess().getRule();
	}

	//ForwardStep:
	//	axis=ForwardAxis test=NodeTest | abbrev=AbbrevForwardStep;
	public ForwardStepElements getForwardStepAccess() {
		return (pForwardStep != null) ? pForwardStep : (pForwardStep = new ForwardStepElements());
	}
	
	public ParserRule getForwardStepRule() {
		return getForwardStepAccess().getRule();
	}

	//ForwardAxis:
	//	axis=ForwardAxisEnum "::";
	public ForwardAxisElements getForwardAxisAccess() {
		return (pForwardAxis != null) ? pForwardAxis : (pForwardAxis = new ForwardAxisElements());
	}
	
	public ParserRule getForwardAxisRule() {
		return getForwardAxisAccess().getRule();
	}

	//AbbrevForwardStep:
	//	at?="@"? test=NodeTest;
	public AbbrevForwardStepElements getAbbrevForwardStepAccess() {
		return (pAbbrevForwardStep != null) ? pAbbrevForwardStep : (pAbbrevForwardStep = new AbbrevForwardStepElements());
	}
	
	public ParserRule getAbbrevForwardStepRule() {
		return getAbbrevForwardStepAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | DecimalLiteral | DoubleLiteral;
	public NumericLiteralElements getNumericLiteralAccess() {
		return (pNumericLiteral != null) ? pNumericLiteral : (pNumericLiteral = new NumericLiteralElements());
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//VarRef:
	//	"$" var=VarName;
	public VarRefElements getVarRefAccess() {
		return (pVarRef != null) ? pVarRef : (pVarRef = new VarRefElements());
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}

	//ParenthesizedExpr:
	//	{ParenthesizedExpr} "(" expression=Expr? ")";
	public ParenthesizedExprElements getParenthesizedExprAccess() {
		return (pParenthesizedExpr != null) ? pParenthesizedExpr : (pParenthesizedExpr = new ParenthesizedExprElements());
	}
	
	public ParserRule getParenthesizedExprRule() {
		return getParenthesizedExprAccess().getRule();
	}

	//ContextItemExpr:
	//	{ContextItemExpr} ".";
	public ContextItemExprElements getContextItemExprAccess() {
		return (pContextItemExpr != null) ? pContextItemExpr : (pContextItemExpr = new ContextItemExprElements());
	}
	
	public ParserRule getContextItemExprRule() {
		return getContextItemExprAccess().getRule();
	}

	//FunctionCall:
	//	function=QName "(" (parameter+=ExprSingle ("," parameter+=ExprSingle)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//KindTest:
	//	DocumentTest | ElementTest | AttributeTest | SchemaElementTest | SchemaAttributeTest | PITest | CommentTest |
	//	TextTest | AnyKindTest;
	public KindTestElements getKindTestAccess() {
		return (pKindTest != null) ? pKindTest : (pKindTest = new KindTestElements());
	}
	
	public ParserRule getKindTestRule() {
		return getKindTestAccess().getRule();
	}

	//ElementDeclaration:
	//	ElementName;
	public ElementDeclarationElements getElementDeclarationAccess() {
		return (pElementDeclaration != null) ? pElementDeclaration : (pElementDeclaration = new ElementDeclarationElements());
	}
	
	public ParserRule getElementDeclarationRule() {
		return getElementDeclarationAccess().getRule();
	}

	//AttributeName:
	//	QName;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//ElementName:
	//	QName;
	public ElementNameElements getElementNameAccess() {
		return (pElementName != null) ? pElementName : (pElementName = new ElementNameElements());
	}
	
	public ParserRule getElementNameRule() {
		return getElementNameAccess().getRule();
	}

	//TypeName:
	//	QName;
	public TypeNameElements getTypeNameAccess() {
		return (pTypeName != null) ? pTypeName : (pTypeName = new TypeNameElements());
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//AnyKindTest:
	//	{AnyKindTest} ("node" "(" ")");
	public AnyKindTestElements getAnyKindTestAccess() {
		return (pAnyKindTest != null) ? pAnyKindTest : (pAnyKindTest = new AnyKindTestElements());
	}
	
	public ParserRule getAnyKindTestRule() {
		return getAnyKindTestAccess().getRule();
	}

	//DocumentTest:
	//	{DocumentTest} ("document-node" "(" (elementTest=ElementTest | schemaElementTest=SchemaElementTest)? ")");
	public DocumentTestElements getDocumentTestAccess() {
		return (pDocumentTest != null) ? pDocumentTest : (pDocumentTest = new DocumentTestElements());
	}
	
	public ParserRule getDocumentTestRule() {
		return getDocumentTestAccess().getRule();
	}

	//TextTest:
	//	{TextTest} ("text" "(" ")");
	public TextTestElements getTextTestAccess() {
		return (pTextTest != null) ? pTextTest : (pTextTest = new TextTestElements());
	}
	
	public ParserRule getTextTestRule() {
		return getTextTestAccess().getRule();
	}

	//CommentTest:
	//	{CommentTest} ("comment" "(" ")");
	public CommentTestElements getCommentTestAccess() {
		return (pCommentTest != null) ? pCommentTest : (pCommentTest = new CommentTestElements());
	}
	
	public ParserRule getCommentTestRule() {
		return getCommentTestAccess().getRule();
	}

	//PITest:
	//	{PITest} ("processing-instruction" "(" (name=NCNAME | string=StringLiteral)? ")");
	public PITestElements getPITestAccess() {
		return (pPITest != null) ? pPITest : (pPITest = new PITestElements());
	}
	
	public ParserRule getPITestRule() {
		return getPITestAccess().getRule();
	}

	//SchemaAttributeTest:
	//	"schema-attribute" "(" attributeDeclaration=AttributeDeclaration ")";
	public SchemaAttributeTestElements getSchemaAttributeTestAccess() {
		return (pSchemaAttributeTest != null) ? pSchemaAttributeTest : (pSchemaAttributeTest = new SchemaAttributeTestElements());
	}
	
	public ParserRule getSchemaAttributeTestRule() {
		return getSchemaAttributeTestAccess().getRule();
	}

	//AttributeDeclaration:
	//	AttributeName;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return (pAttributeDeclaration != null) ? pAttributeDeclaration : (pAttributeDeclaration = new AttributeDeclarationElements());
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	//SchemaElementTest:
	//	"schema-element" "(" elementDeclaration=ElementDeclaration ")";
	public SchemaElementTestElements getSchemaElementTestAccess() {
		return (pSchemaElementTest != null) ? pSchemaElementTest : (pSchemaElementTest = new SchemaElementTestElements());
	}
	
	public ParserRule getSchemaElementTestRule() {
		return getSchemaElementTestAccess().getRule();
	}

	/////////////////////////////////expressions with problems
	//UnaryExpr: // operator+=Additive*  // does not parse
	//	unary=ValueExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return (pUnaryExpr != null) ? pUnaryExpr : (pUnaryExpr = new UnaryExprElements());
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//Wildcard:
	//	prefix=NCNAME ":" "*" //	| ("*" ":" localName=NCNAME)
	//	// not parsing this 
	//	| any="*";
	public WildcardElements getWildcardAccess() {
		return (pWildcard != null) ? pWildcard : (pWildcard = new WildcardElements());
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}

	//// following misinterprets use of "element"		
	//ElementTest:
	//	{ElementTest} ("elementx" "(" (elementNameOrWildcard=ElementNameOrWildcard ("," typeName=TypeName question?="?"?)?)?
	//	")");
	public ElementTestElements getElementTestAccess() {
		return (pElementTest != null) ? pElementTest : (pElementTest = new ElementTestElements());
	}
	
	public ParserRule getElementTestRule() {
		return getElementTestAccess().getRule();
	}

	//// following misinterprets use of "attribute"		
	//AttributeTest:
	//	{AttributeTest} ("attributex" "(" (attributeNameOrWildcard=AttribNameOrWildcard ("," typeName=TypeName)?)? ")");
	public AttributeTestElements getAttributeTestAccess() {
		return (pAttributeTest != null) ? pAttributeTest : (pAttributeTest = new AttributeTestElements());
	}
	
	public ParserRule getAttributeTestRule() {
		return getAttributeTestAccess().getRule();
	}

	////enum ForwardAxisEnum :child|descendant|attribute|self|descendantOrSelf="descendant-or-self"|followingSibling="following-sibling"|following|namespace;	
	//enum ForwardAxisEnum:
	//	child | descendant | attributex | self | descendantOrSelf="descendant-or-self" | followingSibling="following-sibling"
	//	| following | namespace;
	public ForwardAxisEnumElements getForwardAxisEnumAccess() {
		return (unknownRuleForwardAxisEnum != null) ? unknownRuleForwardAxisEnum : (unknownRuleForwardAxisEnum = new ForwardAxisEnumElements());
	}
	
	public EnumRule getForwardAxisEnumRule() {
		return getForwardAxisEnumAccess().getRule();
	}

	//AxisStep:
	//	(reverseStep=ReverseStep | forwardStep=ForwardStep) predicate+=Predicate*;
	public AxisStepElements getAxisStepAccess() {
		return (pAxisStep != null) ? pAxisStep : (pAxisStep = new AxisStepElements());
	}
	
	public ParserRule getAxisStepRule() {
		return getAxisStepAccess().getRule();
	}

	////StepExpr 	   :    	FilterExpr | AxisStep;
	//// ambiguous '/' vs '//'
	//StepExpr:
	//	AxisStep;
	public StepExprElements getStepExprAccess() {
		return (pStepExpr != null) ? pStepExpr : (pStepExpr = new StepExprElements());
	}
	
	public ParserRule getStepExprRule() {
		return getStepExprAccess().getRule();
	}

	//FilterExpr:
	//	filter=PrimaryExpr predicate+=Predicate*;
	public FilterExprElements getFilterExprAccess() {
		return (pFilterExpr != null) ? pFilterExpr : (pFilterExpr = new FilterExprElements());
	}
	
	public ParserRule getFilterExprRule() {
		return getFilterExprAccess().getRule();
	}

	//PathExpr:
	//	separator="/" relativePath=RelativePathExpr? | separator="//" relativePath=RelativePathExpr |
	//	relativePath=RelativePathExpr;
	public PathExprElements getPathExprAccess() {
		return (pPathExpr != null) ? pPathExpr : (pPathExpr = new PathExprElements());
	}
	
	public ParserRule getPathExprRule() {
		return getPathExprAccess().getRule();
	}

	////AttribNameOrWildcard 	   :   {AttribNameOrWildcard}( 	(attributeName=AttributeName) | "*");
	////ElementNameOrWildcard 	   :  {ElementNameOrWildcard}(  	(elementName=ElementName) | "*");
	////enum OccurrenceIndicator 	   : optional="?" |many= "*" | oneOrMore="+"; 	
	////enum Multiplicative 	   :  multiply="*" | div | idiv | mod;
	//AttribNameOrWildcard:
	//	{AttribNameOrWildcard} attributeName=AttributeName;
	public AttribNameOrWildcardElements getAttribNameOrWildcardAccess() {
		return (pAttribNameOrWildcard != null) ? pAttribNameOrWildcard : (pAttribNameOrWildcard = new AttribNameOrWildcardElements());
	}
	
	public ParserRule getAttribNameOrWildcardRule() {
		return getAttribNameOrWildcardAccess().getRule();
	}

	//ElementNameOrWildcard:
	//	{ElementNameOrWildcard} elementName=ElementName;
	public ElementNameOrWildcardElements getElementNameOrWildcardAccess() {
		return (pElementNameOrWildcard != null) ? pElementNameOrWildcard : (pElementNameOrWildcard = new ElementNameOrWildcardElements());
	}
	
	public ParserRule getElementNameOrWildcardRule() {
		return getElementNameOrWildcardAccess().getRule();
	}

	//enum OccurrenceIndicator:
	//	optional="?" | oneOrMore="+";
	public OccurrenceIndicatorElements getOccurrenceIndicatorAccess() {
		return (unknownRuleOccurrenceIndicator != null) ? unknownRuleOccurrenceIndicator : (unknownRuleOccurrenceIndicator = new OccurrenceIndicatorElements());
	}
	
	public EnumRule getOccurrenceIndicatorRule() {
		return getOccurrenceIndicatorAccess().getRule();
	}

	//enum Multiplicative:
	//	div | idiv | mod;
	public MultiplicativeElements getMultiplicativeAccess() {
		return (unknownRuleMultiplicative != null) ? unknownRuleMultiplicative : (unknownRuleMultiplicative = new MultiplicativeElements());
	}
	
	public EnumRule getMultiplicativeRule() {
		return getMultiplicativeAccess().getRule();
	}

	////PrimaryExpr 	   :    	 FunctionCall;
	//PrimaryExpr:
	//	Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall;
	public PrimaryExprElements getPrimaryExprAccess() {
		return (pPrimaryExpr != null) ? pPrimaryExpr : (pPrimaryExpr = new PrimaryExprElements());
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
