/*
* generated by Xtext
*/
grammar InternalXpath20;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.w3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.w3.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.w3.services.Xpath20GrammarAccess;

}

@parser::members {

 	private Xpath20GrammarAccess grammarAccess;
 	
    public InternalXpath20Parser(TokenStream input, Xpath20GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "XPath";	
   	}
   	
   	@Override
   	protected Xpath20GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleXPath
entryRuleXPath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPathRule()); }
	 iv_ruleXPath=ruleXPath 
	 { $current=$iv_ruleXPath.current; } 
	 EOF 
;

// Rule XPath
ruleXPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXPathAccess().getExpressionsExprParserRuleCall_0()); 
	    }
		lv_expressions_0_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXPathRule());
	        }
       		set(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalLiteralRule()); }
	 iv_ruleDecimalLiteral=ruleDecimalLiteral 
	 { $current=$iv_ruleDecimalLiteral.current; } 
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DECIMAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDecimalLiteralAccess().getValueDECIMALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecimalLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DECIMAL");
	    }

)
)
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DOUBLE");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleQName
entryRuleQName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQNameRule()); }
	 iv_ruleQName=ruleQName 
	 { $current=$iv_ruleQName.current; } 
	 EOF 
;

// Rule QName
ruleQName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQNameAccess().getPrefixedNameParserRuleCall_0()); 
    }
    this_PrefixedName_0=rulePrefixedName
    { 
        $current = $this_PrefixedName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQNameAccess().getUnprefixedNameParserRuleCall_1()); 
    }
    this_UnprefixedName_1=ruleUnprefixedName
    { 
        $current = $this_UnprefixedName_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrefixedName
entryRulePrefixedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixedNameRule()); }
	 iv_rulePrefixedName=rulePrefixedName 
	 { $current=$iv_rulePrefixedName.current; } 
	 EOF 
;

// Rule PrefixedName
rulePrefixedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixedNameAccess().getPrefixPrefixParserRuleCall_0_0()); 
	    }
		lv_prefix_0_0=rulePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixedNameRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"Prefix");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrefixedNameAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixedNameAccess().getLocalPartLocalPartParserRuleCall_2_0()); 
	    }
		lv_localPart_2_0=ruleLocalPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixedNameRule());
	        }
       		set(
       			$current, 
       			"localPart",
        		lv_localPart_2_0, 
        		"LocalPart");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnprefixedName
entryRuleUnprefixedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnprefixedNameRule()); }
	 iv_ruleUnprefixedName=ruleUnprefixedName 
	 { $current=$iv_ruleUnprefixedName.current; } 
	 EOF 
;

// Rule UnprefixedName
ruleUnprefixedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnprefixedNameAccess().getLocalPartLocalPartParserRuleCall_0()); 
	    }
		lv_localPart_0_0=ruleLocalPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnprefixedNameRule());
	        }
       		set(
       			$current, 
       			"localPart",
        		lv_localPart_0_0, 
        		"LocalPart");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePrefix
entryRulePrefix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixRule()); } 
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current.getText(); }  
	 EOF 
;

// Rule Prefix
rulePrefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_NCNAME_0=RULE_NCNAME    {
		$current.merge(this_NCNAME_0);
    }

    { 
    newLeafNode(this_NCNAME_0, grammarAccess.getPrefixAccess().getNCNAMETerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleLocalPart
entryRuleLocalPart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalPartRule()); } 
	 iv_ruleLocalPart=ruleLocalPart 
	 { $current=$iv_ruleLocalPart.current.getText(); }  
	 EOF 
;

// Rule LocalPart
ruleLocalPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_NCNAME_0=RULE_NCNAME    {
		$current.merge(this_NCNAME_0);
    }

    { 
    newLeafNode(this_NCNAME_0, grammarAccess.getLocalPartAccess().getNCNAMETerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExpressionExprSingleParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprSingle
entryRuleExprSingle returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprSingleRule()); }
	 iv_ruleExprSingle=ruleExprSingle 
	 { $current=$iv_ruleExprSingle.current; } 
	 EOF 
;

// Rule ExprSingle
ruleExprSingle returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getForExprParserRuleCall_0()); 
    }
    this_ForExpr_0=ruleForExpr
    { 
        $current = $this_ForExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getQuantifiedExprParserRuleCall_1()); 
    }
    this_QuantifiedExpr_1=ruleQuantifiedExpr
    { 
        $current = $this_QuantifiedExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getIfExprParserRuleCall_2()); 
    }
    this_IfExpr_2=ruleIfExpr
    { 
        $current = $this_IfExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprSingleAccess().getOrExprParserRuleCall_3()); 
    }
    this_OrExpr_3=ruleOrExpr
    { 
        $current = $this_OrExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForExpr
entryRuleForExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForExprRule()); }
	 iv_ruleForExpr=ruleForExpr 
	 { $current=$iv_ruleForExpr.current; } 
	 EOF 
;

// Rule ForExpr
ruleForExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForExprAccess().getForSimpleForClauseParserRuleCall_0_0()); 
	    }
		lv_for_0_0=ruleSimpleForClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForExprRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_0_0, 
        		"SimpleForClause");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForExprAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForExprAccess().getReturnExprSingleParserRuleCall_2_0()); 
	    }
		lv_return_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForExprRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleForClause
entryRuleSimpleForClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleForClauseRule()); }
	 iv_ruleSimpleForClause=ruleSimpleForClause 
	 { $current=$iv_ruleSimpleForClause.current; } 
	 EOF 
;

// Rule SimpleForClause
ruleSimpleForClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleForClauseAccess().getForKeyword_0());
    }
	otherlv_1='$' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		add(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleForClauseAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleForClauseAccess().getCommaKeyword_5_0());
    }
	otherlv_6='$' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleForClauseAccess().getDollarSignKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getVariableVarNameParserRuleCall_5_2_0()); 
	    }
		lv_variable_7_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		add(
       			$current, 
       			"variable",
        		lv_variable_7_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='in' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleForClauseAccess().getInKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleForClauseAccess().getExpressionExprSingleParserRuleCall_5_4_0()); 
	    }
		lv_expression_9_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleForClauseRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVarName
entryRuleVarName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	 iv_ruleVarName=ruleVarName 
	 { $current=$iv_ruleVarName.current; } 
	 EOF 
;

// Rule VarName
ruleVarName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVarNameAccess().getQNameParserRuleCall()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleQuantifiedExpr
entryRuleQuantifiedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedExprRule()); }
	 iv_ruleQuantifiedExpr=ruleQuantifiedExpr 
	 { $current=$iv_ruleQuantifiedExpr.current; } 
	 EOF 
;

// Rule QuantifiedExpr
ruleQuantifiedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_quantifier_0_1=	'some' 
    {
        newLeafNode(lv_quantifier_0_1, grammarAccess.getQuantifiedExprAccess().getQuantifierSomeKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifiedExprRule());
	        }
       		setWithLastConsumed($current, "quantifier", lv_quantifier_0_1, null);
	    }

    |		lv_quantifier_0_2=	'every' 
    {
        newLeafNode(lv_quantifier_0_2, grammarAccess.getQuantifiedExprAccess().getQuantifierEveryKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifiedExprRule());
	        }
       		setWithLastConsumed($current, "quantifier", lv_quantifier_0_2, null);
	    }

)

)
)	otherlv_1='$' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		add(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQuantifiedExprAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQuantifiedExprAccess().getCommaKeyword_5_0());
    }
	otherlv_6='$' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuantifiedExprAccess().getDollarSignKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getVariableVarNameParserRuleCall_5_2_0()); 
	    }
		lv_variable_7_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		add(
       			$current, 
       			"variable",
        		lv_variable_7_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='in' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuantifiedExprAccess().getInKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getExpressionExprSingleParserRuleCall_5_4_0()); 
	    }
		lv_expression_9_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='satisfies' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getQuantifiedExprAccess().getSatisfiesKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedExprAccess().getSatisfiesExprSingleParserRuleCall_7_0()); 
	    }
		lv_satisfies_11_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedExprRule());
	        }
       		set(
       			$current, 
       			"satisfies",
        		lv_satisfies_11_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfExpr
entryRuleIfExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExprRule()); }
	 iv_ruleIfExpr=ruleIfExpr 
	 { $current=$iv_ruleIfExpr.current; } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExprAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getIfExprParserRuleCall_2_0()); 
	    }
		lv_if_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfExprAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExprAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getThenExprSingleParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfExprAccess().getElseKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExprAccess().getElseExprSingleParserRuleCall_7_0()); 
	    }
		lv_else_7_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_0_0()); 
	    }
		lv_or_0_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		add(
       			$current, 
       			"or",
        		lv_or_0_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrExprAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getOrAndExprParserRuleCall_1_1_0()); 
	    }
		lv_or_2_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		add(
       			$current, 
       			"or",
        		lv_or_2_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_0_0()); 
	    }
		lv_and_0_0=ruleComparisonExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		add(
       			$current, 
       			"and",
        		lv_and_0_0, 
        		"ComparisonExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExprAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getAndComparisonExprParserRuleCall_1_1_0()); 
	    }
		lv_and_2_0=ruleComparisonExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		add(
       			$current, 
       			"and",
        		lv_and_2_0, 
        		"ComparisonExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpr
entryRuleComparisonExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExprRule()); }
	 iv_ruleComparisonExpr=ruleComparisonExpr 
	 { $current=$iv_ruleComparisonExpr.current; } 
	 EOF 
;

// Rule ComparisonExpr
ruleComparisonExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getOperand1RangeExprParserRuleCall_0_0()); 
	    }
		lv_operand1_0_0=ruleRangeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"operand1",
        		lv_operand1_0_0, 
        		"RangeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getValueValueCompEnumRuleCall_1_0_0()); 
	    }
		lv_value_1_0=ruleValueComp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ValueComp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getGeneralGeneralCompEnumRuleCall_1_1_0()); 
	    }
		lv_general_2_0=ruleGeneralComp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"general",
        		lv_general_2_0, 
        		"GeneralComp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getNodeNodeCompEnumRuleCall_1_2_0_0()); 
	    }
		lv_node_3_0=ruleNodeComp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_3_0, 
        		"NodeComp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getRangeRangeExprParserRuleCall_1_2_1_0()); 
	    }
		lv_range_4_0=ruleRangeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_4_0, 
        		"RangeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleRangeExpr
entryRuleRangeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeExprRule()); }
	 iv_ruleRangeExpr=ruleRangeExpr 
	 { $current=$iv_ruleRangeExpr.current; } 
	 EOF 
;

// Rule RangeExpr
ruleRangeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExprAccess().getRangeAdditiveExprParserRuleCall_0_0()); 
	    }
		lv_range_0_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExprRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_0_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeExprAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExprAccess().getToAdditiveExprParserRuleCall_1_1_0()); 
	    }
		lv_to_2_0=ruleAdditiveExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExprRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_2_0, 
        		"AdditiveExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpr
entryRuleAdditiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExprRule()); }
	 iv_ruleAdditiveExpr=ruleAdditiveExpr 
	 { $current=$iv_ruleAdditiveExpr.current; } 
	 EOF 
;

// Rule AdditiveExpr
ruleAdditiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_0_0()); 
	    }
		lv_add_0_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		add(
       			$current, 
       			"add",
        		lv_add_0_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getOperatorAdditiveEnumRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleAdditive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Additive");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExprAccess().getAddMultiplicativeExprParserRuleCall_1_1_0()); 
	    }
		lv_add_2_0=ruleMultiplicativeExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExprRule());
	        }
       		add(
       			$current, 
       			"add",
        		lv_add_2_0, 
        		"MultiplicativeExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpr
entryRuleMultiplicativeExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExprRule()); }
	 iv_ruleMultiplicativeExpr=ruleMultiplicativeExpr 
	 { $current=$iv_ruleMultiplicativeExpr.current; } 
	 EOF 
;

// Rule MultiplicativeExpr
ruleMultiplicativeExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_0_0()); 
	    }
		lv_multiply_0_0=ruleUnionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		add(
       			$current, 
       			"multiply",
        		lv_multiply_0_0, 
        		"UnionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getOperatorMultiplicativeEnumRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleMultiplicative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Multiplicative");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExprAccess().getMultiplyUnionExprParserRuleCall_1_1_0()); 
	    }
		lv_multiply_2_0=ruleUnionExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExprRule());
	        }
       		add(
       			$current, 
       			"multiply",
        		lv_multiply_2_0, 
        		"UnionExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnionExpr
entryRuleUnionExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionExprRule()); }
	 iv_ruleUnionExpr=ruleUnionExpr 
	 { $current=$iv_ruleUnionExpr.current; } 
	 EOF 
;

// Rule UnionExpr
ruleUnionExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_0_0()); 
	    }
		lv_union_0_0=ruleIntersectExceptExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionExprRule());
	        }
       		add(
       			$current, 
       			"union",
        		lv_union_0_0, 
        		"IntersectExceptExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getUnionExprAccess().getOperatorUnionEnumRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleUnion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionExprRule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Union");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionExprAccess().getUnionIntersectExceptExprParserRuleCall_1_1_0()); 
	    }
		lv_union_2_0=ruleIntersectExceptExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionExprRule());
	        }
       		add(
       			$current, 
       			"union",
        		lv_union_2_0, 
        		"IntersectExceptExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIntersectExceptExpr
entryRuleIntersectExceptExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntersectExceptExprRule()); }
	 iv_ruleIntersectExceptExpr=ruleIntersectExceptExpr 
	 { $current=$iv_ruleIntersectExceptExpr.current; } 
	 EOF 
;

// Rule IntersectExceptExpr
ruleIntersectExceptExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_0_0()); 
	    }
		lv_intersect_0_0=ruleInstanceofExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectExceptExprRule());
	        }
       		add(
       			$current, 
       			"intersect",
        		lv_intersect_0_0, 
        		"InstanceofExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectExceptExprAccess().getOperatorIntersectExceptEnumRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleIntersectExcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectExceptExprRule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"IntersectExcept");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntersectExceptExprAccess().getIntersectInstanceofExprParserRuleCall_1_1_0()); 
	    }
		lv_intersect_2_0=ruleInstanceofExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntersectExceptExprRule());
	        }
       		add(
       			$current, 
       			"intersect",
        		lv_intersect_2_0, 
        		"InstanceofExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceofExpr
entryRuleInstanceofExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceofExprRule()); }
	 iv_ruleInstanceofExpr=ruleInstanceofExpr 
	 { $current=$iv_ruleInstanceofExpr.current; } 
	 EOF 
;

// Rule InstanceofExpr
ruleInstanceofExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceofExprAccess().getTreatTreatExprParserRuleCall_0_0()); 
	    }
		lv_treat_0_0=ruleTreatExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceofExprRule());
	        }
       		set(
       			$current, 
       			"treat",
        		lv_treat_0_0, 
        		"TreatExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='instance' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceofExprAccess().getInstanceKeyword_1_0());
    }
	otherlv_2='of' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceofExprAccess().getOfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceofExprAccess().getInstanceOfSequenceTypeParserRuleCall_1_2_0()); 
	    }
		lv_instanceOf_3_0=ruleSequenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceofExprRule());
	        }
       		set(
       			$current, 
       			"instanceOf",
        		lv_instanceOf_3_0, 
        		"SequenceType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTreatExpr
entryRuleTreatExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTreatExprRule()); }
	 iv_ruleTreatExpr=ruleTreatExpr 
	 { $current=$iv_ruleTreatExpr.current; } 
	 EOF 
;

// Rule TreatExpr
ruleTreatExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTreatExprAccess().getCastableCastableExprParserRuleCall_0_0()); 
	    }
		lv_castable_0_0=ruleCastableExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTreatExprRule());
	        }
       		set(
       			$current, 
       			"castable",
        		lv_castable_0_0, 
        		"CastableExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='treat' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTreatExprAccess().getTreatKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTreatExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTreatExprAccess().getTreatAsSequenceTypeParserRuleCall_1_2_0()); 
	    }
		lv_treatAs_3_0=ruleSequenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTreatExprRule());
	        }
       		set(
       			$current, 
       			"treatAs",
        		lv_treatAs_3_0, 
        		"SequenceType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSequenceType
entryRuleSequenceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceTypeRule()); }
	 iv_ruleSequenceType=ruleSequenceType 
	 { $current=$iv_ruleSequenceType.current; } 
	 EOF 
;

// Rule SequenceType
ruleSequenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSequenceTypeAccess().getSequenceTypeAction_0(),
            $current);
    }
)((	otherlv_1='empty-sequence' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceTypeAccess().getEmptySequenceKeyword_1_0_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceTypeAccess().getLeftParenthesisKeyword_1_0_1());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceTypeAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceTypeAccess().getTypeItemTypeParserRuleCall_1_1_0_0()); 
	    }
		lv_type_4_0=ruleItemType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"ItemType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceTypeAccess().getOccurrenceOccurrenceIndicatorEnumRuleCall_1_1_1_0()); 
	    }
		lv_occurrence_5_0=ruleOccurrenceIndicator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceTypeRule());
	        }
       		set(
       			$current, 
       			"occurrence",
        		lv_occurrence_5_0, 
        		"OccurrenceIndicator");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleItemType
entryRuleItemType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemTypeRule()); }
	 iv_ruleItemType=ruleItemType 
	 { $current=$iv_ruleItemType.current; } 
	 EOF 
;

// Rule ItemType
ruleItemType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getItemTypeAccess().getItemTypeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getItemTypeAccess().getKindTestKindTestParserRuleCall_1_0_0()); 
	    }
		lv_kindTest_1_0=ruleKindTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemTypeRule());
	        }
       		set(
       			$current, 
       			"kindTest",
        		lv_kindTest_1_0, 
        		"KindTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='item' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getItemTypeAccess().getItemKeyword_1_1_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getItemTypeAccess().getLeftParenthesisKeyword_1_1_1());
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getItemTypeAccess().getRightParenthesisKeyword_1_1_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getItemTypeAccess().getAtomicTypeAtomicTypeParserRuleCall_1_2_0()); 
	    }
		lv_atomicType_5_0=ruleAtomicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemTypeRule());
	        }
       		set(
       			$current, 
       			"atomicType",
        		lv_atomicType_5_0, 
        		"AtomicType");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAtomicType
entryRuleAtomicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicTypeRule()); }
	 iv_ruleAtomicType=ruleAtomicType 
	 { $current=$iv_ruleAtomicType.current; } 
	 EOF 
;

// Rule AtomicType
ruleAtomicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAtomicTypeAccess().getQNameParserRuleCall()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCastableExpr
entryRuleCastableExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastableExprRule()); }
	 iv_ruleCastableExpr=ruleCastableExpr 
	 { $current=$iv_ruleCastableExpr.current; } 
	 EOF 
;

// Rule CastableExpr
ruleCastableExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCastableExprAccess().getCastCastExprParserRuleCall_0_0()); 
	    }
		lv_cast_0_0=ruleCastExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastableExprRule());
	        }
       		set(
       			$current, 
       			"cast",
        		lv_cast_0_0, 
        		"CastExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='castable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastableExprAccess().getCastableKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastableExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastableExprAccess().getCastableAsSingleTypeParserRuleCall_1_2_0()); 
	    }
		lv_castableAs_3_0=ruleSingleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastableExprRule());
	        }
       		set(
       			$current, 
       			"castableAs",
        		lv_castableAs_3_0, 
        		"SingleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCastExpr
entryRuleCastExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExprRule()); }
	 iv_ruleCastExpr=ruleCastExpr 
	 { $current=$iv_ruleCastExpr.current; } 
	 EOF 
;

// Rule CastExpr
ruleCastExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCastExprAccess().getCastUnaryExprParserRuleCall_0_0()); 
	    }
		lv_cast_0_0=ruleUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExprRule());
	        }
       		set(
       			$current, 
       			"cast",
        		lv_cast_0_0, 
        		"UnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='cast' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastExprAccess().getCastKeyword_1_0());
    }
	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastExprAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExprAccess().getCastAsSingleTypeParserRuleCall_1_2_0()); 
	    }
		lv_castAs_3_0=ruleSingleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExprRule());
	        }
       		set(
       			$current, 
       			"castAs",
        		lv_castAs_3_0, 
        		"SingleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleValueExpr
entryRuleValueExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExprRule()); }
	 iv_ruleValueExpr=ruleValueExpr 
	 { $current=$iv_ruleValueExpr.current; } 
	 EOF 
;

// Rule ValueExpr
ruleValueExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExprAccess().getPathPathExprParserRuleCall_0()); 
	    }
		lv_path_0_0=rulePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExprRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"PathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSingleType
entryRuleSingleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleTypeRule()); }
	 iv_ruleSingleType=ruleSingleType 
	 { $current=$iv_ruleSingleType.current; } 
	 EOF 
;

// Rule SingleType
ruleSingleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleTypeAccess().getTypeAtomicTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAtomicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AtomicType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_question_1_0=	'?' 
    {
        newLeafNode(lv_question_1_0, grammarAccess.getSingleTypeAccess().getQuestionQuestionMarkKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleTypeRule());
	        }
       		setWithLastConsumed($current, "question", true, "?");
	    }

)
)?)
;





// Entry rule entryRuleRelativePathExpr
entryRuleRelativePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelativePathExprRule()); }
	 iv_ruleRelativePathExpr=ruleRelativePathExpr 
	 { $current=$iv_ruleRelativePathExpr.current; } 
	 EOF 
;

// Rule RelativePathExpr
ruleRelativePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_0_0()); 
	    }
		lv_step_0_0=ruleStepExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelativePathExprRule());
	        }
       		add(
       			$current, 
       			"step",
        		lv_step_0_0, 
        		"StepExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelativePathExprAccess().getSeparatorSeparatorEnumRuleCall_1_0_0()); 
	    }
		lv_separator_1_0=ruleSeparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelativePathExprRule());
	        }
       		add(
       			$current, 
       			"separator",
        		lv_separator_1_0, 
        		"Separator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelativePathExprAccess().getStepStepExprParserRuleCall_1_1_0()); 
	    }
		lv_step_2_0=ruleStepExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelativePathExprRule());
	        }
       		add(
       			$current, 
       			"step",
        		lv_step_2_0, 
        		"StepExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getPredicateExprParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleReverseStep
entryRuleReverseStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReverseStepRule()); }
	 iv_ruleReverseStep=ruleReverseStep 
	 { $current=$iv_ruleReverseStep.current; } 
	 EOF 
;

// Rule ReverseStep
ruleReverseStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getReverseStepAccess().getAxisReverseAxisParserRuleCall_0_0_0()); 
	    }
		lv_axis_0_0=ruleReverseAxis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReverseStepRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_0_0, 
        		"ReverseAxis");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReverseStepAccess().getTestNodeTestParserRuleCall_0_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReverseStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getReverseStepAccess().getAbbrevAbbrevReverseStepParserRuleCall_1_0()); 
	    }
		lv_abbrev_2_0=ruleAbbrevReverseStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReverseStepRule());
	        }
       		set(
       			$current, 
       			"abbrev",
        		lv_abbrev_2_0, 
        		"AbbrevReverseStep");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReverseAxis
entryRuleReverseAxis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReverseAxisRule()); }
	 iv_ruleReverseAxis=ruleReverseAxis 
	 { $current=$iv_ruleReverseAxis.current; } 
	 EOF 
;

// Rule ReverseAxis
ruleReverseAxis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReverseAxisAccess().getAxisReverseAxisEnumEnumRuleCall_0_0()); 
	    }
		lv_axis_0_0=ruleReverseAxisEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReverseAxisRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_0_0, 
        		"ReverseAxisEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReverseAxisAccess().getColonColonKeyword_1());
    }
)
;





// Entry rule entryRuleAbbrevReverseStep
entryRuleAbbrevReverseStep returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbbrevReverseStepRule()); } 
	 iv_ruleAbbrevReverseStep=ruleAbbrevReverseStep 
	 { $current=$iv_ruleAbbrevReverseStep.current.getText(); }  
	 EOF 
;

// Rule AbbrevReverseStep
ruleAbbrevReverseStep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbbrevReverseStepAccess().getFullStopFullStopKeyword()); 
    }

    ;





// Entry rule entryRuleNodeTest
entryRuleNodeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTestRule()); }
	 iv_ruleNodeTest=ruleNodeTest 
	 { $current=$iv_ruleNodeTest.current; } 
	 EOF 
;

// Rule NodeTest
ruleNodeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeTestAccess().getKindTestParserRuleCall_0()); 
    }
    this_KindTest_0=ruleKindTest
    { 
        $current = $this_KindTest_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeTestAccess().getNameTestParserRuleCall_1()); 
    }
    this_NameTest_1=ruleNameTest
    { 
        $current = $this_NameTest_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNameTest
entryRuleNameTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameTestRule()); }
	 iv_ruleNameTest=ruleNameTest 
	 { $current=$iv_ruleNameTest.current; } 
	 EOF 
;

// Rule NameTest
ruleNameTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNameTestAccess().getQNameParserRuleCall_0()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNameTestAccess().getWildcardParserRuleCall_1()); 
    }
    this_Wildcard_1=ruleWildcard
    { 
        $current = $this_Wildcard_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForwardStep
entryRuleForwardStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForwardStepRule()); }
	 iv_ruleForwardStep=ruleForwardStep 
	 { $current=$iv_ruleForwardStep.current; } 
	 EOF 
;

// Rule ForwardStep
ruleForwardStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getForwardStepAccess().getAxisForwardAxisParserRuleCall_0_0_0()); 
	    }
		lv_axis_0_0=ruleForwardAxis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardStepRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_0_0, 
        		"ForwardAxis");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForwardStepAccess().getTestNodeTestParserRuleCall_0_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForwardStepAccess().getAbbrevAbbrevForwardStepParserRuleCall_1_0()); 
	    }
		lv_abbrev_2_0=ruleAbbrevForwardStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardStepRule());
	        }
       		set(
       			$current, 
       			"abbrev",
        		lv_abbrev_2_0, 
        		"AbbrevForwardStep");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForwardAxis
entryRuleForwardAxis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForwardAxisRule()); }
	 iv_ruleForwardAxis=ruleForwardAxis 
	 { $current=$iv_ruleForwardAxis.current; } 
	 EOF 
;

// Rule ForwardAxis
ruleForwardAxis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForwardAxisAccess().getAxisForwardAxisEnumEnumRuleCall_0_0()); 
	    }
		lv_axis_0_0=ruleForwardAxisEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardAxisRule());
	        }
       		set(
       			$current, 
       			"axis",
        		lv_axis_0_0, 
        		"ForwardAxisEnum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForwardAxisAccess().getColonColonKeyword_1());
    }
)
;





// Entry rule entryRuleAbbrevForwardStep
entryRuleAbbrevForwardStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbbrevForwardStepRule()); }
	 iv_ruleAbbrevForwardStep=ruleAbbrevForwardStep 
	 { $current=$iv_ruleAbbrevForwardStep.current; } 
	 EOF 
;

// Rule AbbrevForwardStep
ruleAbbrevForwardStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_at_0_0=	'@' 
    {
        newLeafNode(lv_at_0_0, grammarAccess.getAbbrevForwardStepAccess().getAtCommercialAtKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbbrevForwardStepRule());
	        }
       		setWithLastConsumed($current, "at", true, "@");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAbbrevForwardStepAccess().getTestNodeTestParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruleNodeTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbbrevForwardStepRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"NodeTest");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
    }
    this_NumericLiteral_0=ruleNumericLiteral
    { 
        $current = $this_NumericLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	 iv_ruleNumericLiteral=ruleNumericLiteral 
	 { $current=$iv_ruleNumericLiteral.current; } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getDecimalLiteralParserRuleCall_1()); 
    }
    this_DecimalLiteral_1=ruleDecimalLiteral
    { 
        $current = $this_DecimalLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_2()); 
    }
    this_DoubleLiteral_2=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRefRule()); }
	 iv_ruleVarRef=ruleVarRef 
	 { $current=$iv_ruleVarRef.current; } 
	 EOF 
;

// Rule VarRef
ruleVarRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarRefAccess().getDollarSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarRefAccess().getVarVarNameParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVarName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarRefRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"VarName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParenthesizedExpr
entryRuleParenthesizedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExprRule()); }
	 iv_ruleParenthesizedExpr=ruleParenthesizedExpr 
	 { $current=$iv_ruleParenthesizedExpr.current; } 
	 EOF 
;

// Rule ParenthesizedExpr
ruleParenthesizedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParenthesizedExprAccess().getParenthesizedExprAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParenthesizedExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExprAccess().getExpressionExprParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExprRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParenthesizedExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleContextItemExpr
entryRuleContextItemExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextItemExprRule()); }
	 iv_ruleContextItemExpr=ruleContextItemExpr 
	 { $current=$iv_ruleContextItemExpr.current; } 
	 EOF 
;

// Rule ContextItemExpr
ruleContextItemExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContextItemExprAccess().getContextItemExprAction_0(),
            $current);
    }
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextItemExprAccess().getFullStopKeyword_1());
    }
)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getFunctionQNameParserRuleCall_0_0()); 
	    }
		lv_function_0_0=ruleQName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_0_0, 
        		"QName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_0_0()); 
	    }
		lv_parameter_2_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParameterExprSingleParserRuleCall_2_1_1_0()); 
	    }
		lv_parameter_4_0=ruleExprSingle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"ExprSingle");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleKindTest
entryRuleKindTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKindTestRule()); }
	 iv_ruleKindTest=ruleKindTest 
	 { $current=$iv_ruleKindTest.current; } 
	 EOF 
;

// Rule KindTest
ruleKindTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getDocumentTestParserRuleCall_0()); 
    }
    this_DocumentTest_0=ruleDocumentTest
    { 
        $current = $this_DocumentTest_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getElementTestParserRuleCall_1()); 
    }
    this_ElementTest_1=ruleElementTest
    { 
        $current = $this_ElementTest_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getAttributeTestParserRuleCall_2()); 
    }
    this_AttributeTest_2=ruleAttributeTest
    { 
        $current = $this_AttributeTest_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getSchemaElementTestParserRuleCall_3()); 
    }
    this_SchemaElementTest_3=ruleSchemaElementTest
    { 
        $current = $this_SchemaElementTest_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getSchemaAttributeTestParserRuleCall_4()); 
    }
    this_SchemaAttributeTest_4=ruleSchemaAttributeTest
    { 
        $current = $this_SchemaAttributeTest_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getPITestParserRuleCall_5()); 
    }
    this_PITest_5=rulePITest
    { 
        $current = $this_PITest_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getCommentTestParserRuleCall_6()); 
    }
    this_CommentTest_6=ruleCommentTest
    { 
        $current = $this_CommentTest_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getTextTestParserRuleCall_7()); 
    }
    this_TextTest_7=ruleTextTest
    { 
        $current = $this_TextTest_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getKindTestAccess().getAnyKindTestParserRuleCall_8()); 
    }
    this_AnyKindTest_8=ruleAnyKindTest
    { 
        $current = $this_AnyKindTest_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementDeclarationRule()); }
	 iv_ruleElementDeclaration=ruleElementDeclaration 
	 { $current=$iv_ruleElementDeclaration.current; } 
	 EOF 
;

// Rule ElementDeclaration
ruleElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getElementDeclarationAccess().getElementNameParserRuleCall()); 
    }
    this_ElementName_0=ruleElementName
    { 
        $current = $this_ElementName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAttributeNameAccess().getQNameParserRuleCall()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleElementName
entryRuleElementName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementNameRule()); }
	 iv_ruleElementName=ruleElementName 
	 { $current=$iv_ruleElementName.current; } 
	 EOF 
;

// Rule ElementName
ruleElementName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getElementNameAccess().getQNameParserRuleCall()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current; } 
	 EOF 
;

// Rule TypeName
ruleTypeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypeNameAccess().getQNameParserRuleCall()); 
    }
    this_QName_0=ruleQName
    { 
        $current = $this_QName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAnyKindTest
entryRuleAnyKindTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyKindTestRule()); }
	 iv_ruleAnyKindTest=ruleAnyKindTest 
	 { $current=$iv_ruleAnyKindTest.current; } 
	 EOF 
;

// Rule AnyKindTest
ruleAnyKindTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnyKindTestAccess().getAnyKindTestAction_0(),
            $current);
    }
)(	otherlv_1='node' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnyKindTestAccess().getNodeKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnyKindTestAccess().getLeftParenthesisKeyword_1_1());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnyKindTestAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleDocumentTest
entryRuleDocumentTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentTestRule()); }
	 iv_ruleDocumentTest=ruleDocumentTest 
	 { $current=$iv_ruleDocumentTest.current; } 
	 EOF 
;

// Rule DocumentTest
ruleDocumentTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDocumentTestAccess().getDocumentTestAction_0(),
            $current);
    }
)(	otherlv_1='document-node' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDocumentTestAccess().getDocumentNodeKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDocumentTestAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentTestAccess().getElementTestElementTestParserRuleCall_1_2_0_0()); 
	    }
		lv_elementTest_3_0=ruleElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentTestRule());
	        }
       		set(
       			$current, 
       			"elementTest",
        		lv_elementTest_3_0, 
        		"ElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentTestAccess().getSchemaElementTestSchemaElementTestParserRuleCall_1_2_1_0()); 
	    }
		lv_schemaElementTest_4_0=ruleSchemaElementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentTestRule());
	        }
       		set(
       			$current, 
       			"schemaElementTest",
        		lv_schemaElementTest_4_0, 
        		"SchemaElementTest");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDocumentTestAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleTextTest
entryRuleTextTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextTestRule()); }
	 iv_ruleTextTest=ruleTextTest 
	 { $current=$iv_ruleTextTest.current; } 
	 EOF 
;

// Rule TextTest
ruleTextTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTextTestAccess().getTextTestAction_0(),
            $current);
    }
)(	otherlv_1='text' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextTestAccess().getTextKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTextTestAccess().getLeftParenthesisKeyword_1_1());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextTestAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleCommentTest
entryRuleCommentTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentTestRule()); }
	 iv_ruleCommentTest=ruleCommentTest 
	 { $current=$iv_ruleCommentTest.current; } 
	 EOF 
;

// Rule CommentTest
ruleCommentTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommentTestAccess().getCommentTestAction_0(),
            $current);
    }
)(	otherlv_1='comment' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommentTestAccess().getCommentKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommentTestAccess().getLeftParenthesisKeyword_1_1());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCommentTestAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRulePITest
entryRulePITest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPITestRule()); }
	 iv_rulePITest=rulePITest 
	 { $current=$iv_rulePITest.current; } 
	 EOF 
;

// Rule PITest
rulePITest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPITestAccess().getPITestAction_0(),
            $current);
    }
)(	otherlv_1='processing-instruction' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPITestAccess().getProcessingInstructionKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPITestAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		lv_name_3_0=RULE_NCNAME
		{
			newLeafNode(lv_name_3_0, grammarAccess.getPITestAccess().getNameNCNAMETerminalRuleCall_1_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPITestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"NCNAME");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPITestAccess().getStringStringLiteralParserRuleCall_1_2_1_0()); 
	    }
		lv_string_4_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPITestRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_4_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPITestAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleSchemaAttributeTest
entryRuleSchemaAttributeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaAttributeTestRule()); }
	 iv_ruleSchemaAttributeTest=ruleSchemaAttributeTest 
	 { $current=$iv_ruleSchemaAttributeTest.current; } 
	 EOF 
;

// Rule SchemaAttributeTest
ruleSchemaAttributeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schema-attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSchemaAttributeTestAccess().getSchemaAttributeKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSchemaAttributeTestAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAttributeTestAccess().getAttributeDeclarationAttributeDeclarationParserRuleCall_2_0()); 
	    }
		lv_attributeDeclaration_2_0=ruleAttributeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaAttributeTestRule());
	        }
       		set(
       			$current, 
       			"attributeDeclaration",
        		lv_attributeDeclaration_2_0, 
        		"AttributeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSchemaAttributeTestAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); }
	 iv_ruleAttributeDeclaration=ruleAttributeDeclaration 
	 { $current=$iv_ruleAttributeDeclaration.current; } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getAttributeNameParserRuleCall()); 
    }
    this_AttributeName_0=ruleAttributeName
    { 
        $current = $this_AttributeName_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSchemaElementTest
entryRuleSchemaElementTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaElementTestRule()); }
	 iv_ruleSchemaElementTest=ruleSchemaElementTest 
	 { $current=$iv_ruleSchemaElementTest.current; } 
	 EOF 
;

// Rule SchemaElementTest
ruleSchemaElementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='schema-element' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSchemaElementTestAccess().getSchemaElementKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSchemaElementTestAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaElementTestAccess().getElementDeclarationElementDeclarationParserRuleCall_2_0()); 
	    }
		lv_elementDeclaration_2_0=ruleElementDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaElementTestRule());
	        }
       		set(
       			$current, 
       			"elementDeclaration",
        		lv_elementDeclaration_2_0, 
        		"ElementDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSchemaElementTestAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	 iv_ruleUnaryExpr=ruleUnaryExpr 
	 { $current=$iv_ruleUnaryExpr.current; } 
	 EOF 
;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryValueExprParserRuleCall_0()); 
	    }
		lv_unary_0_0=ruleValueExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExprRule());
	        }
       		set(
       			$current, 
       			"unary",
        		lv_unary_0_0, 
        		"ValueExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	 iv_ruleWildcard=ruleWildcard 
	 { $current=$iv_ruleWildcard.current; } 
	 EOF 
;

// Rule Wildcard
ruleWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_prefix_0_0=RULE_NCNAME
		{
			newLeafNode(lv_prefix_0_0, grammarAccess.getWildcardAccess().getPrefixNCNAMETerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWildcardRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"NCNAME");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWildcardAccess().getColonKeyword_0_1());
    }
	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWildcardAccess().getAsteriskKeyword_0_2());
    }
)
    |(
(
		lv_any_3_0=	'*' 
    {
        newLeafNode(lv_any_3_0, grammarAccess.getWildcardAccess().getAnyAsteriskKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWildcardRule());
	        }
       		setWithLastConsumed($current, "any", lv_any_3_0, "*");
	    }

)
))
;





// Entry rule entryRuleElementTest
entryRuleElementTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementTestRule()); }
	 iv_ruleElementTest=ruleElementTest 
	 { $current=$iv_ruleElementTest.current; } 
	 EOF 
;

// Rule ElementTest
ruleElementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementTestAccess().getElementTestAction_0(),
            $current);
    }
)(	otherlv_1='elementx' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementTestAccess().getElementxKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementTestAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementTestAccess().getElementNameOrWildcardElementNameOrWildcardParserRuleCall_1_2_0_0()); 
	    }
		lv_elementNameOrWildcard_3_0=ruleElementNameOrWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementTestRule());
	        }
       		set(
       			$current, 
       			"elementNameOrWildcard",
        		lv_elementNameOrWildcard_3_0, 
        		"ElementNameOrWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElementTestAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); 
	    }
		lv_typeName_5_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementTestRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_5_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_question_6_0=	'?' 
    {
        newLeafNode(lv_question_6_0, grammarAccess.getElementTestAccess().getQuestionQuestionMarkKeyword_1_2_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementTestRule());
	        }
       		setWithLastConsumed($current, "question", true, "?");
	    }

)
)?)?)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getElementTestAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleAttributeTest
entryRuleAttributeTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeTestRule()); }
	 iv_ruleAttributeTest=ruleAttributeTest 
	 { $current=$iv_ruleAttributeTest.current; } 
	 EOF 
;

// Rule AttributeTest
ruleAttributeTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeTestAccess().getAttributeTestAction_0(),
            $current);
    }
)(	otherlv_1='attributex' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeTestAccess().getAttributexKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeTestAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeTestAccess().getAttributeNameOrWildcardAttribNameOrWildcardParserRuleCall_1_2_0_0()); 
	    }
		lv_attributeNameOrWildcard_3_0=ruleAttribNameOrWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeTestRule());
	        }
       		set(
       			$current, 
       			"attributeNameOrWildcard",
        		lv_attributeNameOrWildcard_3_0, 
        		"AttribNameOrWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeTestAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeTestAccess().getTypeNameTypeNameParserRuleCall_1_2_1_1_0()); 
	    }
		lv_typeName_5_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeTestRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_5_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeTestAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleAxisStep
entryRuleAxisStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxisStepRule()); }
	 iv_ruleAxisStep=ruleAxisStep 
	 { $current=$iv_ruleAxisStep.current; } 
	 EOF 
;

// Rule AxisStep
ruleAxisStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getReverseStepReverseStepParserRuleCall_0_0_0()); 
	    }
		lv_reverseStep_0_0=ruleReverseStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		set(
       			$current, 
       			"reverseStep",
        		lv_reverseStep_0_0, 
        		"ReverseStep");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getForwardStepForwardStepParserRuleCall_0_1_0()); 
	    }
		lv_forwardStep_1_0=ruleForwardStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		set(
       			$current, 
       			"forwardStep",
        		lv_forwardStep_1_0, 
        		"ForwardStep");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAxisStepAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_2_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxisStepRule());
	        }
       		add(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStepExpr
entryRuleStepExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepExprRule()); }
	 iv_ruleStepExpr=ruleStepExpr 
	 { $current=$iv_ruleStepExpr.current; } 
	 EOF 
;

// Rule StepExpr
ruleStepExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStepExprAccess().getAxisStepParserRuleCall()); 
    }
    this_AxisStep_0=ruleAxisStep
    { 
        $current = $this_AxisStep_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRulePathExpr
entryRulePathExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExprRule()); }
	 iv_rulePathExpr=rulePathExpr 
	 { $current=$iv_rulePathExpr.current; } 
	 EOF 
;

// Rule PathExpr
rulePathExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_separator_0_0=	'/' 
    {
        newLeafNode(lv_separator_0_0, grammarAccess.getPathExprAccess().getSeparatorSolidusKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPathExprRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_0_0, "/");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_0_1_0()); 
	    }
		lv_relativePath_1_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"relativePath",
        		lv_relativePath_1_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		lv_separator_2_0=	'//' 
    {
        newLeafNode(lv_separator_2_0, grammarAccess.getPathExprAccess().getSeparatorSolidusSolidusKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPathExprRule());
	        }
       		setWithLastConsumed($current, "separator", lv_separator_2_0, "//");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_1_1_0()); 
	    }
		lv_relativePath_3_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"relativePath",
        		lv_relativePath_3_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExprAccess().getRelativePathRelativePathExprParserRuleCall_2_0()); 
	    }
		lv_relativePath_4_0=ruleRelativePathExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExprRule());
	        }
       		set(
       			$current, 
       			"relativePath",
        		lv_relativePath_4_0, 
        		"RelativePathExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribNameOrWildcard
entryRuleAttribNameOrWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttribNameOrWildcardRule()); }
	 iv_ruleAttribNameOrWildcard=ruleAttribNameOrWildcard 
	 { $current=$iv_ruleAttribNameOrWildcard.current; } 
	 EOF 
;

// Rule AttribNameOrWildcard
ruleAttribNameOrWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttribNameOrWildcardAccess().getAttribNameOrWildcardAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttribNameOrWildcardAccess().getAttributeNameAttributeNameParserRuleCall_1_0()); 
	    }
		lv_attributeName_1_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttribNameOrWildcardRule());
	        }
       		set(
       			$current, 
       			"attributeName",
        		lv_attributeName_1_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElementNameOrWildcard
entryRuleElementNameOrWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementNameOrWildcardRule()); }
	 iv_ruleElementNameOrWildcard=ruleElementNameOrWildcard 
	 { $current=$iv_ruleElementNameOrWildcard.current; } 
	 EOF 
;

// Rule ElementNameOrWildcard
ruleElementNameOrWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementNameOrWildcardAccess().getElementNameOrWildcardAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElementNameOrWildcardAccess().getElementNameElementNameParserRuleCall_1_0()); 
	    }
		lv_elementName_1_0=ruleElementName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementNameOrWildcardRule());
	        }
       		set(
       			$current, 
       			"elementName",
        		lv_elementName_1_0, 
        		"ElementName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	 iv_rulePrimaryExpr=rulePrimaryExpr 
	 { $current=$iv_rulePrimaryExpr.current; } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getVarRefParserRuleCall_1()); 
    }
    this_VarRef_1=ruleVarRef
    { 
        $current = $this_VarRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getParenthesizedExprParserRuleCall_2()); 
    }
    this_ParenthesizedExpr_2=ruleParenthesizedExpr
    { 
        $current = $this_ParenthesizedExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getContextItemExprParserRuleCall_3()); 
    }
    this_ContextItemExpr_3=ruleContextItemExpr
    { 
        $current = $this_ContextItemExpr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExprAccess().getFunctionCallParserRuleCall_4()); 
    }
    this_FunctionCall_4=ruleFunctionCall
    { 
        $current = $this_FunctionCall_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Rule IntersectExcept
ruleIntersectExcept returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='intersect' 
	{
        $current = grammarAccess.getIntersectExceptAccess().getIntersectEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIntersectExceptAccess().getIntersectEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='except' 
	{
        $current = grammarAccess.getIntersectExceptAccess().getExceptEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIntersectExceptAccess().getExceptEnumLiteralDeclaration_1()); 
    }
));



// Rule Union
ruleUnion returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='union' 
	{
        $current = grammarAccess.getUnionAccess().getUnionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnionAccess().getUnionEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='|' 
	{
        $current = grammarAccess.getUnionAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnionAccess().getOrEnumLiteralDeclaration_1()); 
    }
));



// Rule Additive
ruleAdditive returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule GeneralComp
ruleGeneralComp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getGeneralCompAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGeneralCompAccess().getEqEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getGeneralCompAccess().getNeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGeneralCompAccess().getNeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getGeneralCompAccess().getLtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGeneralCompAccess().getLtEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getGeneralCompAccess().getLeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGeneralCompAccess().getLeEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getGeneralCompAccess().getGtEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getGeneralCompAccess().getGtEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='>=' 
	{
        $current = grammarAccess.getGeneralCompAccess().getGeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getGeneralCompAccess().getGeEnumLiteralDeclaration_5()); 
    }
));



// Rule ValueComp
ruleValueComp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='eq' 
	{
        $current = grammarAccess.getValueCompAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueCompAccess().getEqEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ne' 
	{
        $current = grammarAccess.getValueCompAccess().getNeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValueCompAccess().getNeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='lt' 
	{
        $current = grammarAccess.getValueCompAccess().getLtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValueCompAccess().getLtEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='le' 
	{
        $current = grammarAccess.getValueCompAccess().getLeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getValueCompAccess().getLeEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='gt' 
	{
        $current = grammarAccess.getValueCompAccess().getGtEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getValueCompAccess().getGtEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='ge' 
	{
        $current = grammarAccess.getValueCompAccess().getGeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getValueCompAccess().getGeEnumLiteralDeclaration_5()); 
    }
));



// Rule NodeComp
ruleNodeComp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='is' 
	{
        $current = grammarAccess.getNodeCompAccess().getIsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNodeCompAccess().getIsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<<' 
	{
        $current = grammarAccess.getNodeCompAccess().getLeftEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNodeCompAccess().getLeftEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>>' 
	{
        $current = grammarAccess.getNodeCompAccess().getRightEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNodeCompAccess().getRightEnumLiteralDeclaration_2()); 
    }
));



// Rule Separator
ruleSeparator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='//' 
	{
        $current = grammarAccess.getSeparatorAccess().getDoubleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSeparatorAccess().getDoubleEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getSeparatorAccess().getSingleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSeparatorAccess().getSingleEnumLiteralDeclaration_1()); 
    }
));



// Rule ReverseAxisEnum
ruleReverseAxisEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='parent' 
	{
        $current = grammarAccess.getReverseAxisEnumAccess().getParentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getReverseAxisEnumAccess().getParentEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ancestor' 
	{
        $current = grammarAccess.getReverseAxisEnumAccess().getAncestorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getReverseAxisEnumAccess().getAncestorEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='preceding-sibling' 
	{
        $current = grammarAccess.getReverseAxisEnumAccess().getPrecedingSiblingEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getReverseAxisEnumAccess().getPrecedingSiblingEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='preceding' 
	{
        $current = grammarAccess.getReverseAxisEnumAccess().getPrecedingEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getReverseAxisEnumAccess().getPrecedingEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='ancestor-or-self' 
	{
        $current = grammarAccess.getReverseAxisEnumAccess().getAncestorOrSelfEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getReverseAxisEnumAccess().getAncestorOrSelfEnumLiteralDeclaration_4()); 
    }
));



// Rule ForwardAxisEnum
ruleForwardAxisEnum returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='child' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getChildEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getForwardAxisEnumAccess().getChildEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='descendant' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getDescendantEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getForwardAxisEnumAccess().getDescendantEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='attributex' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getAttributexEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getForwardAxisEnumAccess().getAttributexEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='self' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getSelfEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getForwardAxisEnumAccess().getSelfEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='descendant-or-self' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getDescendantOrSelfEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getForwardAxisEnumAccess().getDescendantOrSelfEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='following-sibling' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getFollowingSiblingEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getForwardAxisEnumAccess().getFollowingSiblingEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='following' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getFollowingEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getForwardAxisEnumAccess().getFollowingEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='namespace' 
	{
        $current = grammarAccess.getForwardAxisEnumAccess().getNamespaceEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getForwardAxisEnumAccess().getNamespaceEnumLiteralDeclaration_7()); 
    }
));



// Rule OccurrenceIndicator
ruleOccurrenceIndicator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='?' 
	{
        $current = grammarAccess.getOccurrenceIndicatorAccess().getOptionalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOccurrenceIndicatorAccess().getOptionalEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getOccurrenceIndicatorAccess().getOneOrMoreEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOccurrenceIndicatorAccess().getOneOrMoreEnumLiteralDeclaration_1()); 
    }
));



// Rule Multiplicative
ruleMultiplicative returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='div' 
	{
        $current = grammarAccess.getMultiplicativeAccess().getDivEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeAccess().getDivEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='idiv' 
	{
        $current = grammarAccess.getMultiplicativeAccess().getIdivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeAccess().getIdivEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='mod' 
	{
        $current = grammarAccess.getMultiplicativeAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeAccess().getModEnumLiteralDeclaration_2()); 
    }
));



RULE_DECIMAL : ('.' ('0'..'9')+|('0'..'9')+ '.' ('0'..'9')*);

RULE_DOUBLE : ('.' ('0'..'9')+|('0'..'9')+ '.' ('0'..'9')*) ('e'|'E') ('+'|'-') ('0'..'9')+;

RULE_COMMENT : '(:' ( options {greedy=false;} : . )*':)';

RULE_NCNAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


