//import org.modeldriven.mda.qvto.web; // java blackbox; contains just a few helpers
//import soaml2xsd;
import soaml2wsdl;
//modeltype UML "strict" uses 'http://www.eclipse.org/uml2/3.0.0/UML';
modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype ECORE  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype XSD  uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype WSDL uses 'http://www.eclipse.org/wsdl/2003/WSDL';
//modeltype SOAP uses 'http://www.ibm.com/wsdl/2003/SOAP';
modeltype SOAP uses 'http://www.eclipse.org/wsdl/2003/SOAP';

transformation soaml2wsdlannotations(
	in uml:UML
//	,in targetLocation:XSD
//	,out xsd:XSD
	,out wsdl:WSDL
	)
	extends transformation 
	//wsdl,soaml2xsd,
	soaml2wsdl;
//	main() {}	
////////////////////////////////////abstract maps
/*
abstract mapping UML::Interface::PortType():WSDL::PortType@wsdl;
abstract mapping UML::BehavioralFeature::Operation(portType:WSDL::PortType,owningInterface:UML::Interface):WSDL::Operation@wsdl;
abstract mapping UML::NamedElement::Input(portType:WSDL::PortType,owningInterface:UML::Interface):WSDL::Input@wsdl;
abstract mapping UML::NamedElement::Output(portType:WSDL::PortType):WSDL::Output@wsdl;
abstract mapping UML::Classifier::Service(in definition:WSDL::Definition):WSDL::Service@wsdl;
abstract mapping UML::Interface::Port(in definition:WSDL::Definition,in service:WSDL::Service):WSDL::Port@wsdl;
*/
/////////////////////////////////////	

helper UML::Classifier::DefinitionWsdlAnnotation(element:WSDL::WSDLElement){
	self.wsdlAnnotation(element);
	self.getRealizedInterfaces()->forEach(interface){
		var portType:WSDL::PortType=interface.map PortType();
		interface.wsdlAnnotation(portType);
		interface.allBehavioralFeatures()->forEach(behavioralFeature){
			var operation:WSDL::Operation=behavioralFeature.map Operation(portType,interface);
			operation.setMpoModifiable();
			
			behavioralFeature.wsdlAnnotation(operation);
			var inputParameter:UML::NamedElement=behavioralFeature.getInputParameter();
			var outputParameter:UML::NamedElement=behavioralFeature.getOutputParameter();
			if(inputParameter.oclIsUndefined())then{}else{
				var eInput:WSDL::Input=inputParameter.map Input(portType,interface);
				inputParameter.wsdlAnnotation(eInput);
			}endif;
			if(outputParameter.oclIsUndefined())then{}else{
				var eOutput:WSDL::Output=outputParameter.map Output(portType);
				outputParameter.wsdlAnnotation(eOutput);
			}endif;
			//var eFaults:=behavioralFeature.raisedException.map Fault(portType);
			
		};
	};
	return;
}	
helper UML::Collaboration::ServiceDefinitionWsdlAnnotation(element:WSDL::Definition){
	self.wsdlAnnotation(element);
	self.service()->forEach(participant){
//		var service:WSDL::Service=self.map Service(element);
		var service:WSDL::Service=participant.map Service(element);
//		self.wsdlAnnotation(service);
//		self.getRealizedInterfaces()->forEach(interface){
		participant.wsdlAnnotation(service);
		participant.port()->forEach(participantPort){
//			var port:WSDL::Port=interface.map Port(element,service,self);
			var port:WSDL::Port=participantPort.map Port(element,service,participant);
//			interface.wsdlAnnotation(port);
			participantPort.wsdlAnnotation(port);
		};
	};
	return;
}	

//helper UML::Class::BindingDefinitionWsdlAnnotation(element:WSDL::Definition){
	
helper UML::Class::BindingDefinitionWsdlAnnotation(element:WSDL::Definition,port:UML::Port){
	var isReliability:Boolean=false;
	var isAuthentication:Boolean=false;
	self.wsdlAnnotation(element);
	//
	self.getRealizedInterfaces()->forEach(interface){
//		var binding:WSDL::Binding=interface.map Binding(self);
		var binding:WSDL::Binding=self.map Binding(port);
		interface.wsdlAnnotation(binding);
		if(self.stereotypedBy(policyProfileAuthentication))then{
			binding.eExtensibilityElements+=wspPolicyReference('#PasswordAuthenticationOverSSL');
			isAuthentication:=true;
		}else{}endif;
		if(self.stereotypedBy(policyProfileReliability))then{
			binding.eExtensibilityElements+=wspPolicyReference('#ReliableMessaging');
			isReliability:=true;
		}else{}endif;
		
		var ePortType:WSDL::PortType=interface.map PortType();
		ePortType.eOperations->forEach(eOperation){
//			var eBindingOperation:WSDL::BindingOperation=eOperation.map BindingOperation(interface);
			var eBindingOperation:WSDL::BindingOperation=eOperation.map BindingOperation(self);
			var umlOperation:UML::BehavioralFeature=eOperation.findUmlOperation();
			eBindingOperation.setMpoModifiable();
			var eBindingInput:WSDL::BindingInput=eOperation.eInput.map BindingInput();
			var eBindingOutput:WSDL::BindingOutput=eOperation.eOutput.map BindingOutput();
			if(eBindingInput.oclIsUndefined())then{}else{
//				eBindingInput.eExtensibilityElements+=new SOAPBody(umlOperation.use(),eOperation.eInput.parts());
				new SOAPBody(umlOperation.use(),eOperation.eInput.parts(),eBindingInput);
// DEBUG temp suppress TODO: where is the failure?
				eBindingInput.setElementAttribute(wsawsNamespace,'wsaws:Action',umlOperation.soapActionURI());
			}endif;
			if(eBindingOutput.oclIsUndefined())then{}else{
//				eBindingOutput.eExtensibilityElements+=new SOAPBody(umlOperation.use(),eOperation.eOutput.parts(),eBindingOutput);
				new SOAPBody(umlOperation.use(),eOperation.eOutput.parts(),eBindingOutput);
				eBindingOutput.setElementAttribute(wsawsNamespace,'wsaws:Action',umlOperation.soapActionURI()+'Response');
			}endif;
			eOperation.eFaults->forEach(eFault){
				var eBindingFault:WSDL::BindingFault=eFault.map BindingFault();
				eBindingFault.eExtensibilityElements+=new SOAPFault(eFault.name,umlOperation.use());
			};
		};
	};
	if(isReliability)then{
		wspPolicyReliableMessaging(element); 
	}else{}endif;
	if(isAuthentication)then{
		wspPolicyAuthentication(element); 
	}else{}endif;
	
	return;
}	
helper UML::Element::wsdlAnnotation(element:WSDL::WSDLElement){
/*
	// element-specific additional information
	var appinfoElement:OclAny=null;
	if(self.ownedComment->isEmpty())then{appinfoElement:=element.warning(appinfoElement,'undocumented element');}else{}endif;
	if(self.oclIsKindOf(UML::NamedElement))then{
		var prop:UML::NamedElement=self.oclAsType(UML::NamedElement);
		if(prop.name="")then{appinfoElement:=element.warning(appinfoElement,'unnamed element');}else{
			if(prop.name<>prop.getName())then{appinfoElement:=element.warning(appinfoElement,'original uml element name '+prop.name);}else{}endif;
		}endif;
	}else{}endif;
	if(self.oclIsKindOf(UML::BehavioralFeature))then{
		var bf:UML::BehavioralFeature=self.oclAsType(UML::BehavioralFeature);
		if(bf.ownedParameter->select(p|
			(p.direction=UML::ParameterDirectionKind::_in)or(p.direction=UML::ParameterDirectionKind::_inout)
			)->size()>1)then{appinfoElement:=element.warning(appinfoElement,'operation has more than 1 in parameter');}else{}endif;
		if(bf.ownedParameter->select(p|
			(p.direction=UML::ParameterDirectionKind::_out)or(p.direction=UML::ParameterDirectionKind::_inout)or(p.direction=UML::ParameterDirectionKind::_return)
			)->size()>1)then{appinfoElement:=element.warning(appinfoElement,'operation has more than 1 out parameter');}else{}endif;
	}else{}endif;
	if(element.oclIsKindOf(WSDL::Input))then{
		var prop:UML::NamedElement=self.oclAsType(UML::NamedElement);
		if(element.oclAsType(WSDL::Input).name<>prop.getName())then{appinfoElement:=element.warning(appinfoElement,'WSDL input name not unique within PortType, original name: '+prop.name);}else{}endif;
	}else{}endif;
	if(self.oclIsKindOf(UML::Parameter))then{
		var type:UML::Type=self.oclAsType(UML::Parameter).type;
		if(type.stereotypedBy(soaMLProfileMessageType))then{}else{appinfoElement:=element.warning(appinfoElement,'parameter type is not MessageType');}endif;
	}else{}endif;

	if(self.ownedComment->notEmpty())then{
		var documentationElement:OclAny=element.createDocumentationElement();
		self.ownedComment->forEach(comment){
			var userInformationElement:OclAny='documentation'.createChildElement(documentationElement);
			comment.body.setTextContent(userInformationElement);
		};
	}else{}endif;
	if(self.oclIsKindOf(UML::Classifier)and element.oclIsKindOf(WSDL::Service))then{
		// Application Information
		appinfoElement:=element.getAppinfoElement(appinfoElement);
		var umlelement:OclAny=self.createUmlElement(appinfoElement);
		self.wsdlServiceAnnotation(element,umlelement);
	}else{}endif;
	if(self.oclIsKindOf(UML::BehavioralFeature)and element.oclIsKindOf(WSDL::Operation))then{
		// Application Information
		appinfoElement:=element.getAppinfoElement(appinfoElement);
		var umlelement:OclAny=self.createUmlElement(appinfoElement);
		var serviceInterface:UML::Classifier=self.owner.oclAsType(UML::Classifier);
		self.oclAsType(UML::BehavioralFeature).wsdlOperationAnnotation(element,umlelement,serviceInterface);
	}else{}endif;
*/	
	return;
}	
/*
helper WSDL::WSDLElement::getAppinfoElement(appinfoElementIn:OclAny):OclAny{
	var appinfoElement:OclAny=appinfoElementIn;
	if(appinfoElement=null)then{
		appinfoElement:='appinfo'.createChildElement(self.createDocumentationElement());
		'source'.setAttribute(appinfoElement,umlAnnotationSource);
	}else{}endif;
	return appinfoElement;
}
helper WSDL::WSDLElement::warning(appinfoElementIn:OclAny,text:String):OclAny{
	var appinfoElement:OclAny=self.getAppinfoElement(appinfoElementIn);
	var warningElement:OclAny='warning'.createChildElement(appinfoElement);
	text.setTextValue(warningElement);
	return appinfoElement;
}
*/
helper UML::Element::wsdlServiceAnnotation(element:WSDL::WSDLElement,inout umlelement:OclAny){
/*
	var newLine:String='';
		var serviceInterface:UML::Classifier=self.oclAsType(UML::Classifier);
		var service:WSDL::Service=element.oclAsType(WSDL::Service);
			if(serviceInterface.getAllUsedInterfaces()->isEmpty())then{
					('WARNING: service has no used interfaces'+newLine).setTextValue('warning'.createChildElement(umlelement));
			}else{
				serviceInterface.getAllUsedInterfaces()->forEach(usedInterface){
					var usedInterfaceElement:OclAny='usedInterface'.createChildElement(umlelement);
					('uses interface (wsdl port) defined by '+usedInterface.qualifiedName+newLine).setTextValue(usedInterfaceElement);
					// find implementors
					var usedInterfaceImplementors:Set(UML::BehavioredClassifier)=
						uml.objectsOfType(UML::BehavioredClassifier)
						->select(e|e.getAllImplementedInterfaces()->includes(usedInterface));
					var usedServices:Set(UML::Classifier)=usedInterfaceImplementors;
					if(usedServices->isEmpty())then{usedServices:=Set{usedInterface};}else{}endif;
					usedServices->forEach(usedService){
						('defined in service  '+usedService.qualifiedName+newLine).setTextValue('usesServiceInterface'.createChildElement(usedInterfaceElement));
					};	
				};
			}endif;
			// find all ports which reference the serviceInterface
			uml.objectsOfType(UML::Port)->select(e|e.type=serviceInterface).classifier->select(c|c.oclIsKindOf(UML::Class)).oclAsType(UML::Class)->forEach(owningClass){
				//var participantElement:OclAny='participant'.createChildElement(umlelement);
				var participantElement:OclAny=owningClass.createUmlChildElement(umlelement,'implementedByParticipant',true);
				//('serviceInterface implemented by participant '+owningClass.qualifiedName+newLine).setTextValue(participantElement);
				// find architectures
				uml.objectsOfType(UML::Collaboration).role->select(e|e.type=owningClass)->forEach(collaborationRole){
					var systemArchitectureElement:OclAny='systemArchitecture'.createChildElement(participantElement);
					('participant '+owningClass.qualifiedName+' collaborates in  '+collaborationRole.oclAsType(UML::Property).owner.oclAsType(UML::NamedElement).qualifiedName+newLine).setTextValue(systemArchitectureElement);
					if(not(collaborationRole.owner.oclAsType(UML::Collaboration).collaborationRole->includes(collaborationRole)))then{
						('WARNING: participant is not a collaborationRole'+newLine).setTextValue('warning'.createChildElement(systemArchitectureElement));
					}else{}endif;
					// find contracts	
					collaborationRole.clientDependency.supplier
						->select(s|s.oclIsKindOf(UML::Property)and (s.oclAsType(UML::Property).type=serviceInterface))
						->forEach(contractProperty){
							var contract:UML::Collaboration=contractProperty.owner.oclAsType(UML::Collaboration);
							var contractElement:OclAny='contract'.createChildElement(systemArchitectureElement);
							('service contract '+contract.qualifiedName+newLine).setTextValue(contractElement);
							// get connectors
							contract.feature
								->select(c|
									c.oclIsKindOf(UML::Connector) 
									and (c.oclAsType(UML::Connector)._end.role->asSet()->includes(contractProperty.oclAsType(UML::ConnectableElement)))
									).oclAsType(UML::Connector)._end.role
								->select(r|r<>contractProperty)
								->forEach(otherContractProperty){
									var contractServiceInterfaceElement:OclAny='serviceInterface'.createChildElement(contractElement);
									('contract for serviceInterface '+otherContractProperty.type.qualifiedName+newLine).setTextValue(contractServiceInterfaceElement);
									otherContractProperty.getTargetDirectedRelationships().source
										->select(s|s.oclIsKindOf(UML::Property)).oclAsType(UML::Property).type
										->forEach(otherParticipant){
											var contractServiceInterfaceParticipantElement:OclAny='participant'.createChildElement(contractServiceInterfaceElement);
											('contract with participant '+otherParticipant.qualifiedName+newLine).setTextValue(contractServiceInterfaceParticipantElement);
										};
								};
							if(contract.classifierBehavior.oclIsUndefined())then{}else{contract.classifierBehavior.contractBehavior(contractElement,serviceInterface);}endif;	
					};
				};
				// find activityPartition
				uml.objectsOfType(UML::ActivityPartition)->select(e|e.represents=owningClass)->forEach(activityPartition){
					var activityPartitionElement:OclAny=activityPartition.createUmlChildElement(participantElement,'hasActivityPartition',false);
					'inActivity'.setAttribute(activityPartitionElement,activityPartition.inActivity.displayQualifiedName(serviceInterface));
					activityPartition.node->forEach(node){
						var nodeElement:OclAny=node.createUmlChildElement(activityPartitionElement,'hasNode',false);
						'name'.setAttribute(nodeElement,node.name);
						if(node.oclIsKindOf(UML::CallBehaviorAction))then{
							
						}else{}endif;
					};
				};
			};
			*/
	return;
}	
/*
helper UML::BehavioralFeature::wsdlOperationAnnotation(element:WSDL::WSDLElement,inout umlelement:OclAny,serviceInterface:UML::Classifier){
	// find all behavioral references to the feature
	if(self.oclIsKindOf(UML::Operation))then{
		var operation:UML::Operation=self.oclAsType(UML::Operation);
		uml.objectsOfType(UML::CallEvent)->select(e|e.operation=self)->forEach(callEvent){
			callEvent.wsdlEventAnnotation(element,umlelement,serviceInterface);
		};
		/ *
		uml.objectsOfType(UML::ReceiveOperationEvent)->select(e|e.operation=self)->forEach(callEvent){
			callEvent.wsdlEventAnnotation(element,umlelement,serviceInterface);
		};
		uml.objectsOfType(UML::SendOperationEvent)->select(e|e.operation=self)->forEach(callEvent){
			callEvent.wsdlEventAnnotation(element,umlelement,serviceInterface);
		};
		* /
	}else{
		var reception:UML::Reception=self.oclAsType(UML::Reception);
		var signal:UML::Signal=reception.signal;
		uml.objectsOfType(UML::SignalEvent)->select(e|e.signal=signal)->forEach(signalEvent){
			signalEvent.wsdlSignalEventAnnotation(element,umlelement,serviceInterface);
		};
		/ *
	
}		uml.objectsOfType(UML::SendSignalEvent)->select(e|e.signal=signal)->forEach(signalEvent){
			signalEvent.wsdlSignalEventAnnotation(element,umlelement,serviceInterface);
		};
		uml.objectsOfType(UML::ReceiveSignalEvent)->select(e|e.signal=signal)->forEach(signalEvent){
			signalEvent.wsdlSignalEventAnnotation(element,umlelement,serviceInterface);
		};
		* /
 
	}endif;
	return;
}
	
helper UML::Event::wsdlSignalEventAnnotation(element:WSDL::WSDLElement,inout umlelement:OclAny,serviceInterface:UML::Classifier){
	var eventElement:OclAny=self.createUmlChildElement(umlelement,'event',false);
	uml.objectsOfType(UML::OccurrenceSpecification)->select(s|(s.event=self)and(s.isCoveredType(serviceInterface)))->forEach(occurrence){
		var fragmentElement:OclAny=occurrence.createUmlChildElement(eventElement,'interaction',false);
		occurrence.interactionFragmentSequence(fragmentElement,serviceInterface,true);
	};
	return;
}	
helper UML::Event::wsdlEventAnnotation(element:WSDL::WSDLElement,inout umlelement:OclAny,serviceInterface:UML::Classifier){
	var eventElement:OclAny=self.createUmlChildElement(umlelement,'event',false);
	uml.objectsOfType(UML::OccurrenceSpecification)->select(s|s.event=self)->forEach(occurrence){
		var fragmentElement:OclAny=occurrence.createUmlChildElement(eventElement,'interaction',false);
		occurrence.interactionFragmentSequence(fragmentElement,serviceInterface,true);
	};
	return;
}	

helper UML::NamedElement::createUmlChildElement(inout parentElement:OclAny,label:String,includeName:Boolean):OclAny{
	var interactionElement:OclAny=label.createChildElement(parentElement);
	if(includeName)then{'qualifiedName'.setAttribute(interactionElement,self.qualifiedName);}else{}endif;
	'metaClass'.setAttribute(interactionElement,self.oclAsType(ECORE::EObject).eClass().name);
	return interactionElement;
}
helper UML::Behavior::contractBehavior(inout contractElement:OclAny,serviceInterface:UML::Classifier){
	var interactionElement:OclAny=self.createUmlChildElement(contractElement,'contractBehavior',true);
	if(self.oclIsKindOf(UML::Interaction))then{
		var interaction:UML::Interaction=self.oclAsType(UML::Interaction);
		interaction.fragment->forEach(fragment){
			var fragmentElement:OclAny=fragment.createUmlChildElement(interactionElement,'fragment',false);
			fragment.interactionFragment(fragmentElement,serviceInterface);
		};
	}else{}endif;	
	return;
}	
*/	
helper UML::NamedElement::displayQualifiedName(serviceInterface:UML::NamedElement):String{
	if(self=serviceInterface)then{return 'this';}else{}endif;
	return self.qualifiedName;
}
//helper UML::InteractionFragment::getCoveredType():UML::Type=self.covered.represents.type->asSequence()->first();
helper UML::InteractionFragment::getCoveredTypes():Set(UML::Type)=self.covered.represents.type->asSet();
helper UML::InteractionFragment::isCoveredType(type:UML::Type):Boolean=self.covered.represents.type->includes(type);
helper UML::InteractionFragment::interactionFragmentSequence(inout fragmentElement:OclAny,serviceInterface:UML::Classifier,useDelegation:Boolean){
	//  get prior and next
	if(self.enclosingInteraction.oclIsUndefined())then{
		if(self.enclosingOperand.oclIsUndefined())then{}else{
			self.fromToInteraction(self.enclosingOperand.fragment,fragmentElement,serviceInterface,useDelegation);
		}endif;
	}else{
		self.fromToInteraction(self.enclosingInteraction.fragment,fragmentElement,serviceInterface,useDelegation);
	}endif;
}	
helper UML::InteractionFragment::interactionFragment(inout fragmentElement:OclAny,serviceInterface:UML::Classifier){
	//  get prior and next
	self.interactionFragmentSequence(fragmentElement,serviceInterface,false);
	/*
	if(self.oclIsKindOf(UML::MessageOccurrenceSpecification))then{
		var sendMOS:UML::MessageOccurrenceSpecification=self.oclAsType(UML::MessageOccurrenceSpecification);
		var fromTypes:Set(UML::Type)=sendMOS.getCoveredTypes();
		fromTypes->forEach(fromType){
			var fromClassifier:String=fromType.displayQualifiedName(serviceInterface);
			var fromElement:OclAny=fromType.createUmlChildElement(fragmentElement,'from',false);
			'serviceInterface'.setAttribute(fromElement,fromClassifier);
		};
		var event:UML::Event=sendMOS.event;
		if(event.oclIsUndefined())then{}else{
			var fromEvent:String=event.oclAsType(ECORE::EObject).eClass().name;
			'event'.setAttribute(fragmentElement,fromEvent);
			if(event.oclIsKindOf(UML::CallEvent))then{
				var operation:UML::Operation=event.oclAsType(UML::CallEvent).operation;
				'operation'.setAttribute(fragmentElement,operation.owner.oclAsType(UML::NamedElement).displayQualifiedName(serviceInterface)+'::'+operation.name);
			}else{}endif;
//			if(event.oclIsKindOf(UML::SendSignalEvent))then{
//				var signal:UML::Signal=event.oclAsType(UML::SendSignalEvent).signal;
			if(event.oclIsKindOf(UML::SignalEvent))then{
				var signal:UML::Signal=event.oclAsType(UML::SignalEvent).signal;
				'signal'.setAttribute(fragmentElement,signal.displayQualifiedName(serviceInterface));
			}else{}endif;
		}endif;
	}else{}endif;
	if(self.oclIsKindOf(UML::CombinedFragment))then{
		var combinedFragment:UML::CombinedFragment=self.oclAsType(UML::CombinedFragment);
		combinedFragment.operand->forEach(operand){
			var operandElement:OclAny=operand.createUmlChildElement(fragmentElement,'operand',false);
			operand.interactionFragment(operandElement,serviceInterface);
		};
	}else{}endif;	
	if(self.oclIsKindOf(UML::InteractionOperand))then{
		var interactionOperandFragment:UML::InteractionOperand=self.oclAsType(UML::InteractionOperand);
		interactionOperandFragment.fragment->forEach(fragment){
			var operandfragmentElement:OclAny=fragment.createUmlChildElement(fragmentElement,'fragment',false);
			fragment.interactionFragment(operandfragmentElement,serviceInterface);
		};
	}else{}endif;	
	if(self.oclIsKindOf(UML::ExecutionSpecification))then{
		var executionSpecification:UML::ExecutionSpecification=self.oclAsType(UML::ExecutionSpecification);
		var start:UML::OccurrenceSpecification=executionSpecification.start;
		var finish:UML::OccurrenceSpecification=executionSpecification.finish;
		
		if(start.oclIsUndefined())then{}else{
			var fromTypes:Set(UML::Type)=start.getCoveredTypes();
			fromTypes->forEach(fromType){
				var fromClassifier:String=fromType.displayQualifiedName(serviceInterface);
				var fromElement:OclAny=fromType.createUmlChildElement(fragmentElement,'start',false);
				'serviceInterface'.setAttribute(fromElement,fromClassifier);
			};
		}endif;

		if(finish.oclIsUndefined())then{}else{
			var fromTypes:Set(UML::Type)=finish.getCoveredTypes();
			fromTypes->forEach(fromType){
				var fromClassifier:String=fromType.displayQualifiedName(serviceInterface);
				var fromElement:OclAny=fromType.createUmlChildElement(fragmentElement,'finish',false);
				'serviceInterface'.setAttribute(fromElement,fromClassifier);
			};
		}endif;

	}else{}endif;	
	*/	
	return;
}	
helper UML::InteractionFragment::getFromFragment(fragmentsIn:OrderedSet(UML::InteractionFragment),
	serviceInterface:UML::Classifier,useDelegation:Boolean):UML::InteractionFragment{
	var fragments:OrderedSet(UML::InteractionFragment)=fragmentsIn;
	if(useDelegation)then{
		fragments:=fragmentsIn->select(f|f.oclIsKindOf(UML::MessageOccurrenceSpecification));
	}else{}endif;
	var myIndex:Integer=fragments->indexOf(self);
	if(myIndex>1)then{
		var fromFragment:UML::InteractionFragment=fragments->at(myIndex-1);
		/*
		if(useDelegation and (fromFragment.isCoveredType(serviceInterface)))then{
			var fromPriorFragment:UML::InteractionFragment=fromFragment.getFromFragment(fragments,serviceInterface,useDelegation);
			if(fromPriorFragment=null)then{}else{return fromPriorFragment;}endif;
		}else{}endif;
		*/
		return fromFragment;
	}else{}endif;
	return null;
}	
query UML::InteractionFragment::isCombinedMOS():Boolean=
	self.oclIsKindOf(UML::MessageOccurrenceSpecification)or self.oclIsKindOf(UML::CombinedFragment);
query UML::CombinedFragment::getNestedMessageOccurrenceSpecifications(serviceInterface:UML::Classifier):Set(UML::MessageOccurrenceSpecification){
	var operands:Set(UML::InteractionOperand)=self.operand
		->select(o|o.fragment->select(f|f.isCombinedMOS())->first().isCoveredType(serviceInterface))
		->select(o|o.fragment->select(f|f.isCombinedMOS())->size()>1 or o.fragment->select(f|f.oclIsKindOf(UML::CombinedFragment))->notEmpty());
	var fragments:Set(UML::InteractionFragment)=operands
		->collect(o|
			if(o.fragment->first().oclIsKindOf(UML::CombinedFragment))
			then o.fragment->first()
			else o.fragment->select(f|f.isCombinedMOS())->at(2)
			endif
			)
		->asSet();	
	return fragments
				->collect(f|
					if(f.oclIsKindOf(UML::MessageOccurrenceSpecification))
					then Set{f.oclAsType(UML::MessageOccurrenceSpecification)}
					else f.oclAsType(UML::CombinedFragment).getNestedMessageOccurrenceSpecifications(serviceInterface)
					endif
				)	
		->asSet();
}
helper UML::InteractionFragment::getToFragments(fragmentsIn:OrderedSet(UML::InteractionFragment),
	serviceInterface:UML::Classifier,useDelegation:Boolean):Set(UML::InteractionFragment){
	var fragments:OrderedSet(UML::InteractionFragment)=fragmentsIn;
	if(useDelegation)then{
		fragments:=fragmentsIn->select(f|f.isCombinedMOS());
	}else{}endif;
	var myIndex:Integer=fragments->indexOf(self);
	if(myIndex<fragments->size())then{
		var toFragment:UML::InteractionFragment=fragments->at(myIndex+1);
		/*
		if(useDelegation and (toFragment.isCoveredType(serviceInterface)))then{
			var toPriorFragment:UML::InteractionFragment=toFragment.getToFragment(fragments,serviceInterface,useDelegation);
			if(toPriorFragment=null)then{}else{return toPriorFragment;}endif;
		}else{}endif;
		*/
		if(useDelegation and (toFragment.oclIsKindOf(UML::CombinedFragment)))then{
			return toFragment.oclAsType(UML::CombinedFragment).getNestedMessageOccurrenceSpecifications(serviceInterface);
		}else{}endif;
		return OrderedSet{toFragment};
	}else{}endif;
	return null;
}	
helper UML::InteractionFragment::fromToInteraction(fragments:OrderedSet(UML::InteractionFragment),
	inout fragmentElement:OclAny,serviceInterface:UML::Classifier,useDelegation:Boolean){
	if(fragments->includes(self))then{}else{return;}endif;
	/*
	var fromFragment:UML::InteractionFragment=self.getFromFragment(fragments,serviceInterface,useDelegation);
	var toFragments:Set(UML::InteractionFragment)=self.getToFragments(fragments,serviceInterface,useDelegation);
	if(fromFragment<>null)then{
		//var fromType:UML::Type=fromFragment.getCoveredType();
		//'from'.setAttribute(fragmentElement,fromType.displayQualifiedName(serviceInterface));
		var fromTypes:Set(UML::Type)=fromFragment.getCoveredTypes();
		fromTypes->forEach(fromType){
			var fromClassifier:String=fromType.displayQualifiedName(serviceInterface);
			var fromElement:OclAny=fromType.createUmlChildElement(fragmentElement,'from',false);
			'serviceInterface'.setAttribute(fromElement,fromClassifier);
		};
	}else{}endif;
	toFragments->forEach(toFragment){
		var toElement:OclAny=toFragment.createUmlChildElement(fragmentElement,'to',false);
		//var fromType:UML::Type=toFragment.getCoveredType();
		//'to'.setAttribute(fragmentElement,fromType.displayQualifiedName(serviceInterface));
		var toTypes:Set(UML::Type)=toFragment.getCoveredTypes();
		toTypes->forEach(fromType){
			var fromClassifier:String=fromType.displayQualifiedName(serviceInterface);
			var fromElement:OclAny=fromType.createUmlChildElement(toElement,'type',false);
			'serviceInterface'.setAttribute(fromElement,fromClassifier);
		};
		if(toFragment.enclosingOperand.oclIsUndefined())then{}else{
			if(toFragment.enclosingOperand.guard.oclIsUndefined())then{}else{
				if(toFragment.enclosingOperand.guard.specification.oclIsUndefined())then{}else{
					'guard'.setAttribute(toElement,toFragment.enclosingOperand.guard.specification.stringValue());
				}endif;
			}endif;
		}endif;
		if(toFragment.oclIsKindOf(UML::OccurrenceSpecification)
			and not(toFragment.oclAsType(UML::OccurrenceSpecification).event.oclIsUndefined()))then{
			var event:UML::Event=toFragment.oclAsType(UML::OccurrenceSpecification).event;
			'toEventMetaClass'.setAttribute(toElement,event.oclAsType(ECORE::EObject).eClass().name);
			if(event.oclIsKindOf(UML::CallEvent))then{
				'toOperation'.setAttribute(toElement,event.oclAsType(UML::CallEvent).operation.name);
			}else{}endif;
			if(event.oclIsKindOf(UML::ReceiveOperationEvent))then{
				'toOperation'.setAttribute(toElement,event.oclAsType(UML::ReceiveOperationEvent).operation.name);
			}else{}endif;
			if(event.oclIsKindOf(UML::SendOperationEvent))then{
				'toOperation'.setAttribute(toElement,event.oclAsType(UML::SendOperationEvent).operation.name);
			}else{}endif;
			if(event.oclIsKindOf(UML::SignalEvent))then{
				'toSignal'.setAttribute(toElement,event.oclAsType(UML::SignalEvent).signal.qualifiedName);
			}else{}endif;
			if(event.oclIsKindOf(UML::SendSignalEvent))then{
				'toSignal'.setAttribute(toElement,event.oclAsType(UML::SendSignalEvent).signal.qualifiedName);
			}else{}endif;
			if(event.oclIsKindOf(UML::ReceiveSignalEvent))then{
				'toSignal'.setAttribute(toElement,event.oclAsType(UML::ReceiveSignalEvent).signal.qualifiedName);
			}else{}endif;
		}else{}endif;
	};
	*/
	return;
}	
/*
helper String::setTextValue(element:OclAny){
	'value'.setAttribute(element,self);
	return;
}
*/