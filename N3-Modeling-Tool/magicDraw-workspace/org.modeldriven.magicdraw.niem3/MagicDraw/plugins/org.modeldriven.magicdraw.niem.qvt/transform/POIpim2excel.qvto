//import NIEMpim2psm;
//import NIEMpsm2xsd;
import NIEMplatformBinding;
import NIEMpim2psm;
import NIEMpsm2xsd;
modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype ECORE  uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation POIpim2excel(
	in uml:UML,
	inout blackboxAdapter:ECORE
	)
//	extends NIEMpim2psm(UML)
	;
	main() {
		log('POIpim2excelTest');
		blackboxHook:=blackboxAdapter.objectsOfType(ECORE::EPackage)->asSequence()->first();
		var topRoot:UML::Model:=uml.rootObjects()
			->select(m|m.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)->asSequence()->first();

		topRoot.oclAsType(UML::Model).initializeProfileGlobals();

		// find the instance models
		/*
			Create excel spreadsheet; this done via PoiHelper using poi library
	Miscelleneous information logged in default file output
	Create an excel spreadsheet, possibly mutiple worksheeets, on each worksheet a table
	Based on instance model, one row per unique xpath (but there are multiple entries in current table?)
		*/
		var allDocumentInstances:Set(UML::InstanceSpecification)=topRoot.getDocumentInstances();
		// make a table; ignore duplicate xpath entries
		allDocumentInstances.populateXpathToValueSpecification();
		xpathToValueSpecification->forEach(xpathToValue){
		// Required, type, min length, max length, example value,Mapping?,NIEM Element, NIEM Type, NIEM Definition, 
		//	Data Table Name?, RM class mapping, Name?, RM property mapping, subset, notes?, xpath
		var valueSpec:UML::ValueSpecification=xpathToValue.value;
		var entrySlot:UML::Slot=valueSpec.owningSlot;
		var entryInstance:UML::InstanceSpecification=entrySlot.owningInstance;
		var RM_property_mapping:UML::Property=entrySlot.definingFeature.oclAsType(UML::Property);
		var RM_class_mapping:UML::Classifier=entryInstance.classifier->asSequence()->first();
		var NIEM_Element:UML::Property=RM_property_mapping;
		var NIEM_Type:UML::Type=NIEM_Element.type;
		var NIEM_Definition:String=NIEM_Element.ownedComment.body->asSequence()->first();
		var referencedPIMTopLevelProperty:UML::Property=RM_property_mapping.getResolvedProperty();
		var informationModel:UML::Package=referencedPIMTopLevelProperty.getNearestNIEMSchemaPackage();
		var isSubset:Boolean=not(informationModel.findSubsettedModel().oclIsUndefined());
		var isRequired:Boolean=RM_property_mapping.lower>0;
		var genericType:String=valueSpec.getGenericType();
		var example_value:String=valueSpec.getInstanceValue();
		var min_Length:Integer=0;
		var max_Length:Integer=0;
		var worksheet:String=RM_class_mapping.name;
//			log("xpath "+xpathToValue.xpath+", value "+valueSpec.getInstanceValue());
			log("excell "+worksheet+", "+isRequired.repr()+","+genericType+", "+min_Length.repr()+", "+max_Length.repr()+", "+example_value+", "+NIEM_Element.getQName()
			+", "+NIEM_Type.getQName()+", "+NIEM_Definition+", "+RM_class_mapping.getQName()+", "+RM_property_mapping.getQName()
			+", "+isSubset.repr()+", "+xpathToValue.xpath);
		worksheet.addSpreadsheetRow(
		isRequired.repr(),
		genericType,
		min_Length.repr(),
		max_Length.repr(),
		example_value,
		NIEM_Element.getQName(),
		NIEM_Type.getQName(),
		NIEM_Definition,
		RM_class_mapping.getQName(),
		RM_property_mapping.getQName(),
		isSubset.repr(),
		xpathToValue.xpath
		);
		}
}
property xpathToValueSpecification:Sequence(Tuple(xpath:String,value:UML::ValueSpecification)) = Sequence{
//		Tuple{xpath:String="ansi-nist",value:UML::ValueSpecification="http://niem.gov/niem/ansi-nist/2.0"}
};
helper String::addSpreadsheetRow(
		isRequired:String,
		genericType:String,
		min_Length:String,
		max_Length:String,
		example_value:String,
		NIEM_Element:String,
		NIEM_Type:String,
		NIEM_Definition:String,
		RM_class_mapping:String,
		RM_property_mapping:String,
		isSubset:String,
		xpath:String
		){
	var annotation:ECORE::EAnnotation=new ECORE::EAnnotation('addSpreadsheetRow');
	'sheetName'.setAnnotationDetail(annotation,self);
	'isRequired'.setAnnotationDetail(annotation,isRequired);
	'genericType'.setAnnotationDetail(annotation,genericType);
	'min_Length'.setAnnotationDetail(annotation,min_Length);
	'max_Length'.setAnnotationDetail(annotation,max_Length);
	'example_value'.setAnnotationDetail(annotation,example_value);
	'NIEM_Element'.setAnnotationDetail(annotation,NIEM_Element);
	'NIEM_Type'.setAnnotationDetail(annotation,NIEM_Type);
	'NIEM_Definition'.setAnnotationDetail(annotation,NIEM_Definition);
	'RM_class_mapping'.setAnnotationDetail(annotation,RM_class_mapping);
	'RM_property_mapping'.setAnnotationDetail(annotation,RM_property_mapping);
	'isSubset'.setAnnotationDetail(annotation,isSubset);
	'xpath'.setAnnotationDetail(annotation,xpath);
	blackboxHook.eAnnotations+=annotation;
		return;
}

abstract query UML::ValueSpecification::getGenericType():String;
query UML::InstanceValue::getGenericType():String="String";
query UML::LiteralBoolean::getGenericType():String="Boolean";
query UML::LiteralInteger::getGenericType():String="Integer";
query UML::LiteralReal::getGenericType():String="Real";
query UML::LiteralString::getGenericType():String="String";
query UML::LiteralUnlimitedNatural::getGenericType():String="Integer";
		
abstract query UML::ValueSpecification::getInstanceValue():String;
query UML::InstanceValue::getInstanceValue():String=self.instance.name;
query UML::LiteralBoolean::getInstanceValue():String=self.value.repr();
query UML::LiteralInteger::getInstanceValue():String=self.value.repr();
query UML::LiteralReal::getInstanceValue():String=self.value.repr();
query UML::LiteralString::getInstanceValue():String=self.value;
query UML::LiteralUnlimitedNatural::getInstanceValue():String=self.value.repr();
  

helper UML::ValueSpecification::setXpathToValueSpecification(xpathIn:String):OclVoid{
	// use standard prefixes
	xpathToValueSpecification->forEach(entry){
		if(entry.xpath=xpathIn)then{
			return null;
		}endif;
	};
	xpathToValueSpecification+=Tuple{xpath:String=xpathIn,value:UML::ValueSpecification=self};
	return null;
}
	
helper UML::InstanceSpecification::populateXpathToValueSpecification():OclVoid{
	self.slot.populateXpathToValueSpecification();
	return null;
}	
helper UML::Slot::populateXpathToValueSpecification():OclVoid{
	if(self.definingFeature.oclIsKindOf(UML::Property) and self.definingFeature.oclAsType(UML::Property).isContainment())then{
		self.value.populateXpathToValueSpecification();
	}endif;
	return null;
}	
helper UML::Property::isContainment():Boolean{
	return not(self.aggregation=UML::AggregationKind::none);
}
helper UML::ValueSpecification::populateXpathToValueSpecification():OclVoid{
	if(self.oclIsKindOf(UML::InstanceValue) and not(self.oclAsType(UML::InstanceValue).instance.oclIsKindOf(UML::EnumerationLiteral)))then{
		self.oclAsType(UML::InstanceValue).instance.populateXpathToValueSpecification();
	}else{
		self.setXpathToValueSpecification(self.getXPath());
	}endif;
	return null;
}	
helper UML::ValueSpecification::getXPath():String{
	return self.owningSlot.getXPath();
}	
helper UML::Slot::getXPath():String{
	return self.owningInstance.getXPath()+self.definingFeature.oclAsType(UML::Property).getQName();
}	
helper UML::Property::getQName():String{
	// determine top level element, its prefix
	var referencedPIMTopLevelProperty:UML::Property=self.getResolvedProperty();
	var informationModel:UML::Package=referencedPIMTopLevelProperty.getNearestNIEMSchemaPackage();
	var prefix:String=informationModel.getNamespacePrefix();
	if(prefix.oclIsUndefined())then{
		var targetNamespace:String=informationModel.getSchemaTargetNamespace();
		prefix:=targetNamespace.getPrefixForNamespace();
		if(prefix.oclIsUndefined())then{
			prefix:='UNKNOWN';
		}endif;
	}endif;
	return prefix+':'+referencedPIMTopLevelProperty.toNiemName();
}
helper UML::Type::getQName():String{
	var informationModel:UML::Package=self.getNearestNIEMSchemaPackage();
	var prefix:String=informationModel.getNamespacePrefix();
	if(prefix.oclIsUndefined())then{
		var targetNamespace:String=informationModel.getSchemaTargetNamespace();
		prefix:=targetNamespace.getPrefixForNamespace();
		if(prefix.oclIsUndefined())then{
			if(self.oclAsType(UML::Classifier).isXmlPrimitive())then{
				prefix:='xsd';
			}else{
				prefix:='UNKNOWN';
			}endif;
		}endif;
	}endif;
	return prefix+':'+self.toNiemName();
}
helper String::getPrefixForNamespace():String{
	// use standard prefixes
	prefixToNamespace->forEach(entry){
		if(entry.namespace=self)then{
			return entry.prefix;
		}endif;
	};
	return null;
}

helper UML::Package::getNamespacePrefix():String{
		var pimStereotypeInstance:Stdlib::Element=self.GetStereotypeApplication(NIEMSchemaStereotype).oclAsType(Stdlib::Element);
		// set prefix to be used for Schema namespace
		var defaultPrefix:String=pimStereotypeInstance.getSchemaDefaultPrefix();
		return 	defaultPrefix;
}
helper UML::InstanceSpecification::getXPath():String{
	// if this is top level, result is '', otherwise getXPath for containing slot + '/'
	self._instanceValueOfInstance.owningSlot->forEach(owningSlot){
		if(owningSlot.definingFeature.oclIsKindOf(UML::Property) and owningSlot.definingFeature.oclAsType(UML::Property).isContainment())then{
			return owningSlot.getXPath()+'/';
		}endif;
	};
	return '';
}	
query UML::Model::getDocumentInstances():Set(UML::InstanceSpecification)=
	self.getMpdComponent()->select(c|(c<>null) and not(c.oclIsUndefined())).getMpdFile()
	->select(f|f.isDocumentInstance()).supplier
	->select(f|f.oclIsKindOf(UML::Package)).oclAsType(UML::Package).getPackageDocumentInstance()
	->select(d|(d<>null) and not(d.oclIsUndefined()))
	->asSet();
query UML::Package::getPackageDocumentInstance():UML::InstanceSpecification=
	self.packagedElement->select(i|i.oclIsKindOf(UML::InstanceSpecification)).oclAsType(UML::InstanceSpecification)
	->select(i|i.isRootInstance())->asSequence()->first()
;	
query UML::InstanceSpecification::isRootInstance():Boolean=
	self._instanceValueOfInstance->isEmpty()
	and (self.slot->size()=1)
	and self.slot.definingFeature.getNearestPackage()->forAll(p|p.getEnumerationValue('defaultPurpose')='exchange')
;	
query UML::Element::getEnumerationValue(tagName:String):String=
	self.getInstanceValues(tagName)->select(instance:UML::InstanceSpecification|instance.oclIsKindOf(UML::EnumerationLiteral))
		.oclAsType(UML::EnumerationLiteral).name
		->asSequence()->first()
;		
query UML::Element::getInstanceValues(tagName:String):Sequence(UML::InstanceSpecification)=
	self.getValues(tagName)->select(v:UML::ValueSpecification|v.oclIsKindOf(UML::InstanceValue))
		.oclAsType(UML::InstanceValue).instance
;		
query UML::Element::getValues(tagName:String):Sequence(UML::ValueSpecification)=
	self.appliedStereotypeInstance.slot->select(s|s.definingFeature.name=tagName).value->asSequence();
	
query UML::Dependency::isDocumentInstance():Boolean=
	(self.getEnumerationValue('natureCode')='xml')
	and (self.getEnumerationValue('purposeCode')='sample_instance')
;	
	
query UML::Component::getMpdFile():Collection(Dependency)=
	self.clientDependency->select(d|d.isMpdFile());
query UML::Dependency::isMpdFile():Boolean=
	self.IsStereotypeApplied(NIEMModelPackageDescriptionFileStereotype);
query UML::Model::getMpdComponent():Set(UML::Component)=
	self.allSubobjectsOfType(UML::Component).oclAsType(UML::Component)
			->select(c|
				c.IsStereotypeApplied(prompdStereotype)
				and c.isEditable()
				and not(c.isInPSM())
				)->asSet();
	
query UML::NamedElement::isInPSM():Boolean{
	if(self.oclIsKindOf(UML::Package) and (self.name='PSM'))
		then {return true;}
		else{
			if(self.owner.oclIsUndefined())then {return false;} else{return self.owner.oclAsType(UML::NamedElement).isInPSM();}endif;
		}endif;
}

////////////////////////////////////////////////////////////////////////////////////////////	
