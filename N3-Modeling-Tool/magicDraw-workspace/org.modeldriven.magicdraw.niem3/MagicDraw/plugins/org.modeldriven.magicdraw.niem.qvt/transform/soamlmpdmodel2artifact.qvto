//import org.modeldriven.mda.qvto.web; // java blackbox; contains just a few helpers
//import soaml2wsdlannotations;
import NIEMmpdmodel2artifact;
import soaml2wsdlannotations;
import soamlPlatformBinding;
//modeltype UML "strict" uses 'http://www.eclipse.org/uml2/3.0.0/UML';
modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype XSD  uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype WSDL uses 'http://www.eclipse.org/wsdl/2003/WSDL';
//modeltype SOAP uses 'http://www.ibm.com/wsdl/2003/SOAP';
modeltype SOAP uses 'http://www.eclipse.org/wsdl/2003/SOAP';
//modeltype CAT  uses 'http://reference.niem.gov/niem/resource/mpd/catalog/1.0/';
modeltype CAT  uses 'urn:oasis:names:tc:entity:xmlns:xml:catalog';

modeltype CHANGELOG uses 'http://reference.niem.gov/niem/resource/mpd/changelog/1.0/';
//modeltype PROXY uses 'http://niem.gov/niem/proxy/xsd/2.0';
modeltype WANTLIST uses 'http://niem.gov/niem/wantlist/2';// EXTRA

transformation soamlmpdmodel2artifact(
//	in uml:UML,in targetLocation:XSD,out xsd:XSD,out wsdl:WSDL
	in uml:UML,
	in schemaForProxy:XSD,in schemaForStructures:XSD,in schemaForAppinfo:XSD,in schemaForAppinfo2:XSD,
	out changeLog:CHANGELOG,out xsd:XSD,inout blackboxAdapter:CMOF,out cat:CAT
	,out wantlist:WANTLIST
	,out wsdl:WSDL 
	)
	extends transformation 
//		wsdl,
//		soaml2wsdlannotations;
		soamlPlatformBinding,
		soaml2wsdlannotations(uml:UML,wsdl:WSDL),
		NIEMmpdmodel2artifact;
	main() {
		soaml2xsdRun();
	}	
// soaml uml to vanilla xsd; wsdl 	
helper soaml2xsdRun(){
		blackboxHook:=blackboxAdapter.objectsOfType(CMOF::EPackage)->asSequence()->first();
		var mpdRootPackage:UML::Model=
				uml.rootObjects()
				->select(r|r.oclIsKindOf(UML::Model)).oclAsType(UML::Model)
				->asSequence()->first();
		mpdRootPackage.oclAsType(UML::Model).initializeSoamlProfileGlobals();
		
		
			mpdmodel2artifactMain();
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// find and process any wsdl
		return;
/*				
		
		// initialize global values
		schemaForSchema:=targetLocation.rootObjects()->asSequence()->first().oclAsType(XSD::XSDSchema).schemaForSchema;
		// gather all uml packages and map to xsd elements
		var allProvisionNodes:Set(UML::Node)=uml.objectsOfType(UML::Node)->select(e|e.stereotypedBy(provisioningProfileProvision));
		var allWebServiceProperties:Set(UML::Property)=allProvisionNodes.getAllAttributes()->select(e|e.stereotypedBy(jeeProvisioningProfileJeeWebService))->asSet();
		var identifiedParticipants:Set(UML::Class)=allWebServiceProperties.type
			->select(e|e.stereotypedBy(soaMLProfileParticipant)).oclAsType(UML::Class)->asSet();
		
// expand this to include all participants of any services architecture referencing the participants
		var allServicesArchitectures:Set(UML::Collaboration)=uml.objectsOfType(UML::Collaboration)
			->select(e|
				e.stereotypedBy(provisioningProfileServicesArchitecture) 
				and (e.getAllAttributes()->select(a|a.type.oclIsKindOf(UML::Class)and identifiedParticipants->asSequence()->includes(a.type.oclAsType(UML::Class)))->notEmpty())
				);		
		var allParticipants:Set(UML::Class)=allServicesArchitectures.getAllAttributes().type
			->select(e|e.stereotypedBy(soaMLProfileParticipant)).oclAsType(UML::Class)->asSet();
		var allParticipantPorts:Set(UML::Port)=allParticipants.getAllAttributes()->select(e|e.oclIsKindOf(UML::Port)).oclAsType(UML::Port)->asSet();
		var allServiceInterfaces:Set(UML::Classifier)=allParticipantPorts.type->select(e|e.oclIsKindOf(UML::Class) or e.oclIsKindOf(UML::Interface)).oclAsType(UML::Classifier)->asSet();
		var allRequireds:Set(UML::Interface)=allParticipantPorts.required->select(e|e.stereotypedBy(soaMLProfileProvider)or e.stereotypedBy(soaMLProfileConsumer))->asSet();
		var allProvideds:Set(UML::Interface)=allParticipantPorts.provided->select(e|e.stereotypedBy(soaMLProfileProvider)or e.stereotypedBy(soaMLProfileConsumer))->asSet();
		var allOperations:Set(UML::Operation)=allRequireds->union(allProvideds).getAllOperations()->asSet();
		var allReceptions:Set(UML::Reception)=allRequireds->union(allProvideds).allFeatures()->select(f|f.oclIsKindOf(UML::Reception)).oclAsType(UML::Reception)->asSet();
		var allSignals:Set(UML::Signal)=allReceptions.signal->select(s|s.stereotypedBy(soaMLProfileMessageType))->asSet();
		var allParameters:Set(UML::Parameter)=allOperations.ownedParameter->asSet();
		var allParameterTypes:Set(UML::Classifier)=allParameters.type->select(s|s.stereotypedBy(soaMLProfileMessageType)).oclAsType(UML::Classifier)->asSet();
		var allReferencedPackages:Set(UML::Package)=allSignals.oclAsType(UML::Classifier)->union(allParameterTypes.oclAsType(UML::Classifier)).getNearestPackage()->asSet();	

		// transitive closure of packages will occur during production of xsd
		log(allProvisionNodes->size().repr()+' uml allProvisionNodes');
		log(allWebServiceProperties->size().repr()+' uml allWebServiceProperties');
		log(allParticipants->size().repr()+' uml allParticipants');
		log(allParticipantPorts->size().repr()+' uml allParticipantPorts');
		log(allRequireds->size().repr()+' uml allRequireds');
		log(allProvideds->size().repr()+' uml allProvideds');
		log(allOperations->size().repr()+' uml allOperations');
		log(allSignals->size().repr()+' uml allSignals');
		log(allReferencedPackages->size().repr()+' uml allReferencedPackages');
		// create all the schemas
		var topSchemas:Sequence(XSD::XSDSchema)=allReferencedPackages.map Schema()->asSequence();
		// create all wsdls
		var topWsdls:Sequence(WSDL::Definition)=allServiceInterfaces.map ServiceDefinition()->asSequence();
*/
		// caller must handle splitting of wsdl 
		/*
		// progress report
		log('construction of all xsd elements complete, start split to xsd resources ');
		topWsdls->first().oclAsType(ECORE::EObject).splitWsdls(targetLocation.rootObjects()->asSequence()->first().oclAsType(ECORE::EObject));
		// split uml models into one resource per source mif resource
	topSchemas->first().oclAsType(ECORE::EObject).splitSchemas(targetLocation.rootObjects()->asSequence()->first().oclAsType(ECORE::EObject));
	*/
}
/////////////////////////////////////	overrides
helper 	UML::Package::mapAbstractPackage(){
	//log('soaml mapAbstractPackage '+self.qualifiedName);
	if(self.IsStereotypeApplied(NIEMSchemaStereotype))then{
		self.map AbstractXSDSchema();
	}
	else {
		
		if(self.isWsdlPackage())then{
			// find and map the Definition component
			//log('soaml map definition component ');
//			self.ownedType->select(t|t.isWsdlDefinition()).oclAsType(UML::Classifier).map ServiceDefinition();
			self.ownedType->select(t|t.isWsdlDefinition()).oclAsType(UML::Collaboration).map ServiceDefinition();
		
		}else{
			self.nestedPackage.mapAbstractPackage();
		}endif;
	}endif;	
	
}




