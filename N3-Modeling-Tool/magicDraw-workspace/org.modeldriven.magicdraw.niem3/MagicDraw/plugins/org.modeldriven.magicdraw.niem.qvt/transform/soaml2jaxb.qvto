import NIEMplatformBinding;
import soamlPlatformBinding;
import soaml;

modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype ECORE  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype XSD  uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';
//modeltype CAT  uses 'http://reference.niem.gov/niem/resource/mpd/catalog/1.0/';
modeltype CAT  uses 'urn:oasis:names:tc:entity:xmlns:xml:catalog';

modeltype JAXB  uses 'http://java.sun.com/xml/ns/jaxb';
modeltype XMLTYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

transformation soaml2jaxb(
	in uml:UML,
	inout blackboxAdapter:CMOF,
	out jaxb:JAXB
	)
extends transformation 
	soaml,
	NIEMplatformBinding
;
	main() {
		soaml2jaxbRun();
	}	
// soaml uml to vanilla jaxb 	
helper soaml2jaxbRun(){
		blackboxHook:=blackboxAdapter.objectsOfType(CMOF::EPackage)->asSequence()->first();
	// find the root UML Model
	var rootUmlModel:UML::Model=uml.rootObjects()->select(r|r.oclIsKindOf(UML::Model)).oclAsType(UML::Model)->asSequence()->first();
	// initialize the profile/stereotype/type library globals
	rootUmlModel.initializeProfileGlobals();
	// find and transform qualifying <<ModelPackageDescription>>s
	log('soaml to jaxb root model '+rootUmlModel.qualifiedName+', mpdStereotype: '+prompdStereotype.qualifiedName+', '
		+rootUmlModel.allSubobjectsOfType(UML::Component).oclAsType(UML::Component)->select(c|c.IsStereotypeApplied(prompdStereotype))->size().repr());
	// TODO:  	we should be able to have just one of these per exchange schema
	/*
	rootUmlModel.allSubobjectsOfType(UML::Component).oclAsType(UML::Component)
			->select(c|c.IsStereotypeApplied(prompdStereotype)
				and c.isEditable()
				and not(c.getNearestPackage().getNearesProfileApplication(niemXsdProfile).oclIsUndefined())
				and (c.getNearestPackage().getNearesProfileApplication(logicalProfile).oclIsUndefined())
			).clientDependency
		->select(t|t.isStereotypeApplied(NIEMModelPackageDescriptionFileStereotype)).oclAsType(UML::Usage).supplier
		.getNearestPackage()->select(p|p.isStereotypeApplied(NIEMSchemaStereotype)).map DocumentRoot();
		*/
	rootUmlModel.allSubobjectsOfType(UML::Component).oclAsType(UML::Component)
			->select(c|c.IsStereotypeApplied(prompdStereotype)
				and c.isEditable()
				and not(c.getNearestPackage().getNearesProfileApplication(niemXsdProfile).oclIsUndefined())
				and (c.getNearestPackage().getNearesProfileApplication(logicalProfile).oclIsUndefined())
			).map DocumentRoot();
//			).map BindingsType();
	return;
}		
////////////////////////////////////disjunctive maps
//////////////////////////////////////instantiated maps

mapping UML::Component::DocumentRoot():JAXB::DocumentRoot@jaxb
{
	bindings+=self.map BindingsType();
	// we need to set xmlns:xsd  
	var mapEntry:ECORE::EStringToStringMapEntry=new ECORE::EStringToStringMapEntry();
	mapEntry.key:="xs";
	mapEntry.value:=schemaForSchemaNamespace;
	xMLNSPrefixMap+=mapEntry; 
}

mapping UML::Component::BindingsType():JAXB::BindingsType@jaxb
{
	// we should have a top level for an exchange, with a global binding, and embed schema bindings from that point
	// the top level does not need schemaLocation or type/property bindings, just one global binding plus schemaBindings (inside a BindingsType)
	// or we just have one top level period (per mpd), the global binding is associated with that, all schemabindings are under that
	// note that type/property node bindings should be in the BindingsType that contains the schemaBindingsType
	globalBindings+=self.map GlobalBindingsType();
	//group ? FeatureMap
	//any ? FeatureMap
	bindings+=self.clientDependency
		->select(t|t.isStereotypeApplied(NIEMModelPackageDescriptionFileStereotype)).oclAsType(UML::Usage).supplier
		.getNearestPackage()->select(p|p.isStereotypeApplied(NIEMSchemaStereotype)).map NiemSchemaBindingsType();
//	version1:="2.0"
	version:="2.0"
}
mapping UML::Package::NiemSchemaBindingsType():JAXB::BindingsType@jaxb
{
	//log('NiemSchemaBindingsType '+self.qualifiedName);
	//schemaLocation:=self.name+'.xsd';
	schemaLocation:=self.toPathNameFromRoot(self.getNearestPackage().getNearesProfileApplication(niemXsdProfile),result);
	
	schemaBindings+=self.map SchemaBindingsType();
	// node bindings for types and top level elements/attributes
	bindings+=self.ownedType
		->select(t|not(
				t.isPropertyHolder() or (
					t.oclIsKindOf(UML::Association) and not(t.oclIsKindOf(UML::AssociationClass))
					)
			)
					and t.oclIsKindOf(UML::Classifier)
		).oclAsType(UML::Classifier)
		.map TypeBinding();
	bindings+=self.ownedType->select(t|t.isPropertyHolder()).oclAsType(UML::Class).attribute.map PropertyBinding();
	//group ? FeatureMap
	//any ? FeatureMap
}

mapping UML::Component::GlobalBindingsType():JAXB::GlobalBindingsType@jaxb
{
	//log('GlobalBindingsType '+self.qualifiedName);
	//any:=?
	//attachmentRef:=self.getAttachmentRefType();// not defined in spec
	collectionType:=self.getCollectionType();
	javaType+=self.getJavaTypes().map JavaTypeType();
	// We actually should not see nesting anyway.
	localScoping:=self.getLocalScoping();
//	optionalProperty:=JAXB::OptionalPropertyType::wrapper;
	optionalProperty:=self.getOptionalProperty();
	// uid for serialization not used currently
	serializable:=self.map SerializableType();
	// use default, xs:string
//	typesafeEnumBase+=self.getTypesafeEnumBase();
	self.setTypesafeEnumBase(result);
//	typesafeEnumMaxMembers:=9999;
	typesafeEnumMaxMembers:=self.getTypesafeEnumMaxMembers();
//	typesafeEnumMemberName:=JAXB::TypesafeEnumMemberNameType::generateName;
	typesafeEnumMemberName:=self.getTypesafeEnumMemberName();
	// handling of underscore in name conversions, use default currently
	underscoreBinding:=self.getUnderscoreBinding();
	// use default
	choiceContentProperty:=self.isChoiceContentProperty();// false
	enableFailFastCheck:=self.isEnableFailFastCheck();// true
//	enableJavaNamingConventions:=true;
//	fixedAttributeAsConstantProperty:=true;
	enableJavaNamingConventions:=self.isEnableJavaNamingConventions();
	fixedAttributeAsConstantProperty:=self.isFixedAttributeAsConstantProperty();
	// choice for interface gen; use default for now
	generateElementClass:=self.isGenerateElementClass();//true;
	// always use JAXBElement
	generateElementProperty:=self.isGenerateElementProperty();//true;
	generateIsSetMethod:=self.isGenerateIsSetMethod();//true;
	// choice for interface gen; use default for now
	generateValueClass:=self.isGenerateValueClass();// true
	// know the xsi:type at all times
	mapSimpleTypeDef:=self.isMapSimpleTypeDef();//true;
	
}
mapping UML::Package::SchemaBindingsType():JAXB::SchemaBindingsType@jaxb
{
	// specifying prefix/suffix for symbol spaces 
	//_map:=self.getMap();// does not exist in schema
	nameXmlTransform:=self.map NameXmlTransformType();
	package:=self.map PackageType();
}
/*
<nameXmlTransform>
[ <typeName [ suffix="suffix" ]
[ prefix="prefix" ] /> ]
[ <elementName [ suffix="suffix" ]
[ prefix="prefix" ] />]
[ <modelGroupName [ suffix="suffix" ]
[ prefix="prefix" ] />]
[ <anonymousTypeName [ suffix="suffix" ]
[ prefix="prefix" ] />]
</nameXmlTransform>
*/
mapping UML::Package::NameXmlTransformType():JAXB::NameXmlTransformType@jaxb
{
	typeName:=self.map TypeName();
	elementName:=self.map ElementName();
	modelGroupName:=self.map ModelGroupName();
	anonymousTypeName:=self.map AnonymousTypeName();
}

mapping UML::Package::TypeName():JAXB::NameXmlTransformRule@jaxb
{
	suffix:=self.getTypeNameSuffix();
	prefix:=self.getTypeNamePrefix();
}
mapping UML::Package::ElementName():JAXB::NameXmlTransformRule@jaxb
{
	suffix:=self.getElementNameSuffix();
	prefix:=self.getElementNamePrefix();
}
mapping UML::Package::ModelGroupName():JAXB::NameXmlTransformRule@jaxb
{
	suffix:=self.getModelGroupNameSuffix();
	prefix:=self.getModelGroupNamePrefix();
}
mapping UML::Package::AnonymousTypeName():JAXB::NameXmlTransformRule@jaxb
{
	suffix:=self.getAnonymousTypeNameSuffix();
	prefix:=self.getAnonymousTypeNamePrefix();
}
mapping UML::Package::PackageType():JAXB::PackageType@jaxb
{
	name:=self.getPackageName();
	self.ownedComment.body->forEach(body){javadoc:=body};
}
mapping UML::InstanceSpecification::JavaTypeType():JAXB::JavaTypeType@jaxb
{
	name:=self.getJavaTypeName();
	parseMethod+=self.getParseMethod();
	printMethod+=self.getPrintMethod();
	//xmlType:=self.getXmlType();
	self.setXmlType(result);
	//hasNsContext:=self.isHasNsContext();// no description of this
}
mapping UML::Component::SerializableType():JAXB::SerializableType@jaxb
	when{not(self.getUid().oclIsUndefined())}
{
	uid:=self.getUid();
}
mapping UML::Classifier::TypeBinding():JAXB::BindingsType@jaxb
{
	//log('TypeBinding '+self.qualifiedName);
	_class+=self.map TypeClassType();
	dom+=self.map TypeDomType();
	//group ?
	//any ?
	// use default
	inlineBinaryData+=self.getInlineBinaryData();
	javaType+=self.getJavaTypes().map JavaTypeType();
	var typeName:String='complexType';
	if(self.isSimpleType())then{typeName:='simpleType'}endif;
	node:='//xs:'+typeName+'[@name="'+self.getBaseNiemName()+'"]';
//	_property+=self.map TypePropertyType();
	//_property+=self.attribute.map PropertyType();
	if(self.oclIsKindOf(UML::Enumeration))then{
		typesafeEnumClass+=self.oclAsType(UML::Enumeration).map TypesafeEnumClass();
	}endif;
}
mapping UML::Property::PropertyBinding():JAXB::BindingsType@jaxb
{
	//log('PropertyBinding '+self.qualifiedName);
	//_class+=self.map PropertyClassType();
	dom+=self.map PropertyDomType();
	//group ?
	//any ?
	// use default
	inlineBinaryData+=self.getInlineBinaryData();
	var typeName:String='element';
	if(self.isAttribute())then{typeName:='attribute'}endif;
	node:='//xs:'+typeName+'[@name="'+self.getBaseNiemName()+'"]';
	_property+=self.map PropertyType();
}
mapping UML::Type::TypeClassType():JAXB::ClassType@jaxb
{
	// use default
	implClass+=self.getImplClass();
	self.ownedComment.body->forEach(body){javadoc:=body};
	// use default
	name+=self.getClassName();
	//generateValueClass:=  // this is not in jaxb spec
	//ref  // this is in jaxb spec but not in schema
}
mapping UML::Property::PropertyClassType():JAXB::ClassType@jaxb
{
	// use default
	implClass+=self.getImplClass();
	self.ownedComment.body->forEach(body){javadoc:=body};
	// use default
	name+=self.getClassName();
	//generateValueClass:=  // this is not in jaxb spec
}
mapping UML::Type::TypeDomType():JAXB::DomType@jaxb
	when{not(self.getDomType().oclIsUndefined())}
{
	// default is w3c
		type:=self.getDomType();
}
mapping UML::Property::PropertyDomType():JAXB::DomType@jaxb
	when{not(self.getDomType().oclIsUndefined())}
{
	// default is w3c
	type:=self.getDomType();
}
/*
mapping UML::Type::TypeJavaTypeType():JAXB::JavaTypeType@jaxb
{
	// currently not used
	//name+=
	//parseMethod+=
	//printMethods+=
	//xmlType:=
	//isHasNsContext:=
}
mapping UML::Type::TypePropertyType():JAXB::PropertyType@jaxb
{
	//use default
	baseType:=self.map PropertyBaseType();
	
	// use default, List
	attachmentRef:=self.getAttachmentRefType();
	collectionType:=self.getCollectionType();
	self.ownedComment.body->forEach(body){javadoc:=body};
	// use default
	name+=self.getPropertyName();
//	optionalProperty:=JAXB::OptionalPropertyType::wrapper;
	optionalProperty:=self.getOptionalProperty();
	enableFailFastCheck:=self.isEnableFailFastCheck();// true
	fixedAttributeAsConstantProperty:=self.isFixedAttributeAsConstantProperty();//true
	// use default
	generateElementProperty:=self.isGenerateElementProperty();//true;
	generateIsSetMethod:=self.isGenerateIsSetMethod();// true
}
mapping UML::Type::PropertyBaseType():JAXB::PropertyBaseType@jaxb
{
	javaType:=self.getJavaTypes().map JavaTypeType();
	name:=self.getPropertyName();
}
*/

mapping UML::Property::PropertyBaseType():JAXB::PropertyBaseType@jaxb
	when{not(self.getPropertyName().oclIsUndefined()) or not(self.getJavaTypes()->isEmpty())}
{
	javaType:=self.getJavaTypes().map JavaTypeType()->asSequence()->first();
	name:=self.getPropertyName();
}
mapping UML::Property::PropertyType():JAXB::PropertyType@jaxb
{
	//use default
	baseType:=self.map PropertyBaseType();
	attachmentRef:=self.getAttachmentRefType();
	collectionType:=self.getCollectionType();
	self.ownedComment.body->forEach(body){javadoc:=body};
	name+=self.getPropertyName();
	optionalProperty:=self.getOptionalProperty();
	enableFailFastCheck:=self.isEnableFailFastCheck();// true
	fixedAttributeAsConstantProperty:=self.isFixedAttributeAsConstantProperty();//true
	// use default
	generateElementProperty:=self.isGenerateElementProperty();//true;
	generateIsSetMethod:=self.isGenerateIsSetMethod();// true
}

mapping UML::Enumeration::TypesafeEnumClass():JAXB::TypesafeEnumClassType@jaxb
{
	self.ownedComment.body->forEach(body){javadoc:=body};
	name+=self.getEnumClassName();
	// for now, let default mechanism handle 
	typesafeEnumMember+=self.ownedLiteral.map TypesafeEnumMemberType();
	_map:=self.getMap();//false;// not an enum
}

mapping UML::EnumerationLiteral::TypesafeEnumMemberType():JAXB::TypesafeEnumMemberType@jaxb
{
	
	self.ownedComment.body->forEach(body){javadoc:=body};
	//name:=Sequence{self.getEnumMemberName()};
	self.setTypesafeEnumMemberTypeName(result);
	value:=self.getBaseNiemName();
}
////////////////////TODO
helper UML::Component::getTypesafeEnumMaxMembers():Integer{
	return self.getStereotypeApplication().getIntegerValue('typesafeEnumMaxMembers');
}
helper UML::Component::isChoiceContentProperty():Boolean{
	return self.getStereotypeApplication().getBooleanValue('choiceContentProperty');
}
helper UML::NamedElement::isEnableFailFastCheck():Boolean{
	return self.getStereotypeApplication().getBooleanValue('enableFailFastCheck');
}
helper UML::Component::isEnableJavaNamingConventions():Boolean{
	return self.getStereotypeApplication().getBooleanValue('enableJavaNamingConventions');
}
helper UML::NamedElement::isFixedAttributeAsConstantProperty():Boolean{
	return self.getStereotypeApplication().getBooleanValue('fixedAttributeAsConstantProperty');
}

helper UML::Component::isGenerateElementClass():Boolean{
	return self.getStereotypeApplication().getBooleanValue('generateElementClass');
}
helper UML::NamedElement::isGenerateElementProperty():Boolean{
	return self.getStereotypeApplication().getBooleanValue('generateElementProperty');
}
helper UML::NamedElement::isGenerateIsSetMethod():Boolean{
	return self.getStereotypeApplication().getBooleanValue('generateIsSetMethod');
//	return true;
}
helper UML::Component::isGenerateValueClass():Boolean{
	return self.getStereotypeApplication().getBooleanValue('generateValueClass');
//	return true;
}
helper UML::Component::isMapSimpleTypeDef():Boolean{
	return self.getStereotypeApplication().getBooleanValue('mapSimpleTypeDef');
	//return true;
}
helper UML::Package::getTypeNameSuffix():String{
	return self.getStereotypeApplication().getStringValue('typeNameSuffix');
}
helper UML::Package::getTypeNamePrefix():String{
	return self.getStereotypeApplication().getStringValue('typeNamePrefix');
}
helper UML::Package::getElementNameSuffix():String{
	return self.getStereotypeApplication().getStringValue('elementNameSuffix');
}
helper UML::Package::getElementNamePrefix():String{
	return self.getStereotypeApplication().getStringValue('elementNamePrefix');
}
helper UML::Package::getModelGroupNameSuffix():String{
	return self.getStereotypeApplication().getStringValue('modelGroupNameSuffix');
}
helper UML::Package::getModelGroupNamePrefix():String{
	return self.getStereotypeApplication().getStringValue('modelGroupNamePrefix');
}
helper UML::Package::getAnonymousTypeNameSuffix():String{
	return self.getStereotypeApplication().getStringValue('anonymousTypeNameSuffix');
}
helper UML::Package::getAnonymousTypeNamePrefix():String{
	return self.getStereotypeApplication().getStringValue('anonymousTypeNamePrefix');
}
helper UML::Package::getPackageName():String{
	return self.getStereotypeApplication().getStringValue('packageName');
}
helper UML::InstanceSpecification::getJavaTypeName():String{
	return self.getStereotypeApplication().getStringValue('javaTypeName');
}
helper UML::InstanceSpecification::getParseMethod():String{
	return self.getStereotypeApplication().getStringValue('parseMethod');
}
helper UML::InstanceSpecification::getPrintMethod():String{
	return self.getStereotypeApplication().getStringValue('printMethod');
}
helper UML::Component::getUid():Integer{
	return self.getStereotypeApplication().getIntegerValue('uid');
}
helper UML::NamedElement::getImplClass():String{
	return self.getStereotypeApplication().getStringValue('implClass');
}
helper UML::NamedElement::getClassName():String{
	return self.getStereotypeApplication().getStringValue('className');
}
helper UML::NamedElement::getDomType():String{
	return self.getStereotypeApplication().getStringValue('dom');
}
helper UML::Property::getPropertyName():String{
	return self.getStereotypeApplication().getStringValue('propertyName');
}
helper UML::Enumeration::getEnumClassName():String{
	return self.getStereotypeApplication().getStringValue('enumClassName');
}	
helper UML::Enumeration::getMap():Boolean{
	return self.getStereotypeApplication().getBooleanValue('map');
}	
helper UML::EnumerationLiteral::getEnumMemberName():String{
	var enumMemberName:String= self.getStereotypeApplication().getStringValue('enumMemberName');
	if(enumMemberName.oclIsUndefined())then{return self.name.javaName();}endif;
	return enumMemberName;
}	
helper UML::NamedElement::getAttachmentRefType():JAXB::AttachmentRefType{
	var name:String=self.getStereotypeApplication().getEnumerationLiteralValue('attachmentRef').name;
	if(name.oclIsUndefined())then{return null;}endif;
	if(name='default')then{return JAXB::AttachmentRefType::_default;}endif;
	if(name='resolve')then{return JAXB::AttachmentRefType::_resolve;}endif;
	return JAXB::AttachmentRefType::doNotResolve;
}
helper UML::Component::getLocalScoping():JAXB::LocalScopingType{
	var name:String=self.getStereotypeApplication().getEnumerationLiteralValue('localScoping').name;
	if(name.oclIsUndefined())then{return null;}endif;
	if(name='nested')then{return JAXB::LocalScopingType::nested;}endif;
	return JAXB::LocalScopingType::toplevel;
}
helper UML::NamedElement::getOptionalProperty():JAXB::OptionalPropertyType{
	var name:String=self.getStereotypeApplication().getEnumerationLiteralValue('optionalProperty').name;
	if(name.oclIsUndefined())then{return null;}endif;
	if(name='isSet')then{return JAXB::OptionalPropertyType::isSet;}endif;
	if(name='primitive')then{return JAXB::OptionalPropertyType::_primitive;}endif;
	return JAXB::OptionalPropertyType::wrapper;
}
helper UML::Component::getTypesafeEnumMemberName():JAXB::TypesafeEnumMemberNameType{
	var name:String=self.getStereotypeApplication().getEnumerationLiteralValue('typesafeEnumMemberName').name;
	if(name.oclIsUndefined())then{return null;}endif;
	if(name='generateError')then{return JAXB::TypesafeEnumMemberNameType::generateError;}endif;
	if(name='generateName')then{return JAXB::TypesafeEnumMemberNameType::generateName;}endif;
	return JAXB::TypesafeEnumMemberNameType::skipGeneration;
}
helper UML::Component::getUnderscoreBinding():JAXB::UnderscoreBindingType{
	var name:String=self.getStereotypeApplication().getEnumerationLiteralValue('underscoreBinding').name;
	if(name.oclIsUndefined())then{return null;}endif;
	if(name='asCharInWord')then{return JAXB::UnderscoreBindingType::asCharInWord;}endif;
	return JAXB::UnderscoreBindingType::asWordSeparator;
}
helper UML::NamedElement::getCollectionType():String{
	return self.getStereotypeApplication().getStringValue('collectionType');
}
helper UML::NamedElement::getJavaTypes():Sequence(UML::InstanceSpecification){
	return self.getStereotypeApplication().getInstanceValues('javaTypes');
}
helper UML::NamedElement::getInlineBinaryData():ECORE::EObject
{
	var inlineBinaryData:Boolean= self.getStereotypeApplication().getBooleanValue('inlineBinaryData');
	if(inlineBinaryData.oclIsUndefined() or not(inlineBinaryData)) then {return null;}endif;
	return new JAXB::SerializableType().oclAsType(ECORE::EObject);
}
query UML::Type::isSimpleType():Boolean=false;
query UML::Property::isAttribute():Boolean=false;
//query UML::NamedElement::getNIEMName():String=self.name;	
/*
helper UML::Component::getTypesafeEnumBase():XMLTYPE::QName{
	// asumme that the namespace is xml schema
	var typesafeEnumBase:String=self.getStereotypeApplication().getStringValue('typesafeEnumBase');
	if(typesafeEnumBase.oclIsUndefined())then{return null;}endif;
	return typesafeEnumBase.getXmlQname();
}
helper UML::InstanceSpecification::getXmlType():XMLTYPE::QName{
	var xmlType:String=self.getStringValue('xmlType');
	if(xmlType.oclIsUndefined())then{return null;}endif;
	return xmlType.getXmlQname();
}
helper String::getXmlQname():XMLTYPE::QName{
	// no way to get qname back to qvt?
	var xmlType:String=self.getStringValue('xmlType');
	if(xmlType.oclIsUndefined())then{return null;}endif;
	return xmlType.getXmlQname();
}
*/
// TODO : update the blackbox adapter to set qname for these
helper UML::InstanceSpecification::setXmlType(javaType:JAXB::JavaTypeType):Void{
	var xmlType:String=self.getStringValue('xmlType');
	if(not(xmlType.oclIsUndefined()))then{
		var annotation:CMOF::EAnnotation=new CMOF::EAnnotation('setXmlType');
		annotation._references+=javaType.oclAsType(CMOF::EObject);
		"qname".setAnnotationDetail(annotation,xmlType);
		blackboxHook.eAnnotations+=annotation;
	}endif;
}
helper UML::Component::setTypesafeEnumBase(globalBindings:JAXB::GlobalBindingsType):Void{
	// asumme that the namespace is xml schema
	var typesafeEnumBases:Sequence(String)=self.getStereotypeApplication().getStringValues('typesafeEnumBase');
	typesafeEnumBases->forEach(typesafeEnumBase){
		var annotation:CMOF::EAnnotation=new CMOF::EAnnotation('setTypesafeEnumBase');
		annotation._references+=globalBindings.oclAsType(CMOF::EObject);
		"qname".setAnnotationDetail(annotation,typesafeEnumBase);
		blackboxHook.eAnnotations+=annotation;
	}
}
helper UML::EnumerationLiteral::setTypesafeEnumMemberTypeName(typesafeEnumMemberType:JAXB::TypesafeEnumMemberType):Void{
		var annotation:CMOF::EAnnotation=new CMOF::EAnnotation('setTypesafeEnumMemberTypeName');
		annotation._references+=typesafeEnumMemberType.oclAsType(CMOF::EObject);
		"name".setAnnotationDetail(annotation,self.getEnumMemberName());
		blackboxHook.eAnnotations+=annotation;
	return null;	
}

helper String::javaName():String{
	return self;
}
