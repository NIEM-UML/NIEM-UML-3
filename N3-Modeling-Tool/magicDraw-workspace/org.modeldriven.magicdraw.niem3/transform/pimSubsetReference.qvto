/*
NIEM UML 
Copyright ï¿½ 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
*/
//import niemcommon;
import pimSubsetReferenceN20;

modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype ECORE  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation pimSubsetReference(inout pimUml:UML,inout blackboxAdapter:CMOF)
//	extends transformation niemcommon;
	extends transformation pimSubsetReferenceN20;
	
	main() {
//		log('Start Subset Reference Models ');
//		var pimPackages:Set(UML::Package)=initPimSubsetReference();
		pimPackages:=initPimSubsetReference();
if(false)then{log('SUPPRESS all NIEM conversions');}else{		
	
if(false)then{log('SUPPRESS NIEM 2.0 to 2.1 conversion');}else{		
		niem20to21();
		niem21to30();
}endif;		
		pimPackages->forEach(pimPackage){
			var matchedReferencePackage:UML::Package=pimPackage.findMatchedReferencePackage();	
			if(matchedReferencePackage.oclIsUndefined())then{
				if(pimPackage.getTargetNamespace().startsWith(baseNiemNamespace))then{
					log('WARNING domain package not matched with reference model: '+pimPackage.qualifiedName+', namespace '+pimPackage.getTargetNamespace());
					// if this was a "subset", change it to "extension"
					var informationModelInstance:Stdlib::Element=pimPackage.GetStereotypeApplication(NIEMInformationModelStereotype).oclAsType(Stdlib::Element);
					var purposeCode:String=informationModelInstance.getInformationModelDefaultPurpose();
					
					if(purposeCode='subset')then{
						informationModelInstance.setInformationModelDefaultPurpose('extension');
					}endif;
					
				}else{
					// scan for augmentation properties in non-subset schemas and handle as required
					/*
					pimPackage.ownedType
						->select(t|not(t.isPropertyHolder())and t.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
						->forEach(p){
							p.baseNiem21to30Property();
						};
					*/
				}endif;
			}else{
				matchedReferencePackage.createPackageReference(pimPackage);
			}endif;		
		};
		
		// generalizations
		var pimClassifiers:Set(UML::Classifier)=
			pimDomainModel.allSubobjectsOfKind(UML::Classifier).oclAsType(UML::Classifier)
//			->select(c|not(c.isStereotypeApplied(NIEMPropertyHolderStereotype)))	
			->select(c|
				(c.getNearestPackage().referencesReferencePackage() 
					or namespace21to3Remove.n21->select(ns|ns=c.getNearestPackage().getTargetNamespace())->notEmpty()
				)
				 and not(c.isStereotypeApplied(NIEMPropertyHolderStereotype)))	
			->asSet();
//		referenceClassifiers:=pimReferenceModel.allSubobjectsOfKind(UML::Classifier).oclAsType(UML::Classifier)->asSet();
		referenceClassifiers:=pimReferenceSchemas.ownedType.oclAsType(UML::Classifier)->asSet();
		log('pimClassifiers count: '+pimClassifiers->size().repr()+', referenceClassifiers : '+referenceClassifiers->size().repr());
		pimClassifiers->forEach(pimClassifier){
			var matchedReferenceClassifier:UML::Classifier=pimClassifier.findMatchedReferenceClassifier();	
			if(matchedReferenceClassifier.oclIsUndefined())then{
				if(pimClassifier.getNearestPackage().getTargetNamespace().startsWith(baseNiemNamespace))then{
//				if(pimClassifier.getNearestPackage().getDomainTargetNamespace().startsWith('http://niem.gov/niem/'))then{
//				log('WARNING domain classifier not matched with reference model: '+pimClassifier.qualifiedName+', namespace '+pimClassifier.getNearestPackage().getDomainTargetNamespace());
				log('WARNING domain classifier not matched with reference model: '+pimClassifier.qualifiedName+', namespace '+pimClassifier.getNearestPackage().getTargetNamespace());
				}else{}endif;
			}else{
				matchedReferenceClassifier.createSubsetGeneralization(pimClassifier);
			}endif;		
		};
		pimClassifiers
		->forEach(pimClassifier){
			var matchedReferenceClassifier:UML::Classifier=pimClassifier.findMatchedReferenceClassifier();	
			if(matchedReferenceClassifier.oclIsUndefined())then{}else{
				matchedReferenceClassifier.createSubsetRedefinition(pimClassifier);
			}endif;		
		};
}endif;		
	}
//property subsetsStereotype:UML::Stereotype=null;	
//property referenceSchemaComponent:UML::Component=null;
property domainSchemaComponent:UML::Component=null;
//property logicalProfile:UML::Profile=null; // the niem logical uml profile
//property provisioningProfile:UML::Profile=null; // the niem logical uml profile
//property pimReferenceModel:UML::Package=null; // 
property pimReferenceModels:Set(UML::Package)=null; // 
property pimReferenceSchemas:Set(UML::Package)=null; // 
property pimDomainModel:UML::Package=null; // 
property umlModel:UML::Package=null; // 
property referenceClassifiers:Set(UML::Classifier)=Set{};
helper initPimSubsetReference():Set(UML::Package) {
		blackboxHook:=blackboxAdapter.objectsOfType(CMOF::EPackage)->asSequence()->first();
		// in-place modification for pim uml
		// generalize from pim to pimReference
		// explicitly hook in redefinitions
		//  also redefine zero cardinality any missing
		// report any discrepencies
		log('Start Subset Reference Models ');
//		umlModel:=pimUml.objectsOfType(UML::Model)->asSequence()->first();
		umlModel:=pimUml.rootObjects()
			->select(m|m.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)->asSequence()->first();
			/*
//		var allTargetProfiles:Set(UML::Profile)=pimUml.objectsOfType(UML::Profile);
		var allTargetProfiles:Set(UML::Profile)=umlModel.allSubobjectsOfType(UML::Profile).oclAsType(UML::Profile)->asSet();
		allTargetProfiles
			->select(p|p.name=provisioningProfileName)->asSequence()->first().initProvisioningProfileStereotypes();//getProvisioningProfile();
		allTargetProfiles->select(p|p.name=logicalProfileName)
			->asSequence()->first().initLogicalProfileStereotypes();//getLogicalProfile();
		allTargetProfiles->select(p|p.name=structureProfileName)
			->asSequence()->first().initStructureProfileStereotypes();//getLogicalProfile();
		allTargetProfiles->select(p|p.name=niemXsdProfileName)
			->asSequence()->first().initNiemXsdProfileStereotypes();//getLogicalProfile();
			*/
		umlModel.oclAsType(UML::Model).initializeProfileGlobals();	
		// 
		pimReferenceModels:=umlModel.packagedElement
			->select(p|
				//not(p.isEditable()) 
				'niem'=p.name
				and p.oclIsKindOf(UML::Package)
				)
			.oclAsType(UML::Package)->asSet();
		pimReferenceSchemas:=pimReferenceModels
			.allSubobjectsOfKind(UML::Package).oclAsType(UML::Package)
			->select(p|p.isStereotypeApplied(NIEMSchemaStereotype))->asSet();
		/*
		pimReferenceModel:=umlModel.packagedElement
			->select(p|(p.name=niemReferenceModelName)and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)->asSequence()->first();
		*/	
			/*
		referenceSchemaComponent:=umlModel.packagedElement
			->select(p|(p.name.startsWith(niemReferenceModelName))and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)
			.packagedElement->select(p|p.oclIsKindOf(UML::Component))
			.oclAsType(UML::Component)
			->asSequence()->first();
			*/
		pimDomainModel:=umlModel.packagedElement
			->select(p|p.oclIsKindOf(UML::Model) 
//				and (p<>pimReferenceModel) 
				and (p.isEditable()) 
				and p.oclAsType(UML::Model).nestedPackage->notEmpty()
//				and (p.name<>'XMLPrimitiveTypes')
				)
			.oclAsType(UML::Model)->asSequence()->first();
//		domainSchemaComponent:=pimDomainModel.getSchemaComponent();
		domainSchemaComponent:=umlModel.packagedElement
//			->select(p|not(p.name.startsWith(niemReferenceModelName))and p.oclIsKindOf(UML::Model))
			->select(p|p.isEditable() and p.oclIsKindOf(UML::Model))
			.oclAsType(UML::Model)
			.packagedElement->select(p|p.oclIsKindOf(UML::Component))
			.oclAsType(UML::Component)
			->asSequence()->first();
		/*
		logicalProfile:=pimUml.objectsOfType(UML::Profile)->select(p|p.name=logicalProfileName)->asSequence()->first();
		provisioningProfile:=pimUml.objectsOfType(UML::Profile)->select(p|p.name=provisioningProfileName)->asSequence()->first();
		subsetsStereotype:=logicalProfile.getOwnedStereotype('References');
		*/
		
		log('domain Component '+domainSchemaComponent.qualifiedName+', domain model '+pimDomainModel.qualifiedName+', root model '+umlModel.qualifiedName);
//		log('domain Component '+domainSchemaComponent.qualifiedName+', reference component '+referenceSchemaComponent.qualifiedName+', domain model '+pimDomainModel.qualifiedName);
//		log('model '+umlModel.qualifiedName+', referenceModel '+pimReferenceModel.qualifiedName+', '+subsetsStereotype.qualifiedName);
//		log('model '+umlModel.qualifiedName+', referenceModel '+pimReferenceModel.qualifiedName+', '+NIEMReferencesStereotype.qualifiedName);
		log('model '+umlModel.qualifiedName+', '+NIEMReferencesStereotype.qualifiedName);
		
		// package references
		var pimPackages:Set(UML::Package)=
			pimDomainModel.allSubobjectsOfKind(UML::Package).oclAsType(UML::Package)
			->select(p|p.isStereotypeApplied(NIEMSchemaStereotype))
			->asSet();
		log('pimPackages count: '+pimPackages->size().repr()+', referenceModels : '+pimReferenceModels->size().repr()+', referencePackages : '+pimReferenceSchemas->size().repr());
		return pimPackages;
	}
/*
query UML::Package::getSchemaComponent():UML::Component{
	var mdpComponent:UML::Component=self._directedRelationshipOfTarget
	->select(r|r.oclIsKindOf(UML::ElementImport) and r.oclAsType(UML::ElementImport).importingNamespace.oclIsKindOf(UML::Component))
	.oclAsType(UML::ElementImport).importingNamespace.oclAsType(UML::Component)
	->asSequence()->first();
	return mdpComponent;	
}
*/
query UML::Classifier::findMatchedReferenceClassifier():UML::Classifier=referenceClassifiers
	->select(c|c.isMatchedReferenceClassifier(self))->asSequence()->first();
query UML::Classifier::isMatchedReferenceClassifier(umlClassifier:UML::Classifier):Boolean=
//	(self.oclType()=umlClassifier.oclType())
	// if enumerations are empty, they may end up as PrimitiveTypes in subset
	(self.oclIsKindOf(DataType)=umlClassifier.oclIsKindOf(DataType))
	and (self.oclIsKindOf(Class)=umlClassifier.oclIsKindOf(Class))
	and (self.name=umlClassifier.name)
//	and self.owner.oclIsKindOf(UML::Package)
//	and umlClassifier.owner.oclIsKindOf(UML::Package)
	and self.getNearestPackage().isMatchedReferencePackage(umlClassifier.getNearestPackage())
//	and (self.stereotypedBy('Association')=umlClassifier.stereotypedBy('Association'))
	and (self.isStereotypeApplied(NIEMAssociationStereotype)=umlClassifier.isStereotypeApplied(NIEMAssociationStereotype))
	;
query UML::Package::findMatchedReferencePackage():UML::Package=pimReferenceSchemas
	->select(c|c.isMatchedReferencePackage(self))->asSequence()->first();
query UML::Package::isMatchedReferencePackage(umlPackage:UML::Package):Boolean=
	// this should be based on namespace match
	(self.oclType()=umlPackage.oclType())
//	and (self.name=umlPackage.name)
//	and (self.getReferenceTargetNamespace()=umlPackage.getDomainTargetNamespace())
	and (self.getTargetNamespace()=umlPackage.getTargetNamespace())
	;
	/*
query UML::Package::getReferenceTargetNamespace():String=self.getTargetNamespace(referenceSchemaComponent);	
query UML::Package::getDomainTargetNamespace():String=self.getTargetNamespace(domainSchemaComponent);	
query UML::Package::getTargetNamespace(schemaComponent:UML::Component):String=
	schemaComponent.elementImport->select(e|e.importedElement=self).alias->asSequence()->first();
*/
query OclAny::oclType():ECORE::EClass=self.oclAsType(ECORE::EObject).eClass();	
helper UML::Classifier::createSubsetGeneralization(umlClassifier:UML::Classifier){
	if(umlClassifier.getReferences()->includes(self))then{}else{
		var realization:UML::Realization=new UML::Realization@pimUml();
		realization.client:=umlClassifier;
		realization.supplier:=self;
		umlClassifier.getNearestPackage().packagedElement+=realization;
//		realization.applyStereotype(subsetsStereotype);
		realization.applyStereotype(NIEMReferencesStereotype);
		
	}endif;
/*
	if(umlClassifier.general->includes(self))then{}else{
		var generalization:UML::Generalization=new UML::Generalization();
		generalization.specific:=umlClassifier;
		generalization.general:=self;
	}endif;
	umlClassifier.generalization->select(g|g.general=self)->forEach(generalization){
		if(generalization.isStereotypeApplied(subsetsStereotype))then{}else{
			generalization.applyStereotype(subsetsStereotype);
		}endif;
	};
	*/
}
helper UML::Package::createPackageReference(inout umlPackage:UML::Package){
	if(umlPackage.getPackageReferences()->includes(self))then{}else{
		var realization:UML::Realization=umlPackage.createRealizes();
		realization.client:=umlPackage;
		realization.supplier:=self;
	}endif;
}
helper UML::Package::referencesReferencePackage():Boolean{
	return self.getPackageReferences()->notEmpty();
}
	
query UML::Property::isRedefinedPropertyMatch(umlProperty:UML::Property):Boolean{
	return (self.name=umlProperty.name)
		and(
			((umlProperty.subsettedProperty->size()=0) and (self.subsettedProperty->size()=0))
			or (
				(umlProperty.subsettedProperty->size()=1) and (self.subsettedProperty->size()=1)
				and (umlProperty.subsettedProperty->asSequence()->first().name = self.subsettedProperty->asSequence()->first().name)
				)
		)
		and(
			((umlProperty.type=null) and (self.type=null))
			or (
				((umlProperty.type<>null)and(self.type<>null))
				and (umlProperty.type.name=self.type.name)
				and (umlProperty.type.getNearestPackage().name=self.type.getNearestPackage().name)
				)
		)
		; 
}
query UML::Property::getRedefinedProperty(umlClassifier:UML::Classifier):UML::Property{
	var umlAttributes:Sequence(UML::Property)=umlClassifier.attribute->select(a|self.isRedefinedPropertyMatch(a))->asSequence();
	if(umlAttributes->isEmpty())then{return null;}else{
		if(umlAttributes->size()=1)then{
			return umlAttributes->first();
		}else{}endif;
	}endif;
	// check for type match
	return null;
}
helper UML::Classifier::createSubsetRedefinition(umlClassifier:UML::Classifier){
	// redefinitions
	self.attribute->forEach(referenceAttribute){
		var umlAttribute:UML::Property=referenceAttribute.getRedefinedProperty(umlClassifier);
		if(umlAttribute.oclIsUndefined())then{
			//log('createSubsetGeneralization missing referenceAttribute '+referenceAttribute.qualifiedName);
			referenceAttribute.suppressProperty(umlClassifier);
		}else{
			//log('createSubsetGeneralization matched referenceAttribute '+referenceAttribute.qualifiedName);
			referenceAttribute.redefineProperty(umlAttribute);
		}endif;
	};
	// check for extra attributes
	umlClassifier.attribute->forEach(umlAttribute){
		var referenceAttribute:UML::Property=self.attribute->select(a|a.name=umlAttribute.name)->asSequence()->first();
		if(referenceAttribute.oclIsUndefined())then{
			// this is not an error at this level, may be substitutionGroup override
			//log('ERROR: added attribute undefined in reference model: '+umlAttribute.qualifiedName+', reference class: '+self.qualifiedName);
		}else{
		}endif;
	};
	//log('createSubsetRedefinition for '+self.qualifiedName+' from reference '+umlClassifier.qualifiedName);
}
helper UML::Property::redefineProperty(inout umlAttribute:UML::Property){
	// set redefinedProperty (if not already) and verify cardinality, type
	/*
	if(umlAttribute.redefinedProperty->includes(self))then{}else{
		umlAttribute.redefinedProperty+=self;
	}endif;
	*/
	if(umlAttribute.lower<self.lower)then{
		log('ERROR: redefineProperty minimum cardinality violation for '+self.qualifiedName+', reference lower='+self.lower.repr()+', redefined to '+umlAttribute.lower.repr());
	}else{}endif;
	if((self.upper>=0) and (umlAttribute.upper>self.upper))then{
		log('ERROR: redefineProperty maximum cardinality violation for '+self.qualifiedName);
	}else{}endif;
	if(self.type.oclIsUndefined() or self.type.isConsistentWith(umlAttribute.type))then{}else{
		log('ERROR: redefineProperty type inconsistent for '+self.qualifiedName+', reference type '
			+self.type.qualifiedName+', redefined to '+umlAttribute.type.qualifiedName
			+', domain references='+umlAttribute.type.oclAsType(UML::Classifier).getReferences()->size().repr()
//			+', domain type namespace '+umlAttribute.type.getNearestPackage().getDomainTargetNamespace()+', reference type namespace '+self.type.getNearestPackage().getReferenceTargetNamespace());
			+', domain type namespace '+umlAttribute.type.getNearestPackage().getTargetNamespace()+', reference type namespace '+self.type.getNearestPackage().getTargetNamespace());
	}endif;
}
query UML::Type::isConsistentWith(umlClassifier:UML::Type):Boolean=
	self.oclIsKindOf(UML::Classifier)
	and umlClassifier.oclIsKindOf(UML::Classifier)
	and (
		(self=umlClassifier) 
		or (umlClassifier.oclAsType(UML::Classifier).allReferenceParents()
			->includes(self.oclAsType(UML::Classifier))
			)
		);
query UML::Classifier::allReferenceParents():Set(UML::Classifier)=
	self.allParents()
	->union(self.getReferences())
	->union(self.getReferences().allReferenceParents())
	->select(g|(g<>null)and not(g.oclIsUndefined()))->asSet();
query UML::Classifier::getReferences():Set(UML::Classifier)=
	self.clientDependency
//	->select(r|r.isStereotypeApplied(subsetsStereotype)).target
	->select(r|r.isStereotypeApplied(NIEMReferencesStereotype)).target
	
	->select(t|t.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier)
	->asSet();
query UML::Package::getPackageReferences():Set(UML::Package)=
	self.clientDependency
	->select(r|r.isStereotypeApplied(NIEMReferencesStereotype)).target
	->select(t|t.oclIsKindOf(UML::Package)).oclAsType(UML::Package)
	->asSet();
	
helper UML::Property::suppressProperty(inout umlClassifier:UML::Classifier){
/*
	// clone property, set cardinality 0, and set redefinedProperty
	var targetPimProperty:UML::Property=self.deepclone().oclAsType(UML::Property);
	//targetPimProperty.lower:=0;
	//targetPimProperty.upper:=0;
	0.setLower(targetPimProperty);
	0.setUpper(targetPimProperty);
	
	targetPimProperty.redefinedProperty+=self;
	targetPimProperty.ownedAttribute(umlClassifier);
	*/
	if(not(umlClassifier.stereotypedBy('PropertyHolder')) and self.lower<>0)then{
		// this is not error in subset
		//log('ERROR: suppressProperty cardinality violation for '+self.qualifiedName+', lower = '+self.lower.repr());
	}else{}endif;
}
/*
helper UML::Property::ownedAttribute(inout umlClassifier:UML::Classifier){
	if(umlClassifier.oclIsKindOf(UML::Class))then{
		umlClassifier.oclAsType(UML::Class).ownedAttribute+=self;
	}else{
		if(umlClassifier.oclIsKindOf(UML::DataType))then{
			umlClassifier.oclAsType(UML::DataType).ownedAttribute+=self;
		}else{
		}endif;
	}endif;
}
*/	
//////////////////////////////niem2.1 to 3.0
helper niem21to30(){
		// initial pass: adjust names, add types, etc.
		// get and check Classifiers, properties
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier)
		.niem21to30Type();
		// find 2.0 namespaces and adjust each; including targetNamespace
		pimPackages.niem21to30NamespacePreprocess();
		pimPackages.niem21to30Namespace();
		// check for lost types from associations and properties
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Association)).oclAsType(UML::Association)
		->forEach(association){
			if(association.memberEnd.type->select(t|((t<>null)and not(t.oclIsUndefined()))and t.isLost())->notEmpty())then{
				association.removeElement();				
			}endif;
		};
		pimPackages.ownedType
		->select(type|type.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
		->forEach(attr){
			
			if((attr.type<>null)and not(attr.type.oclIsUndefined()) and attr.type.isLost())then{
				attr.type:=null;
			}endif;
		};
		return;
}
helper UML::Package::niem21to30Namespace(){
			// process by namespace
		var pimNdrSchemaInstance:Stdlib::Element=self.getStereotypeApplication(NIEMSchemaStereotype).oclAsType(Stdlib::Element);
		//log('niem21to21Namespace '+self.qualifiedName+', instance '+pimNdrSchemaInstance.repr());
		if(pimNdrSchemaInstance.oclIsUndefined())then return endif;
		var namespace=self.getTargetNamespace();
		namespace21to3->select(ns|ns.n21=namespace)->forEach(n21namespace){
				log('niem21to30Namespace targetNamespace '+namespace+' to '+n21namespace.n3);
				pimNdrSchemaInstance.setSchemaNamespace(n21namespace.n3);
		};
		namespace21to3Remove->select(ns|ns.n21=namespace)->forEach(n21namespace){
			self.removeElement();
		};
		return;
}
helper UML::Package::niem21to30NamespacePreprocess(){
			// process by namespace
		var pimNdrSchemaInstance:Stdlib::Element=self.getStereotypeApplication(NIEMSchemaStereotype).oclAsType(Stdlib::Element);
		//log('niem21to21Namespace '+self.qualifiedName+', instance '+pimNdrSchemaInstance.repr());
		if(pimNdrSchemaInstance.oclIsUndefined())then return endif;
		var namespace=self.getTargetNamespace();
	// handle nonauth to utoffend move
	if(namespace=niem21_nonauth_URI)then{
		var offender:UML::Package=	niem21_ut_offender_URI.findOrCreateNamespace();
		// check for duplicate names (i.e., propertyHolders)
		self.ownedType->select(t|t.IsStereotypeApplied(NIEMPropertyHolderStereotype))
			->select(t|offender.ownedType->select(o|o.name=t.name)->notEmpty())
			->forEach(type){
				type.name:=self.name+'_'+type.name;
			};
		offender.packagedElement+=self.packagedElement;
		self.removeElement();
	}endif;
		return;
}

helper UML::Classifier::niem21to30Type(){
			// process by classifier
			// get and check properties
				self.attribute.niem21to30Property();
	// base processing on resolved propertyName/namespace
	var myself:UML::Classifier:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedNamespace:String=self.getResolvedNamespace();
	type21to3Remove->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
		log('INFO: removing  Classifier '+self.qualifiedName);
		myself.removeElement();
		return;
	};
	// remove enumerationLiterals
	if(myself.oclIsKindOf(UML::Enumeration))then{
		enumeration21to3Remove->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			var literalToRemove:OrderedSet(UML::EnumerationLiteral)=myself.oclAsType(UML::Enumeration).ownedLiteral->select(l|n21name.literals->includes(l.name));
			literalToRemove->forEach(removedLiteral){
				removedLiteral.removeElement();
			};
		};
	}endif;
	type21to3WithNamespace->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
		myself.changeNamespace(n21name.n3namespace);
		return;
	};
	type21to3->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			//log('INFO: renaming  Classifier '+self.qualifiedName);
			// if the name already exists, then move all refs to existing classifier and remove this one
			var existingClassifier:UML::Classifier=self.getNearestPackage().ownedType
				->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name=n21name.n3))
				->oclAsType(UML::Classifier)->asSequence()->first();
			if(existingClassifier.oclIsUndefined())	then{
					myself:=myself.renameClassifier(n21name.n3);
				}else{
					// move refs and delete
					if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and myself.oclIsKindOf(UML::StructuredClassifier))then{
						// copy attribute, unless it already exists
						existingClassifier.oclAsType(UML::StructuredClassifier).ownedAttribute+=
							myself.oclAsType(UML::StructuredClassifier).ownedAttribute
							->select(p|existingClassifier.oclAsType(UML::StructuredClassifier).ownedAttribute
								->select(existingp|existingp.name=p.name)->isEmpty());
						}endif;
						log('INFO: removing redundant  Classifier '+self.qualifiedName);
						// move type refs
						myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
						// move subtypes
						myself._generalizationOfGeneral->forEach(generalization){generalization.general:=existingClassifier;};
						myself.removeElement();
				}endif;
			};
		
	switch{
		case((resolvedName='CoefficientsType') and (resolvedNamespace=niem21_cbrn_URI)){
			log('INFO: changing  Classifier '+self.qualifiedName);
			// change inheritance
			myself.generalization->forEach(generalization){generalization.removeElement();};
			var myGeneral:UML::PrimitiveType=findOrCreatePrimitiveType('DecimalListSimpleType',niem21_cbrn_URI);
			myGeneral.generalize(myself);
		};
		//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentationType'},
		case((resolvedName='IdentityAssociationType') and (resolvedNamespace=niem21_intel_URI)){
			log('INFO: changing  Classifier '+self.qualifiedName);
			// change name, remove inheritance, remove association stereotype, add augmentation stereotype
					myself:=myself.renameClassifier('IdentityAssociationAugmentationType');
			myself.generalization->forEach(generalization){generalization.removeElement();};
			myself.removeStereotype('AssociationType');
			myself.applyStereotype(NIEMAugmentationStereotype);
			
		};
		
		case((resolvedName='ImmigrationStatusType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: changing  Classifier '+self.qualifiedName);
			// change name, remove inheritance, remove association stereotype, add augmentation stereotype
			myself.generalization->forEach(generalization){generalization.removeElement();};
			var myGeneral:UML::Class=findOrCreateClass('StatusType',niem21_nc_URI);
			myGeneral.generalize(myself);
		};
		//		Tuple{n21:String='TreatmentType',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentationType'},
		case((resolvedName='TreatmentType') and (resolvedNamespace=niem21_j_URI)){
			log('INFO: changing  Classifier '+self.qualifiedName);
			// change name, remove inheritance, add augmentation stereotype
					myself:=myself.renameClassifier('TreatmentAugmentationType');
			myself.generalization->forEach(generalization){generalization.removeElement();};
			myself.applyStereotype(NIEMAugmentationStereotype);
			
		};
		
		case((resolvedName='PreviousCustomsDocumentType') and (resolvedNamespace=niem21_it_URI)){
			log('INFO: changing  Classifier '+self.qualifiedName);
			myself.generalization->forEach(generalization){generalization.removeElement();};
			myself.removeStereotype('AugmentationType');
			findOrCreateClass('DocumentType',niem21_nc_URI).generalize(myself);
			
		};
		
		case((resolvedName='SubstanceMeasureType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					// move refs and delete
					// move subtypes, type refs
			var existingClassifier:UML::Classifier=findOrCreateClass('MeasureType',niem21_nc_URI);
					myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
					myself.removeElement();
		};
		
		case((resolvedName='MeasurePointValueType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: removing  Classifier '+self.qualifiedName);
					// move refs and delete
					// move subtypes, type refs
					var existingClassifier:UML::Classifier=getXMLPrimitiveType('decimal');
					myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
					myself.removeElement();
		};
		//		Tuple{n21:String='StructuredAddressType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'},
		case((resolvedName='StructuredAddressType') and (resolvedNamespace=niem21_nc_URI)){
			log('INFO: adjusting  Classifier '+self.qualifiedName);
			// rename to AddressType, remove existing AddressType and move any of its refs to this
			var existingClassifier:UML::Classifier=findOrCreateClass('AddressType',niem21_nc_URI);
			existingClassifier.typedElementTypes()->forEach(typedElement){typedElement.type:=myself;};
			existingClassifier.removeElement();
					myself:=myself.renameClassifier('AddressType');
			// remove AddressRepresentation, remove subsets from AddressFullText, StructuredAddress becomes Address
		};
		
		case((resolvedName='TelephoneNumberAugmentationType') and (resolvedNamespace=niem21_scr_URI)){
			log('INFO: renaming  Classifier '+self.qualifiedName);
			//	myself.name:='TelephoneNumberType';
			// if the name already exists, then move all refs to existing classifier and remove this one
			// this needs to be in nc namespace and augmentation type removed
			var nc:UML::Package=niem21_nc_URI.findOrCreateNamespace();
			var existingClassifier:UML::Classifier=nc.ownedType
				->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name='TelephoneNumberType'))
				->oclAsType(UML::Classifier)->asSequence()->first();
			if(existingClassifier.oclIsUndefined())	then{
					myself:=myself.renameClassifier('TelephoneNumberType');
					nc.packagedElement+=myself;
					
					myself.removeStereotype('AugmentationType');
				}else{
					// move refs and delete
					if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and myself.oclIsKindOf(UML::StructuredClassifier))then{
						log('INFO: removing redundant  Classifier '+self.qualifiedName);
						// TODO: move subtypes, type refs
						myself.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
						myself.removeElement();
				}endif;
			}endif;
							
		};
		
		
		
		case(((resolvedName='FacilityCategoryCodeSimpleType')) and (resolvedNamespace=niem21_it_URI)){
			//myself.name:='FacilityUsageCodeSimpleType';
//			myself:=myself.changeNamespace(niem21_occs_URI);
			myself:=myself.changeNamespace(niem21_cbrncl_URI);
		};
		case(((resolvedName='FacilityCategoryCodeType')) and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameClassifier('FacilityUsageCodeType');
			myself:=myself.changeNamespace(niem21_occs_URI);
		};
		
		case(((resolvedName='SystemIdentifierType')) and (resolvedNamespace=niem21_intel_URI)){
					myself:=myself.renameClassifier('SystemIdentificationType');
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageStatusCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('PersonUnionStatusCodeSimpleType');
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageStatusCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('PersonUnionStatusCodeType');
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		
		case(((resolvedName='FamilyKinshipCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('ParentChildKinshipCategoryCodeSimpleType');
			myself:=myself.changeNamespace(niem21_fs_URI);
			var myEnumeration:UML::Enumeration=myself.oclAsType(UML::Enumeration);
			myEnumeration.ownedLiteral->forEach(enumLiteral){
				if(enumLiteral.name='foster')then{enumLiteral.name:='Foster';}endif;
				if(enumLiteral.name='biological')then{enumLiteral.name:='Biological';}endif;
				if(enumLiteral.name='marriage')then{enumLiteral.name:='Marriage';}endif;
				if(enumLiteral.name='adoption')then{enumLiteral.name:='Adoption';}endif;
			};
		};
		case(((resolvedName='FamilyKinshipCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('ParentChildKinshipCategoryCodeType');
			myself:=myself.changeNamespace(niem21_fs_URI);
		};
		
		
		
		
		case(((resolvedName='MarriageCategoryCodeSimpleType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('PersonUnionCategoryCodeSimpleType');
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		case(((resolvedName='MarriageCategoryCodeType')) and (resolvedNamespace=niem21_nonauth_URI)){
					myself:=myself.renameClassifier('PersonUnionCategoryCodeType');
			myself:=myself.changeNamespace(niem21_nc_URI);
		};
		
		
//		Tuple{n21:String='PropertyType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
/*
		case((resolvedName='PropertyType') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameClassifier('ItemSeizureType');
			myself.changeNamespace(niem21_j_URI);
		};
		*/
//		Tuple{n21:String='AlertType',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentationType'},
		case((resolvedName='AlertType') and (resolvedNamespace=niem21_scr_URI)){
					myself:=myself.renameClassifier('AlertAugmentationType');
								myself.applyStereotype(NIEMAugmentationStereotype);
		};
		
		
		case((resolvedName='BiometricType') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameClassifier('BiometricDataType');
			myself.changeNamespace(niem21_ansi_nist_URI);
		};
		case((resolvedName='DNAType') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameClassifier('BiometricDataType');
			myself.changeNamespace(niem21_ansi_nist_URI);
		};
		
		
		
		case((resolvedName='AmountType') and (resolvedNamespace=niem21_nc_URI) and myself.oclIsKindOf(UML::PrimitiveType)){
			// change to Class; move over attributes, typed elements of type, any dependencies; no generalization
			var AmountType:UML::Class=new UML::Class();
			AmountType.name:=myself.name;
			myself.getNearestPackage().packagedElement+=AmountType;
			myself._typedElementOfType->forEach(typedElement){typedElement.type:=AmountType;};	
			myself.clientDependency->forEach(d){d.client:=AmountType;};	
			myself.supplierDependency->forEach(d){d.supplier:=AmountType;};	
			
			myself.removeElement();
			myself:=AmountType;
		};
		
		
		//   <xsd:element name="PersonUnionStatusCode" type="nonauth:MarriageStatusCodeType" nillable="true">
		// jxdm   <xs:element name="MaritalStatusCode" type="ndex:MaritalStatusCodeType" substitutionGroup="nc:PersonUnionStatusAbstract">
		/*
		case((resolvedName='MarriageStatusCodeType') and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='MaritalStatusCodeType';
			myself.changeNamespace(niem21_ndex_URI);
		};
		case((resolvedName='MarriageStatusCodeSimpleType') and (resolvedNamespace=niem21_nonauth_URI)){
			myself.name:='MaritalStatusCodeSimpleType';
			myself.changeNamespace(niem21_ndex_URI);
		};
		*/


		// fbi:ArrestCategoryCodeSimpleType to ucr:ArrestCategoryCodeSimpleType
		// fbi:ArrestCategoryCodeType to ucr:ArrestCategoryCodeType
		// fbi:ArresteeWeaponCodeSimpleType to ucr:ArresteeWeaponCodeSimpleType
		// fbi:DrugMeasurementCodeSimpleType to ucr:DrugMeasurementCodeSimpleType
		// fbi:EthnicityCodeSimpleType to ucr:EthnicityCodeSimpleType
		// fbi:ForceCategoryCodeSimpleType to ucr:ForceCategoryCodeSimpleType
		// fbi:FPCCodeSimpleType to ncic:FPCCodeSimpleType
		// fbi:IncidentExceptionalClearanceCodeSimpleType to ucr:IncidentExceptionalClearanceCodeSimpleType
		// FBI:IncidentFactorCodeSimpleType to ucr:IncidentFactorCodeSimpleType
		// fbi:JustifiableHomicideFactorsCodeSimpleType to ucr:JustifiableHomicideFactorsCodeSimpleType
		// fbi:LEOKAOfficerAssignmentCategoryCodeSimpleType to ucr:LEOKAOfficerAssignmentCategoryCodeSimpleType
		// fbi:MethodOfAccessCodeSimpleType to ndex:MethodOfAccessCodeSimpleType
		// fbi:MethodOfEntryCodeSimpleType to ucr:MethodOfEntryCodeSimpleType
		// fbi:MultipleArresteeSegmentsCodeSimpleType to ucr:MultipleArresteeSegmentsCodeSimpleType
		// fbi:ResidentCodeSimpleType to ucr:ResidentCodeSimpleType
		// fbi:VictimCategoryCodeSimpleType to ucr:VictimCategoryCodeSimpleType
		// itis:LightingCodeSimpleType to mmuc:LightingCodeSimpleType
		/*
		case((resolvedName='LightingCodeType') and (resolvedNamespace=niem21_itis_URI)){
			myself.name:='RoadwayLightingCodeType';
			myself.changeNamespace(niem21_mmucc_2_URI);
		};
		
		case((resolvedName='LightingCodeSimpleType') and (resolvedNamespace=niem21_itis_URI)){
			myself.name:='RoadwayLightingCodeSimpleType';
			myself.changeNamespace(niem21_mmucc_2_URI);
		};
		*/
		
		
	};			
				return;
}
helper UML::Classifier::changeNamespace(niem21:String):UML::Classifier{
			var nc:UML::Package=self.getNearestPackage();
			var namespace:String=nc.getTargetNamespace();
			if(namespace=niem21)then{return self;}endif;
	log('INFO: change namespace  Class '+self.qualifiedName);
	//  this is in jxdm namespace
	var j:UML::Package=niem21.findOrCreateNamespace();
	var existingClassifier:UML::Classifier=j.ownedType
		->select(t|t.oclIsKindOf(UML::Classifier) and (t<>self) and (t.name=self.name))
		->oclAsType(UML::Classifier)->asSequence()->first();
	if(existingClassifier.oclIsUndefined())	then{
		// make sure properties have references
			self.attribute->forEach(implementingProperty){
				var existingProperty:UML::Property=nc.findTopLevelElement(implementingProperty.name);
					implementingProperty.makeReferences(implementingProperty.name,namespace,existingProperty);
			};
			j.packagedElement+=self;
			existingClassifier:=self;
			// 
		}else{
			// move refs and delete
			if(existingClassifier.oclIsKindOf(UML::StructuredClassifier) and self.oclIsKindOf(UML::StructuredClassifier))then{
				log('INFO: removing redundant  Classifier '+self.qualifiedName);
				// TODO: move subtypes, type refs
				self.typedElementTypes()->forEach(typedElement){typedElement.type:=existingClassifier;};
				self.removeElement();
			}endif;	
	}endif;
	return existingClassifier;
}
query UML::Package::findTopLevelElement(n30Name:String):UML::Property=
	self.ownedType
		->select(t|t.oclIsKindOf(UML::Class) and t.IsStereotypeApplied(NIEMPropertyHolderStereotype))
		.oclAsType(UML::Class).ownedAttribute->select(a|a.name=n30Name)
		->asSequence()->first();
helper UML::Property::changeNamespace(n30Name:String,namespace:String):UML::Property{
	var myInfoModel:UML::Package=self.getNearestPackage();
	var mynamespace:String=myInfoModel.getTargetNamespace();
	if((namespace=mynamespace)and(n30Name=self.name))then{return self;}endif;
	var myself:UML::Property=self;
	log('INFO: renaming  Property '+self.qualifiedName);
	var implementingProperty:UML::Property=myself;
	var nc:UML::Package=namespace.findOrCreateNamespace();
	var existingProperty:UML::Property=nc.findTopLevelElement(n30Name);
	if(myself.isPropertyHolderElement())then{
		// move over to new namespace		
			implementingProperty:=existingProperty;
			if(existingProperty.oclIsUndefined())	then{
				implementingProperty:=myself;
				myself.name:=n30Name;
				var propertyHolder:UML::Class=nc.getPropertyHolder();
				propertyHolder.ownedAttribute+=myself;
					
					//myself.removeStereotype('AugmentationType');
			}else{
				// move refs and delete
				myself.supplierReferenceRealizations()->forEach(ref){ref.supplier:=existingProperty;};
					log('INFO: removing redundant  Property '+self.qualifiedName);
					// TODO: move subtypes, type refs
					myself.removeElement();
			}endif;
			// rename any referencing elements
			implementingProperty.supplierReferences()
				->select(p|p.oclIsKindOf(UML::Property)).oclAsType(UML::Property)
				->forEach(p){
					p.name:=implementingProperty.name;
					// make sure type consistent
					p.type:=implementingProperty.type;
				};	
	
	}else{
		// change the name 
		//  and make sure there is a References
		implementingProperty:=implementingProperty.makeReferences(n30Name,namespace,existingProperty);
		/*
		if(implementingProperty.clientDependency->select(d|d.isReferences()).supplier->select(s|s.oclIsKindOf(UML::Property))->isEmpty())then{
			var myPackage:UML::Package=implementingProperty.getNearestPackage();
			var realizes:UML::Realization=myPackage.createRealizes();
			realizes.client+=implementingProperty;
			if(existingProperty.oclIsUndefined())then{
				existingProperty:=myPackage.findTopLevelElement(n30Name);
				if(existingProperty.oclIsUndefined())then{existingProperty:=myPackage.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{existingProperty:=nc.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{
					// not found, we will have to create it
					existingProperty:=findOrCreateElement(n30Name,namespace);
					existingProperty.type:=implementingProperty.type;
					existingProperty.aggregation:=implementingProperty.aggregation;
					existingProperty.isDerivedUnion:=implementingProperty.isDerivedUnion;
					existingProperty.setLower(implementingProperty.lower);
					existingProperty.setUpper(implementingProperty.upper);
				}endif;
			}endif;
			 realizes.supplier+=existingProperty;
		 }endif;
		 */
		//implementingProperty.name:=n30Name;
	}endif;
			return implementingProperty;	
}
helper UML::Property::makeReferences(n30Name:String,namespace:String, existingPropertyIn:UML::Property):UML::Property{
	var implementingProperty:UML::Property=self.renameProperty(n30Name);
	// if implementingproperty already exists, use it, remove self, and hook up references to existing implementingproperty
	var existingProperty:UML::Property=existingPropertyIn;
		if(implementingProperty.clientDependency->select(d|d.isReferences()).supplier->select(s|s.oclIsKindOf(UML::Property))->isEmpty())then{
			var myPackage:UML::Package=implementingProperty.getNearestPackage();
			var realizes:UML::Realization=myPackage.createRealizes();
			realizes.client+=implementingProperty;
			if(existingProperty.oclIsUndefined())then{
				existingProperty:=myPackage.findTopLevelElement(n30Name);
				var nc:UML::Package=namespace.findOrCreateNamespace();
				if(existingProperty.oclIsUndefined())then{existingProperty:=myPackage.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{existingProperty:=nc.findTopLevelElement(implementingProperty.name);}endif;
				if(existingProperty.oclIsUndefined())then{
					// not found, we will have to create it
					existingProperty:=findOrCreateElement(n30Name,namespace);
					//existingProperty.type:=implementingProperty.type;
					existingProperty.aggregation:=implementingProperty.aggregation;
					existingProperty.isDerivedUnion:=implementingProperty.isDerivedUnion;
					existingProperty.isDerived:=implementingProperty.isDerived;
					existingProperty.isReadOnly:=implementingProperty.isReadOnly;
					existingProperty.setLower(implementingProperty.lower);
					existingProperty.setUpper(implementingProperty.upper);
				}endif;
			}endif;
			existingProperty.type:=implementingProperty.type;// propagate type in case type was changed
			 realizes.supplier+=existingProperty;
		 }endif;
	return implementingProperty;	
}
helper UML::Package::createRealizes():UML::Realization{
	var myPackage:UML::Package=self;
	var realizes:UML::Realization=new UML::Realization();
	realizes.applyStereotype(NIEMReferencesStereotype);
	myPackage.packagedElement+=realizes;
	return realizes;
}
helper UML::Property::baseNiem21to30Property():UML::Property{
	// base processing on resolved propertyName/namespace
	var myself:UML::Property:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedClassName:String=self.classifier.name;
	var resolvedNamespace:String=self.getResolvedNamespace();
	if(resolvedName.endsWith('Reference') and resolvedNamespace.startsWith(baseNiemNamespaceNiem2) and self.isPsmXsdElement())then{
			log('INFO: renaming Reference Property '+self.qualifiedName);
			var newName:String=resolvedName.substring(1,resolvedName.length()-9);
			myself:=myself.renameProperty(newName);
			resolvedName:=newName;	
		}endif;
		
	// any non-PropertyHolder properties which are typed by an augmentation but have no substitutionGroup need to be removed
	var propertyHolderProperty:UML::Property=findPropertyHolderProperty(resolvedName,resolvedName,resolvedNamespace);
	
	if(not(myself.isPropertyHolderElement()) 
		 and myself.type.oclAsType(UML::Classifier).isAugmentationType()
		 and (propertyHolderProperty.oclIsUndefined() or propertyHolderProperty.subsettedProperty->isEmpty())	
		 )then{
			if(propertyHolderProperty.oclIsUndefined())then{
				propertyHolderProperty:=myself.cloneAsPropertyHolder(resolvedNamespace);
			}endif;
			myself.removeElement();
			myself:=null;
	}endif;
	return myself;
}
helper UML::Property::niem21to30Property(){
	// base processing on resolved propertyName/namespace
	var myself:UML::Property:=self.baseNiem21to30Property();
	if(myself.oclIsUndefined())then{return;}endif;
	//var myself:UML::Property:=self;
	var resolvedName:String=self.getResolvedName();
	var resolvedClassName:String=self.classifier.name;
	var resolvedNamespace:String=self.getResolvedNamespace();
	property21to3Remove->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: remove Property '+self.qualifiedName);
			// also remove any properties which have references to this
			myself.supplierReferences()->select(p|p.oclIsKindOf(UML::Property)).oclAsType(UML::Property)->forEach(referencingProperty){
				referencingProperty.removeElement();
			};
			myself.removeElement();
			return;
		};
	property21to3->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: renaming  Property '+self.qualifiedName);
			myself:=myself.renameProperty(n21name.n3);
			resolvedName:=n21name.n3;
		};
	property21to3WithNamespace->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: namespace change for Property '+self.qualifiedName);
			myself:=myself.changeNamespace(n21name.n3,n21name.n3namespace);
			resolvedName:=n21name.n3;
			resolvedNamespace:=n21name.n3namespace;
		};
	property21to3NameNamespaceSubstitutionGroup->select(ns|(ns.n21namespace=resolvedNamespace) and (ns.n21=resolvedName))->forEach(n21name){
			log('INFO: namespace name and substitutionGroup change for Property '+self.qualifiedName);
			myself:=myself.changeNamespace(n21name.n3,n21name.n3namespace);
			myself.propertyWithNewSubstitutionGroup(n21name.n21,n21name.n3,n21name.sgName,n21name.sgNamespace);
			resolvedName:=n21name.n3;
			resolvedNamespace:=n21name.n3namespace;
		};
		
	
	switch{
		case((resolvedName='personNameCategoryCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='PersonNameAugmentationType')){
			myself.removeElement();
		};
		case((resolvedName='RoleOfPerson') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		case((resolvedName='AreaCircularRegion') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='AreaType')){
			myself.removeElement();
		};
		case((resolvedName='AreaPolygonGeographicCoordinate') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='AreaType')){
			myself.removeElement();
		};
		case((resolvedName='DocumentCategoryName') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='DocumentType')){
			myself.removeElement();
		};
		case((resolvedName='DocumentSubjectText') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='DocumentType')){
			myself.removeElement();
		};
		case((resolvedName='FacilityCategoryText') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='FacilityType')){
			myself.removeElement();
		};
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='IdentityType')){
			myself.removeElement();
		};
		case((resolvedName='LocationMGRSCoordinate') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='LocationType')){
			myself.removeElement();
		};
		case((resolvedName='RoleOfDocument') and (resolvedNamespace=niem21_scr_URI)and (resolvedClassName='ManifestType')){
			myself.removeElement();
		};
		case((resolvedName='ManifestCategoryCode') and (resolvedNamespace=niem21_scr_URI)and (resolvedClassName='ManifestType')){
			myself.removeElement();
		};
		case((resolvedName='ObligationExemptionIndicator') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='ObligationExemptionType')){
			myself.removeElement();
		};
		case((resolvedName='PersonNationalityText') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='PersonType')){
			myself.removeElement();
		};
		case((resolvedName='PersonDesignatorCategoryCode') and (resolvedNamespace=niem21_scr_URI)and (resolvedClassName='AlienMiscellaneousNumberIDType')){
			myself.removeElement();
		};
		case((resolvedName='FileControlOfficeText') and (resolvedNamespace=niem21_im_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		case((resolvedName='FormNameDescriptionText') and (resolvedNamespace=niem21_im_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		case((resolvedName='FormSubmittedDate') and (resolvedNamespace=niem21_im_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		case((resolvedName='AlienCustodyCategoryText') and (resolvedNamespace=niem21_im_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
		case((resolvedName='AlienCustodyCategoryDescriptionText') and (resolvedNamespace=niem21_im_URI)and (resolvedClassName='AlienType')){
			myself.removeElement();
		};
   		case((resolvedName='ImmigrationStatusCode') and (resolvedNamespace=niem21_im_URI) and (resolvedClassName='PersonCountryAssociationType')){
			myself.removeElement();
		};
   		case((resolvedName='CountrySubdivisionCategoryCode') and (resolvedNamespace=niem21_scr_URI) and (resolvedClassName='AdditionalInformationType')){
			myself.removeElement();
		};
   		case((resolvedName='DutyTaxPaymentMethodCode') and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='ObligationAugmentationType')){
			myself.removeElement();
		};
   		case((resolvedName='RoleOfOrganizationCategoryCode') and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='RoleOfOrganizationCategoryType')){
			myself.removeElement();
		};
		case((resolvedName='DriverLicenseEndorsement') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='DriverLicenseBaseType')){
			myself.removeElement();
		};

		case((resolvedName='PolygonCoordinate') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='AreaType')){
			myself.removeElement();
		};
		case((resolvedName='TreatmentText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='InjuryType')){
			myself.removeElement();
		};
		case((resolvedName='TreatmentProvider') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='InjuryType')){
			myself.removeElement();
		};
	
		case((resolvedName='MGRSGridZoneID') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='UTMCoordinateType')){
			myself.removeElement();
		};
		case((resolvedName='MGRSGridZoneSquareID') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='UTMCoordinateType')){
			myself.removeElement();
		};
	
//   		case((resolvedName='RemarkText') and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='ShippingContainerType')){
//			myself.removeElement();
//		};
	
   		case((resolvedName='CrashVehicleLegalSpeedRate') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType')){
			myself.removeElement();
		};
   		case((resolvedName='CommercialVehicleConfigurationCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType')){
			myself.removeElement();
		};
   		case((resolvedName='VehicleCargoBodyCategoryCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType')){
			myself.removeElement();
		};
   		case((resolvedName='CommercialVehicleCargoBodyCategoryCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType')){
			myself.removeElement();
		};
   		case((resolvedName='DriverLicenseEndorsementCode') and ((resolvedNamespace=niem21_j_URI)or(resolvedNamespace=niem21_nc_URI)) and (resolvedClassName='DriverLicenseEndorsementType')){
			myself.removeElement();
		};
   		case((resolvedName='DriverLicenseWithdrawalReasonReferenceCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='DriverLicenseWithdrawalType')){
			myself.removeElement();
		};
   		case((resolvedName='RoleOfItem') and (resolvedNamespace=niem21_nc_URI) and ((resolvedClassName='ItemSeizureType')or(resolvedClassName='PropertySeizureType'))){
			myself.removeElement();
			return;
		};
   		case((resolvedName='ItemCurrentResaleValue') and (resolvedNamespace=niem21_nc_URI) and ((resolvedClassName='ItemSeizureType')or(resolvedClassName='PropertySeizureType'))){
			myself.removeElement();
			return;
		};
   		case((resolvedName='ItemRecoveredValue') and (resolvedNamespace=niem21_nc_URI) and ((resolvedClassName='ItemSeizureType')or(resolvedClassName='PropertySeizureType'))){
			myself.removeElement();
			return;
		};
   		case((resolvedName='JurisdictionText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='JurisdictionAugmentationType')){
			myself.removeElement();
		};
   		case((resolvedName='DocumentCategoryCode') and (resolvedNamespace=niem21_scr_URI) and (resolvedClassName='DocumentOrganizationAssociationType')){
			myself.removeElement();
		};
   		case((resolvedName='ImmigrationStatusChangeDate') and (resolvedNamespace=niem21_im_URI) and (resolvedClassName='PersonSearchResultType')){
			myself.removeElement();
		};
   		case((resolvedName='AlertAugmentation') and (resolvedNamespace=niem21_scr_URI) and (resolvedClassName='PersonAlertAssociationType')){
			myself.removeElement();
		};
		
   		case((resolvedName='CitizenshipCertificateIdentification') and (resolvedNamespace=niem21_im_URI) and (resolvedClassName='PersonStatusSummaryType')){
			myself.removeElement();
		};
   		case((resolvedName='IdentificationID') and (resolvedNamespace=niem21_nc_URI) and ((resolvedClassName='SystemIdentificationType')or(resolvedClassName='SystemIdentifierType'))){
			myself.removeElement();
			return;
		};
   		case((resolvedName='LocationAltitude') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='LocationType')){
			myself.removeElement();
			return;
		};
   		case((resolvedName='DocumentCategoryText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='DocumentType')){
			myself.removeElement();
			return;
		};
		
		case((resolvedName='ConveyanceRegistrationPlateIdentification') // namespace already changed 
			and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='ConveyanceType')){
			myself.removeElement();
		}
				
//		Tuple{n21:String='PersonJewelryCategoryText',n21namespace:String=niem21_j_URI,n3:String='JewelryCategoryText'},
		case(((resolvedName='PersonJewelryCategoryText')) and (resolvedNamespace=niem21_j_URI)){
			if(resolvedClassName='PersonAugmentationType')then{
			myself.removeElement();
				
			}else{
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JewelryCategoryText','JewelryCategory',niem21_j_URI);
				
			}endif;
		};
	//		Tuple{n21:String='AreaGeographicCode',n21namespace:String=niem21_nc_URI,n3:String='AreaGeographic'},
		case((resolvedName='AreaGeographicCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.renameProperty('AreaGeographic');
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		
		case((resolvedName='LocaleJudicialDistrict') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
	
		case((resolvedName='ReligionCategoryCode') and (resolvedNamespace=niem21_scr_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
			myself:=myself.changeNamespace('PersonReligion',niem21_nc_URI);
		};
		case((resolvedName='ScheduleDate') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='ScheduleDayType')){
			myself:=myself.renameProperty('ScheduleDayRepresentation');
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		
		case((resolvedName='DrivingRestrictionCode') and (resolvedNamespace=niem21_j_URI)){
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('DrivingRestrictionCodeSimpleType',niem21_ansi_d20_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('DrivingRestrictionCodeType',niem21_ansi_d20_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		case((resolvedName='OffenseFactorBiasMotivationCode') and (resolvedNamespace=niem21_j_URI)){
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('BiasMotivationCodeSimpleType',niem21_ndex_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('BiasMotivationCodeType',niem21_ndex_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		case((resolvedName='OffenseFactorBiasMotivationCauseCode') and (resolvedNamespace=niem21_j_URI)){
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('BiasMotivationCauseCodeSimpleType',niem21_ndex_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('BiasMotivationCauseCodeType',niem21_ndex_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		case((resolvedName='DriverLicenseCommercialClassCode') and (resolvedNamespace=niem21_j_URI)){
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('DriverLicenseClassCodeSimpleType',niem21_ansi_d20_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('DriverLicenseClassCodeType',niem21_ansi_d20_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		case((resolvedName='OffenseNDExCode') and (resolvedNamespace=niem21_j_URI)){
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('OffenseNDExCodeSimpleType',niem21_ndex_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('OffenseNDExCodeType',niem21_ndex_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		case((resolvedName='personNameCategoryCode') and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.renameProperty('PersonNameCategoryCode');
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('PersonNameCategoryCodeSimpleType',niem21_j_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('PersonNameCategoryCodeType',niem21_j_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
			myself.propertyWithNewSubstitutionGroup('personNameCategoryCode','PersonNameCategoryCode','PersonNameCategory',niem21_nc_URI);
		};
		case((resolvedName='Computer') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('DeviceType',niem21_nc_URI);
		};
		
		
		case((resolvedName='VesselTrailerMakeName') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('VehicleType',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='ProgressPaymentAmountText',n21namespace:String=niem21_nc_URI,n3:String='ProgressPaymentAmount'},
		case((resolvedName='ProgressPaymentAmountText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.renameProperty('ProgressPaymentAmount');
			myself.type:=findOrCreateClass('AmountType',niem21_nc_URI);
		};
		case((resolvedName='SIMCard') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('DeviceType',niem21_nc_URI);
		};
		
//		Tuple{n21:String='ReleaseProperty',n21namespace:String=niem21_nc_URI,n3:String='ReleaseItem'},
		case((resolvedName='ReleaseProperty') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.renameProperty('ReleaseItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		
		case((resolvedName='MilitaryServiceTimeMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='ItemAgeMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='EvidenceKit') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='ForceToolItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='IncidentInvolvedItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='IncidentRecoveredItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='IncidentSeizedItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='IncidentStolenItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='Incarceration') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('IncarcerationType',niem21_j_URI);
		};
		case((resolvedName='OrganizationGovernmentLevelText') and (resolvedNamespace=niem21_j_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='SupportLevelCategoryCodeText') and (resolvedNamespace=niem21_scr_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		
		case((resolvedName='IncidentSubjectWeapon') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('WeaponType',niem21_nc_URI);
		};
		
		case((resolvedName='ForceWeaponItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='IncidentDamagedItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='ItemSeizureItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		
		case((resolvedName='EngineDisplacementMeasure') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};

		case((resolvedName='TelecommunicationDevice') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('DeviceType',niem21_nc_URI);
		};
		case((resolvedName='DriverLicenseEndorsement') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('DriverLicenseEndorsementType',niem21_j_URI);
		};
		case((resolvedName='VesselTrailer') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('VehicleType',niem21_nc_URI);
		};
		//		Tuple{n21:String='TelephoneNumberAugmentation',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberAugmentation',n3namespace:String=niem21_scr_URI,sgName:String='TelephoneNumberAugmentationPoint',sgNamespace:String=niem21_nc_URI	},
		case((resolvedName='TelephoneNumberAugmentation') and (resolvedNamespace=niem21_scr_URI)){
			myself.type:=findOrCreateClass('TelephoneNumberAugmentationType',niem21_scr_URI);
		};
		
		case((resolvedName='CustodyTransferProperty') and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.renameProperty('CustodyTransferItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
//		Tuple{n21:String='Dependent',n21namespace:String=niem21_im_URI,n3:String='SEVISPersonDependentAssociation'},
		case((resolvedName='Dependent') and (resolvedNamespace=niem21_im_URI)){
			myself:=myself.renameProperty('SEVISPersonDependentAssociation');
			var myType:UML::Class=findOrCreateClass('SEVISPersonDependentAssociationType',niem21_im_URI);
			myType.conditionallyApplyStereotype(NIEMAssociationStereotype);
			myself.type:=myType;
			// im:SEVISPersonDependentAssociationType
		};
		
		case((resolvedName='TransportMeansConsignmentUnloadingDate') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('DateType',niem21_nc_URI);
		};
		case((resolvedName='TransportMeansGrossWeightMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='TransportMeansNetWeightMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='TransportMeansDepartureDate') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('DateType',niem21_nc_URI);
		};
		case((resolvedName='TransportMeansArrivalDate') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('DateType',niem21_nc_URI);
		};
		//		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='AdditionalDocumentCategory',sgNamespace:String=niem21_it_URI	},
		case((resolvedName='AdditionalDocumentCategoryCode') and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameProperty('AdditionalDocumentCategoryCode');
//			var DocumentCategoryCodeType:UML::Enumeration =findOrCreateEnumeration('DocumentCategoryCodeType',niem21_it_URI);
//			var DocumentCategoryCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('DocumentCategoryCodeSimpleType',niem21_it_URI);
			var DocumentCategoryCodeType:UML::Enumeration =findOrCreateEnumeration('DocumentCategoryCodeType',niem21_itis_URI);
			var DocumentCategoryCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('DocumentCategoryCodeSimpleType',niem21_itis_URI);
			DocumentCategoryCodeSimpleType.generalize(DocumentCategoryCodeType);
					
			myself.type:=DocumentCategoryCodeType;
		};
		
		case((resolvedName='SubmittingAlien') and (resolvedNamespace=niem21_im_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		case((resolvedName='RoleOfAlien') and (resolvedNamespace=niem21_im_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		
		case((resolvedName='SubmittingCitizen') and (resolvedNamespace=niem21_im_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
   		case((resolvedName='TitleStatusCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='TitleStatusType')){
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('TitleStatusAbstract');
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		
		case((resolvedName='SubjectArmedWeapon') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('WeaponType',niem21_nc_URI);
		};
		case((resolvedName='TargetItem') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
	
		case((resolvedName='Kit') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='InsuranceCoveredProperty',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoveredItem'},
		case((resolvedName='InsuranceCoveredProperty') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('InsuranceCoveredItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
				//		Tuple{n21:String='ArrestInvolvedProperty',n21namespace:String=niem21_j_URI,n3:String='ArrestInvolvedItem'},
		case((resolvedName='ArrestInvolvedProperty') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('ArrestInvolvedItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
//		Tuple{n21:String='BookingDepositedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingDepositedItem'},
		case((resolvedName='BookingDepositedProperty') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('BookingDepositedItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
//		Tuple{n21:String='BookingRetainedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingRetainedItem'},
		case((resolvedName='BookingRetainedProperty') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('BookingRetainedItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		case((resolvedName='ItemSeizureDisposition') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('DispositionType',niem21_nc_URI);
		};
//		Tuple{n21:String='BookingSeizedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingSeizedItem'},
		case((resolvedName='BookingSeizedProperty') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('BookingSeizedItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
		};
		
//		Tuple{n21:String='BondSuretyName',n21namespace:String=niem21_j_URI,n3:String='BailBondSuretyEntity'},
		case((resolvedName='BondSuretyName') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('BailBondSuretyEntity');
			myself.type:=findOrCreateClass('EntityType',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='InsuranceEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='InsuranceEffectiveDateRange'},
		case((resolvedName='InsuranceEffectiveDate') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('InsuranceEffectiveDateRange');
			myself.type:=findOrCreateClass('DateRangeType',niem21_nc_URI);
		};
		//		Tuple{n21:String='StatuteOffenseMinnesotaCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseAPCOCode',n3namespace:String=niem21_j_URI,sgName:String='StatuteOffenseCode',sgNamespace:String=niem21_j_URI	},
		case((resolvedName='StatuteOffenseMinnesotaCode') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('StatuteOffenseAPCOCode');
					// apco:IncidentCategoryCodeType
			var IncidentCategoryCodeType:UML::Enumeration =findOrCreateEnumeration('IncidentCategoryCodeType',niem21_apco_URI);
			var IncidentCategoryCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('IncidentCategoryCodeSimpleType',niem21_apco_URI);
			IncidentCategoryCodeSimpleType.generalize(IncidentCategoryCodeType);
					
			myself.type:=IncidentCategoryCodeType;
					myself.propertyWithNewSubstitutionGroup('StatuteOffenseMinnesotaCode','StatuteOffenseAPCOCode','StatuteOffenseCode',niem21_j_URI);
					
		};
		
		
//		Tuple{n21:String='DocumentOtherAddresseeName',n21namespace:String=niem21_nc_URI,n3:String='DocumentOtherRecipient'},
		case((resolvedName='DocumentOtherAddresseeName') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('DocumentOtherRecipient');
			myself.type:=findOrCreateClass('EntityType',niem21_nc_URI);
		};
		//		Tuple{n21:String='ValuationAdditionsIndicator',n21namespace:String=niem21_it_URI,n3:String='ValuationAdditionsCode'},
		case((resolvedName='ValuationAdditionsIndicator') and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameProperty('ValuationAdditionsCode');
			myself.type:=findOrCreateClass('ValuationAdjustmentType',niem21_it_URI);
		};
		case((resolvedName='PersonBirthPlaceCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='PersonAugmentationType')){
					myself:=myself.renameProperty('PersonBirthplace');
			myself.type:=null;
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
			
		};
		case((resolvedName='SupervisionRestrictionCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='SupervisionRestrictionType')){
					myself:=myself.renameProperty('SupervisionRestriction');
			myself.type:=findOrCreateClass('SupervisionRestrictionType',niem21_j_URI);
		};
		case((resolvedName='DocumentSubjectCode') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='DocumentType')){
					myself:=myself.renameProperty('DocumentSubject');
			myself.type:=null;
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
		};
		
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='OrganizationFacilityAssociationType')){
					myself:=myself.renameProperty('Facility');
			myself.type:=findOrCreateClass('FacilityType',niem21_nc_URI);
		};
		case((resolvedName='LocationCountry') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonCountryAssociationType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
				myself.isDerivedUnion:=false;
				myself.isDerived:=false;
				myself.isReadOnly:=false;
					myself:=myself.renameProperty('Country');
			myself.type:=findOrCreateClass('CountryType',niem21_im_URI);
		};
		case((resolvedName='EnforcementCategoryCode') and (resolvedNamespace=niem21_scr_URI) and (resolvedClassName='EnforcementEncounterType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
					myself:=myself.renameProperty('Enforcement');
			myself.type:=findOrCreateClass('EnforcementType',niem21_scr_URI);
		};
		
		case((resolvedName='SubjectCriminalOrganizationInvolvementCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='SubjectType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
					myself:=myself.renameProperty('Involvement');
			myself.type:=null;
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
			
		};
		
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonCountryAssociationType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
					myself:=myself.renameProperty('PersonCountryRole');
			myself.type:=findOrCreateClass('PersonCountryRoleType',niem21_im_URI);
		};
		case((resolvedName='LocationFunctionCode') 
			and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='LocationFunctionType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('LocationFunction');
			myself.type:=findOrCreateClass('LocationFunctionType',niem21_it_URI);
				
			}
		case((resolvedName='WCODocumentCategoryCode') 
			and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='WCODocumentCategoryType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('WCODocumentCategory');
			myself.type:=findOrCreateClass('WCODocumentCategoryType',niem21_it_URI);
				
			}
		case((resolvedName='WCODocumentFunctionCategoryCode') 
			and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='WCODocumentFunctionCategoryType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('WCODocumentFunctionCategory');
			myself.type:=findOrCreateClass('WCODocumentFunctionCategoryType',niem21_it_URI);
				
			}
		case((resolvedName='TradePartyCode') 
			and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='SealType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('TradeParty');
			myself.type:=findOrCreateClass('TradePartyType',niem21_it_URI);
				
			}
			
		case((resolvedName='RoleOfPartyCategoryCode') 
			and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='PartyIDCategoryType')){
			// disconnect any references
			myself.clientDependency->forEach(d){d.removeElement();};
			myself:=myself.renameProperty('RoleOfPartyCategory');
			myself.type:=findOrCreateClass('PartyIDCategoryType',niem21_it_URI);
				
			}
	
		case((resolvedName='ImageHeightValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=getXMLPrimitiveType('nonNegativeInteger');
		};
		case((resolvedName='ProgramCapacityQuantity') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=getXMLPrimitiveType('nonNegativeInteger');
		};
		case((resolvedName='PartyID') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=getXMLPrimitiveType('string');
		};
		
		case((resolvedName='ImageWidthValue') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=getXMLPrimitiveType('nonNegativeInteger');
		};
		case((resolvedName='EncounterIdentification') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonEncounterType')){
					myself:=myself.renameProperty('FingerprintTakenIndicator');
			myself.type:=getXMLPrimitiveType('boolean');
		};
		case((resolvedName='PartyID') and (resolvedNamespace=niem21_it_URI) ){
			myself.type:=getXMLPrimitiveType('string');
		};
//		  <xs:element name="SectorPosition" type="cbrn:RelativeLocationType" nillable="true">
		case((resolvedName='SectorPosition') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('RelativeLocationType',niem21_cbrn_URI);
		};
	
		case((resolvedName='ConsignmentItemIdentification') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('IdentificationType',niem21_nc_URI);
		};
		case((resolvedName='ConsignmentItemVolumeMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='GoodsWeightItemLevel') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		//		Tuple{n21:String='GoodsNetWeight',n21namespace:String=niem21_it_URI,n3:String='GoodsNetWeightMeasure'},
		
		case((resolvedName='GoodsNetWeight') and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameProperty('GoodsNetWeightMeasure');
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='GoodVolumeMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		
		
		//		Tuple{n21:String='CustomsOfficeDutyTaxPayment',n21namespace:String=niem21_it_URI,n3:String='CustomsOfficeDutyTaxPaymentText'},
		case((resolvedName='CustomsOfficeDutyTaxPayment') and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameProperty('CustomsOfficeDutyTaxPaymentText');
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		
		case((resolvedName='DeclarationTotalGrossWeightMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='PackageGroupCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='UNDGCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='IMOClassCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='IMOSubsidiaryClassCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='MFACodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='EMSCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='PrimaryPlacardCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='SecondaryPlacardCodeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='VehiclePassengerSafeQuantity') and (resolvedNamespace=niem21_nc_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('nonNegativeInteger');
			myself.type:=str;
		};
		
		//		Tuple{n21:String='LoadingLocationCode',n21namespace:String=niem21_it_URI,n3:String='LoadingLocationCategoryText'},
		
//		case((resolvedName='LoadingLocationCategoryText') and (resolvedNamespace=niem21_it_URI)){
		case((resolvedName='LoadingLocationCode') and (resolvedNamespace=niem21_it_URI)){
			myself:=myself.renameProperty('LoadingLocationCategoryText');
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		//		Tuple{n21:String='SecuritiesRansomMoneyCode',n21namespace:String=niem21_j_URI,n3:String='SecuritiesRansomMoneyText',n3namespace:String=niem21_j_URI,sgName:String='SecuritiesRansomMoney',sgNamespace:String=niem21_j_URI	},
		case((resolvedName='SecuritiesRansomMoneyCode') and (resolvedNamespace=niem21_j_URI)){
			myself:=myself.renameProperty('SecuritiesRansomMoneyText');
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup('SecuritiesRansomMoneyCode','SecuritiesRansomMoneyText','SecuritiesRansomMoney',niem21_j_URI);
			
		};
		// im:ImmigrationClassOfAdmissionCategoryCodeType
		case((resolvedName='ClassOfAdmissionCode') and (resolvedNamespace=niem21_scr_URI)){
			var ImmigrationClassOfAdmissionCategoryCodeType:UML::Enumeration =findOrCreateEnumeration('ImmigrationClassOfAdmissionCategoryCodeType',niem21_im_URI);
			var ImmigrationClassOfAdmissionCategoryCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('ImmigrationClassOfAdmissionCategoryCodeSimpleType',niem21_im_URI);
			ImmigrationClassOfAdmissionCategoryCodeSimpleType.generalize(ImmigrationClassOfAdmissionCategoryCodeType);
			myself.type:=ImmigrationClassOfAdmissionCategoryCodeType;

		};
		
		case((resolvedName='VehicleOdometerReadingMeasure') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='FlashPointMeasure') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		case((resolvedName='ItineraryArrivalDate') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('DateType',niem21_nc_URI);
		};
		case((resolvedName='ItineraryDepartureDate') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('DateType',niem21_nc_URI);
		};
		case((resolvedName='TransportMeansConveyance') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('TransportMeansType',niem21_it_URI);
		};
		
		//		Tuple{n21:String='WCODocumentNameCategory',n21namespace:String=niem21_it_URI,n3:String='WCODocumentNameCategoryCode'},
		case((resolvedName='WCODocumentNameCategory') and (resolvedNamespace=niem21_it_URI)){
					myself:=myself.renameProperty('WCODocumentNameCategoryCode');
			var simpleEnumeration:UML::Enumeration=findOrCreateEnumeration('DocumentCategoryCodeSimpleType',niem21_itis_URI);
			var complexEnumeration:UML::Enumeration=findOrCreateEnumeration('DocumentCategoryCodeType',niem21_itis_URI);
			simpleEnumeration.generalize(complexEnumeration);
			myself.type:=complexEnumeration;
		};
		
		
		case((resolvedName='Location') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonEncounterType')){
					myself:=myself.renameProperty('PersonEncounterLocation');
			myself.type:=findOrCreateClass('LocationType',niem21_nc_URI);
		};
		case((resolvedName='TransportActivityLocation') and (resolvedNamespace=niem21_it_URI)){
			myself.type:=findOrCreateClass('TransportActivityLocationType',niem21_it_URI);
		};
		
//		Tuple{n21:String='BinaryFormatID',n21namespace:String=niem21_nc_URI,n3:String='BinaryFormatText'},
		case((resolvedName='BinaryFormatID') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('BinaryFormatText');

			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='VIRNumberText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='CHAINumberText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		case((resolvedName='CollectorateText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		//		Tuple{n21:String='GoodsLocationCode',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationCategoryText',n3namespace:String=niem21_it_URI,sgName:String='TextType',sgNamespace:String=niem21_nc_URI	},
		case((resolvedName='GoodsLocationCode') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup('GoodsLocationCode','GoodsLocationCategoryText','TextType',niem21_nc_URI);
		};
		
		case((resolvedName='PreviousActivityAssociation') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('BinaryFormatText');
			// AssociationType, RelatedActivityAssociationType, PreviousActivityAssociationType
			var AssociationType:UML::Class=findOrCreateClass('AssociationType',niem21_nc_URI);
			var RelatedActivityAssociationType:UML::Class=findOrCreateClass('RelatedActivityAssociationType',niem21_nc_URI);
			var PreviousActivityAssociationType:UML::Class=findOrCreateClass('PreviousActivityAssociationType',niem21_nc_URI);
			// set inheritance if necessary .general Generalization
			AssociationType.generalize(RelatedActivityAssociationType);
			RelatedActivityAssociationType.generalize(PreviousActivityAssociationType);
			// set stereotype if necessary applyStereotype
			AssociationType.conditionallyApplyStereotype(NIEMAssociationStereotype);
			RelatedActivityAssociationType.conditionallyApplyStereotype(NIEMAssociationStereotype);
			PreviousActivityAssociationType.conditionallyApplyStereotype(NIEMAssociationStereotype);
			myself.type:=PreviousActivityAssociationType;
		};
	//		Tuple{n21:String='QualityCommentText',n21namespace:String=niem21_nc_URI,n3:String='QualityComment'},
		case((resolvedName='QualityCommentText') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('QualityComment');
			myself.type:=findOrCreateClass('CommentType',niem21_nc_URI);
		};
		
		case((resolvedName='Organization') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='OrganizationContactInformationAssociationType')){
			var ContactEntity:UML::Property=myself.organizationEntity('ContactEntity');
			ContactEntity.setSubstitutionGroup('Contact',niem21_nc_URI);
		};
		case((resolvedName='LocationGeographicElevation') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='LocationType')){
					myself:=myself.renameProperty('LocationHeight');
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
					
		};
		
		
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonContactInformationAssociationType')){
			var ContactEntity:UML::Property=myself.personEntity('ContactEntity');
			ContactEntity.setSubstitutionGroup('Contact',niem21_nc_URI);
		};
		case((resolvedName='InjuryTreatmentText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='InjuryType') ){
					myself:=myself.renameProperty('TreatmentText');
			var TreatmentType:UML::Class=findOrCreateClass('TreatmentType',niem21_nc_URI);
			TreatmentType.ownedAttribute+=myself;
		};
		
		
		case((resolvedName='Lessor') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var ItemAugmentationType:UML::Class=findOrCreateClass('ItemAugmentationType',niem21_j_URI);
			ItemAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='Lessee') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var ItemAugmentationType:UML::Class=findOrCreateClass('ItemAugmentationType',niem21_j_URI);
			ItemAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleWantedIndicator') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
   		case((resolvedName='VehicleUseCode') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType')){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		
		case((resolvedName='VehicleVINAText') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleTitle') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleTaxableAmount') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleShipDate') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehiclePaperMCOIssuedIndicator') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleInvoiceIdentification') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleInvoiceDate') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleGarageIndicator') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleGarage') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleEmissionInspectionQuantity') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleBrander') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='VehicleBrand') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='VehicleType') ){
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		
		case((resolvedName='ItemRentalIndicator') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='VehicleType') ){
			var ItemType:UML::Class=findOrCreateClass('ItemType',niem21_nc_URI);
			ItemType.ownedAttribute+=myself;
		};
		case((resolvedName='ItemLeaseIndicator') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='VehicleType') ){
			var ItemType:UML::Class=findOrCreateClass('ItemType',niem21_nc_URI);
			ItemType.ownedAttribute+=myself;
		};
		case((resolvedName='ItemFirstSoldYearDate') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='VehicleType') ){
			var ItemType:UML::Class=findOrCreateClass('ItemType',niem21_nc_URI);
			ItemType.ownedAttribute+=myself;
		};
		
		case((resolvedName='VehicleUseANSID20Code') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='CrashVehicleType') ){
					myself:=myself.renameProperty('VehicleUse');
			var VehicleAugmentationType:UML::Class=findOrCreateClass('VehicleAugmentationType',niem21_j_URI);
			VehicleAugmentationType.ownedAttribute+=myself;
		};
		
		case((resolvedName='PersonClothing') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='PersonType') ){
			var PersonAugmentationType:UML::Class=findOrCreateClass('PersonAugmentationType',niem21_j_URI);
			PersonAugmentationType.ownedAttribute+=myself;
		};
		case((resolvedName='PersonIntoxication') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='PersonType') ){
			var PersonAugmentationType:UML::Class=findOrCreateClass('PersonAugmentationType',niem21_j_URI);
			PersonAugmentationType.ownedAttribute+=myself;
		};
		
   		
		case((resolvedName='InjuryTreatmentProvider') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='InjuryType') ){
					myself:=myself.renameProperty('TreatmentProvider');
			var TreatmentType:UML::Class=findOrCreateClass('TreatmentType',niem21_nc_URI);
			TreatmentType.ownedAttribute+=myself;
		};
	
	case((resolvedName='CarrierName') and (resolvedNamespace=niem21_it_URI) and (resolvedClassName='ManifestType') ){
			var ManifestAugmentationType:UML::Class=findOrCreateClass('ManifestAugmentationType',niem21_it_URI);
			ManifestAugmentationType.ownedAttribute+=myself;
		};
	case((resolvedName='CommentTitleText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='MetadataType') ){
			var CommentType:UML::Class=findOrCreateClass('CommentType',niem21_nc_URI);
			CommentType.ownedAttribute+=myself;
		};
  
		case((resolvedName='DisciplinaryActionFacility') and (resolvedNamespace=niem21_j_URI) and (resolvedClassName='DisciplinaryActionType')){
			var DisciplinaryActionAugmentationType:UML::Class=findOrCreateClass('DisciplinaryActionAugmentationType',niem21_j_URI);
			DisciplinaryActionAugmentationType.ownedAttribute+=myself;
						DisciplinaryActionAugmentationType.applyStereotype(NIEMAugmentationStereotype);
			
		};
		
//		Tuple{n21:String='DrugDaysSupplyText',n21namespace:String=niem21_nc_URI,n3:String='DrugDaysSupplyQuantity'},
		case((resolvedName='DrugDaysSupplyText') and (resolvedNamespace=niem21_nc_URI)){
					myself:=myself.renameProperty('DrugDaysSupplyQuantity');
			var decimal:UML::Classifier=getXMLPrimitiveType('decimal');
			var NumericType:UML::Classifier=findOrCreatePrimitiveType('NumericType',niem21_nc_URI);
			var QuantityType:UML::Classifier=findOrCreatePrimitiveType('QuantityType',niem21_nc_URI);
			decimal.generalize(NumericType);
			NumericType.generalize(QuantityType);
			myself.type:=QuantityType;
		};
		case((resolvedName='EmployeeOccupationCode') and (resolvedNamespace=niem21_nc_URI)){
			var OccupationCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('OccupationCodeSimpleType',niem21_dol_soc_URI);
			var OccupationCodeType:UML::Enumeration=findOrCreateEnumeration('OccupationCodeType',niem21_dol_soc_URI);
			OccupationCodeSimpleType.generalize(OccupationCodeType);
			myself.type:=OccupationCodeType;
		};
		
		case((resolvedName='ConveyanceSalesTaxPercentage') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='ConveyanceType')){
					myself:=myself.renameProperty('ConveyanceSalesTaxPercent');
			var ItemType:UML::Class=findOrCreateClass('ItemType',niem21_nc_URI);
			ItemType.ownedAttribute+=myself;
		};
		case((resolvedName='ReferralItem') and (resolvedNamespace=niem21_nc_URI)){
			var ItemType:UML::Class=findOrCreateClass('ItemType',niem21_nc_URI);
			myself.type:=ItemType;
		};
		
		case((resolvedName='DocumentCategoryID') and (resolvedNamespace=niem21_nc_URI)and (resolvedClassName='DocumentType')){
					myself:=myself.renameProperty('DocumentCategory');
								myself.type:=null;
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
					
		};
	//		Tuple{n21:String='ConveyanceIDIssuingJurisdictionCode',n21namespace:String=niem21_scr_URI,n3:String='ConveyanceIDIssuingJurisdiction'},
		case((resolvedName='ConveyanceIDIssuingJurisdictionCode') and (resolvedNamespace=niem21_scr_URI)and (resolvedClassName='ConveyanceAugmentationType<')){
					myself:=myself.renameProperty('ConveyanceIDIssuingJurisdiction');
		};
		/* ?
		case((resolvedName='ConveyanceIDIssuingJurisdictionCode') and (resolvedNamespace=niem21_scr_URI)){
						myself.type:=
		};
	*/
		case((resolvedName='Organization') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='OrganizationItemAssociationType')){
			myself.organizationEntity('Entity');
		};
		case((resolvedName='Person') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='PersonItemAssociationType')){
			myself.personEntity('Entity');
		};
				//Tuple{n21:String='StructuredAddress',n21namespace:String=niem21_nc_URI,n3:String='Address'},
		
		case(((resolvedName='LocationAddress')or(resolvedName='Address')or(resolvedName='StructuredAddress')) and (resolvedNamespace=niem21_nc_URI)){
			
			myself.propertyWithNewSubstitutionGroup(resolvedName,'Address','LocationAddressAbstract',niem21_nc_URI);
		};
//  <xs:element name="OrganizationAugmentation" type="j:OrganizationAugmentationType" substitutionGroup="nc:OrganizationAugmentationPoint">
		
		case((resolvedName='OrganizationAugmentation') and (resolvedNamespace=niem21_j_URI)){
			
			myself.propertyWithNewSubstitutionGroup('OrganizationAugmentation','OrganizationAugmentation','OrganizationAugmentationPoint',niem21_j_URI);
		};
		//  <xs:element name="OrganizationORIIdentification" type="nc:IdentificationType" substitutionGroup="j:OrganizationIdentificationAbstract">
		case((resolvedName='OrganizationORIIdentification') and (resolvedNamespace=niem21_j_URI)){
//			myself.propertyWithNewSubstitutionGroup('OrganizationORIIdentification','OrganizationORIIdentification','OrganizationIdentificationAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('OrganizationORIIdentification','OrganizationORIIdentification','OrganizationIdentification',niem21_j_URI);
		};
		
		//   <xs:element name="PersonEyewearText" type="nc:TextType" substitutionGroup="nc:PersonEyewearAbstract">
		case((resolvedName='PersonEyewearDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonEyewearDescriptionText','PersonEyewearText','PersonEyewearAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonEyewearDescriptionText','PersonEyewearText','PersonEyewear',niem21_nc_URI);
			
		};
		//   <xs:element name="PersonBuildText" type="nc:TextType" substitutionGroup="nc:PersonBuildAbstract">
		case((resolvedName='PersonBuildText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonBuildText','PersonBuildText','PersonBuildAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonBuildText','PersonBuildText','PersonBuild',niem21_nc_URI);
		};
		//   <xs:element name="PersonReligionText" type="nc:TextType" substitutionGroup="nc:ReligionCategoryAbstract">
		case((resolvedName='PersonReligionText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonReligionText','PersonReligionText','ReligionCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonReligionText','PersonReligionText','PersonReligion',niem21_nc_URI);
		};
		//  <xs:element name="DocumentCategoryText" type="nc:TextType" substitutionGroup="nc:DocumentCategory">
		case((resolvedName='DocumentCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DocumentCategoryText','DocumentCategoryText','DocumentCategory',niem21_nc_URI);
		};
		
		//   <xs:element name="SpeedUnitCode" type="unece:VelocityCodeType" substitutionGroup="nc:SpeedUnitAbstract">
  		//<xs:element name="SpeedUnitAbstract" substitutionGroup="nc:MeasureUnit" abstract="true">
	
		case((resolvedName='SpeedUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			var VelocityCodeType:UML::Enumeration:=findOrCreateEnumeration('VelocityCodeType',niem21_unece_URI);
			var VelocityCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('VelocityCodeSimpleType',niem21_unece_URI);
			VelocityCodeSimpleType.generalize(VelocityCodeType);
			myself.type:=VelocityCodeType;
//				var SpeedUnitAbstract:UML::Property=findOrCreateElement('SpeedUnitAbstract',niem21_nc_URI);
				var SpeedUnitAbstract:UML::Property=findOrCreateElement('SpeedUnit',niem21_nc_URI);
				SpeedUnitAbstract.isDerivedUnion:=true;
				SpeedUnitAbstract.isDerived:=true;
				SpeedUnitAbstract.isReadOnly:=true;
			
				SpeedUnitAbstract.setSubstitutionGroup('MeasureUnit',niem21_nc_URI);
			
//			myself.propertyWithNewSubstitutionGroup('SpeedUnitCode','SpeedUnitCode','SpeedUnitAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('SpeedUnitCode','SpeedUnitCode','SpeedUnit',niem21_nc_URI);
		};
		
		//   <xs:element name="BinaryCategoryText" type="nc:TextType" substitutionGroup="nc:BinaryCategoryAbstract">
		case((resolvedName='BinaryCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('BinaryCategoryText','BinaryCategoryText','BinaryCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('BinaryCategoryText','BinaryCategoryText','BinaryCategory',niem21_nc_URI);
		};
		
////////////////////////////////////////namespace change	
////////////////////////////////////////namespace change block end		
		case((resolvedName='AircraftBaseAirport') and (resolvedNamespace=niem21_nc_URI)){
			var AirportType:UML::Class:=findOrCreateClass('AirportType',niem21_nc_URI);
			myself.type:=AirportType;
		};
		case((resolvedName='Airport') and (resolvedNamespace=niem21_nc_URI)){
			var AirportType:UML::Class:=findOrCreateClass('AirportType',niem21_nc_URI);
			myself.type:=AirportType;
		};
		case((resolvedName='OdometerReadingMeasure') and (resolvedNamespace=niem21_nc_URI)){
			var MeasureType:UML::Class:=findOrCreateClass('MeasureType',niem21_nc_URI);
			myself.type:=MeasureType;
		};
		case((resolvedName='ContainerEmptyWeight') and (resolvedNamespace=niem21_it_URI)){
			var MeasureType:UML::Class:=findOrCreateClass('MeasureType',niem21_nc_URI);
			myself.type:=MeasureType;
		};
		case((resolvedName='ShippingContainerLoadedWeight') and (resolvedNamespace=niem21_it_URI)){
			var MeasureType:UML::Class:=findOrCreateClass('MeasureType',niem21_nc_URI);
			myself.type:=MeasureType;
		};
		case((resolvedName='CourtEventSequenceID') and (resolvedNamespace=niem21_j_URI)){
			myself.type:=getXMLPrimitiveType('string');
		};
  	
		///////////////////////////////////////////////////////////////
		case((resolvedName='BiometricCaptureDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var BiometricCaptureDescriptionText:UML::Property=createElement('BiometricCaptureDescriptionText');

			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			
			
			BiometricCaptureDescriptionText.type:=TextType;
			BiometricCaptureType.ownedAttribute+=BiometricCaptureDescriptionText;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricCaptureSourceText') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var BiometricCaptureSource:UML::Property=createElement('BiometricCaptureSource');
			BiometricCaptureSource.type:=findOrCreateClass('AcquisitionSourceType',niem21_ansi_nist_URI);
			BiometricCaptureType.ownedAttribute+=BiometricCaptureSource;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
		case((resolvedName='BiometricCaptureDate') and (resolvedNamespace=niem21_nc_URI)){
			// change to biom namespace, make this a BiometricCapture, typed appropriately
			// need to add appropriate property to BiometricCapture
			var BiometricCaptureType:UML::Class:=findOrCreateClass('BiometricCaptureType',niem21_ansi_nist_URI);
			var CaptureDate:UML::Property=createElement('CaptureDate');
			CaptureDate.type:=findOrCreateClass('DateType',niem21_nc_URI);
			BiometricCaptureType.ownedAttribute+=CaptureDate;
			myself.type:=BiometricCaptureType;
			myself.changeNamespace('BiometricCapture',niem21_ansi_nist_URI);
		};
			case((resolvedName='BiometricImage') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=null;// may need to have some substitution groups
				myself.isDerivedUnion:=true;
				myself.isDerived:=true;
				myself.isReadOnly:=true;
			myself.changeNamespace('BiometricImage',niem21_ansi_nist_URI);
		};
		/*
		  <xs:element name="DNASampleDetail" type="biom:DNASampleDetailType" substitutionGroup="biom:BiometricDetail">
		    <xs:element name="DNASampleImage" type="biom:DNAImageType" substitutionGroup="biom:BiometricImage">
		  
		*/
  	//		Tuple{n21:String='CourtOrderDesignatedProperty',n21namespace:String=niem21_j_URI,n3:String='CourtOrderDesignatedItem'},
		case((resolvedName='CourtOrderDesignatedProperty') and (resolvedNamespace=niem21_j_URI)){
					myself:=myself.renameProperty('CourtOrderDesignatedItem');
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
			
		};
		/*
			case((resolvedName='DNALocus') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=findOrCreateClass('DNASampleDetailType',niem21_ansi_nist_URI);
			var DNASampleDetail:UML::Property=myself.changeNamespace('DNASampleDetail',niem21_ansi_nist_URI);
			DNASampleDetail.propertyWithNewSubstitutionGroup('DNALocus','DNASampleDetail','BiometricDetail',niem21_ansi_nist_URI);
		};
		*/
			case((resolvedName='DNAImage') and (resolvedNamespace=niem21_nc_URI)){
				myself.type:=findOrCreateClass('DNAImageType',niem21_ansi_nist_URI);
			var DNASampleImage:UML::Property=myself.changeNamespace('DNASampleImage',niem21_ansi_nist_URI);
			DNASampleImage.propertyWithNewSubstitutionGroup('DNAImage','DNASampleImage','BiometricImage',niem21_ansi_nist_URI);
		};
		 // <xs:element name="PhysicalFeatureDescriptionDetail" type="biom:PhysicalFeatureDescriptionType" substitutionGroup="biom:BiometricDetail">
		//  <xs:element name="PhysicalFeatureCategoryCode" type="biom:PhysicalFeatureCategoryCodeType" substitutionGroup="biom:PhysicalFeatureCategory">
		case((resolvedName='PhysicalFeatureCategoryCode') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureCategoryCode','PhysicalFeatureCategoryCode','PhysicalFeatureCategory',niem21_ansi_nist_URI);
		};
		//		Tuple{n21:String='ScreeningIdentificationAugmentation',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentation'},
		case((resolvedName='ScreeningIdentificationAugmentation') and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup('ScreeningIdentificationAugmentation','IdentificationAugmentation','IdentificationAugmentationPoint',niem21_nc_URI);
		};
		
		//   <xs:element name="PhysicalFeatureDescriptionDetail" type="biom:PhysicalFeatureDescriptionType" substitutionGroup="biom:BiometricDetail">
		// this is resulting in attribute on wrong class, should be on BiometricDataType
			case((resolvedName='PhysicalFeatureDescriptionDetail') and (resolvedNamespace=niem21_ansi_nist_URI)){
			myself.propertyWithNewSubstitutionGroup('PhysicalFeatureDescriptionDetail','PhysicalFeatureDescriptionDetail','BiometricDetail',niem21_ansi_nist_URI);
		};
		
		
		
		//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryText',n3namespace:String=niem21_nc_URI},
		//  <xs:element name="TelephoneNumberCategoryText" type="nc:TextType" substitutionGroup="nc:TelephoneNumberCategory">
		
		case((resolvedName='TelephoneCategoryDescriptionText') and (resolvedNamespace=niem21_scr_URI)){
			myself.changeNamespace('TelephoneNumberCategoryText',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('TelephoneCategoryDescriptionText','TelephoneNumberCategoryText','TelephoneNumberCategory',niem21_nc_URI);
		};
	//		Tuple{n21:String='PersonIssuedCourtOrderAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIssuedCourtOrderAssociation',n3namespace:String=niem21_j_URI},
	//  <xs:element name="PersonIssuedCourtOrderAssociation" type="nc:PersonDocumentAssociationType">
	
		case((resolvedName='PersonIssuedCourtOrderAssociation') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('PersonIssuedCourtOrderAssociation',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PersonIssuedCourtOrderAssociation','PersonIssuedCourtOrderAssociation','PersonDocumentAssociationType',niem21_nc_URI);
		};
		//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleInspectionJurisdictionAuthorityText" type="nc:TextType" substitutionGroup="j:VehicleInspectionJurisdictionAuthority">
		
		case((resolvedName='VehicleInspectionJurisdictionAuthorityText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleInspectionJurisdictionAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleInspectionJurisdictionAuthorityText','VehicleInspectionJurisdictionAuthorityText','VehicleInspectionJurisdictionAuthority',niem21_j_URI);
		};
		
//		Tuple{n21:String='VehicleBrandVehicleDispositionText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionText',n3namespace:String=niem21_j_URI},
//  <xs:element name="VehicleBrandVehicleDispositionText" type="nc:TextType" substitutionGroup="j:VehicleBrandVehicleDisposition">
		case((resolvedName='VehicleBrandVehicleDispositionText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandVehicleDispositionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandVehicleDispositionText','VehicleBrandVehicleDispositionText','VehicleBrandVehicleDisposition',niem21_j_URI);
		};
		
		//		Tuple{n21:String='VehicleBrandText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandText',n3namespace:String=niem21_j_URI},
		//  <xs:element name="VehicleBrandText" type="nc:TextType" substitutionGroup="j:VehicleBrandDesignation">
		
		case((resolvedName='VehicleBrandText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandText','VehicleBrandText','VehicleBrandDesignation',niem21_j_URI);
		};
		
		//		Tuple{n21:String='DriverLicenseCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassText',n3namespace:String=niem21_j_URI},
//  <xs:element name="DriverLicenseCommercialClassText" type="nc:TextType" substitutionGroup="j:DriverLicenseCommercialClass">
		
		case((resolvedName='DriverLicenseCommercialClassText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('DriverLicenseCommercialClassText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialClassText','DriverLicenseCommercialClassText','DriverLicenseCommercialClass',niem21_j_URI);
		};
		
		
		
		
		
		
		
//		Tuple{n21:String='LienReleaseReasonText',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonText',n3namespace:String=niem21_j_URI},
//  <xs:element name="LienReleaseReasonText" type="nc:TextType" substitutionGroup="j:LienReleaseReason">
		
		case(((resolvedName='LienReleaseReasonText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LienReleaseReasonText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LienReleaseReasonText','LienReleaseReasonText','LienReleaseReason',niem21_j_URI);
		};
		
			case((resolvedName='InjurySeverityText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('InjurySeverityText','InjurySeverityText','InjurySeverity',niem21_nc_URI);
		};
		
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryText',n3namespace:String=niem21_j_URI},
//  <xs:element name="VehicleBrandDamagePercentageCategoryText" type="nc:TextType" substitutionGroup="j:VehicleBrandDamagePercentageCategory">

		case((resolvedName='VehicleBrandDamagePercentageCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('VehicleBrandDamagePercentageCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('VehicleBrandDamagePercentageCategoryText','VehicleBrandDamagePercentageCategoryText','VehicleBrandDamagePercentageCategory',niem21_j_URI);
		};
		
//		Tuple{n21:String='LesseeJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
//  <xs:element name="LesseeJurisdictionAuthorityText" type="nc:TextType" substitutionGroup="j:LesseeJurisdictionAuthority">
		
		case(((resolvedName='LesseeJurisdictionAuthorityText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('LesseeJurisdictionAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('LesseeJurisdictionAuthorityText','LesseeJurisdictionAuthorityText','LesseeJurisdictionAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='ConveyancePartCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryText',n3namespace:String=niem21_j_URI},
//  <xs:element name="ConveyancePartCategoryText" type="nc:TextType" substitutionGroup="j:ConveyancePartCategory">
		
		case(((resolvedName='ConveyancePartCategoryText')) and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyancePartCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartCategoryText','ConveyancePartCategoryText','ConveyancePartCategory',niem21_j_URI);
		};
		/*
		case((resolvedName='ConveyanceRegistrationPlateIdentification') 
			and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='ConveyanceRegistrationType')){
			myself.changeNamespace('ConveyanceRegistrationPlateIdentification',niem21_j_URI);
				
			}
		*/
/*		
		case((resolvedName='ConveyanceRegistrationPlateIdentification') 
			and (resolvedNamespace=niem21_nc_URI) and not(resolvedClassName='ConveyanceRegistrationType')){
			//var ConveyanceRegistrationPlateIdentification:UML::Property=myself.changeNamespace('ConveyanceRegistrationPlateIdentification',niem21_j_URI);
//			ConveyanceRegistrationPlateIdentification.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateIdentification','ConveyanceRegistrationPlateIdentification','VehicleMakeAbstract',niem21_nc_URI);
			// move up one level to ItemStateIdentification
			if(myself.isPropertyHolderElement())then{
				// this can be a rename
				myself.renameProperty('ItemStateIdentification');
			}else{
				// for non-top-level, this property must move up to item and change name
				var item:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemStateIdentification')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					myself.name:='ItemStateIdentification';
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;

		};
*/		
		
////////////////////////////////////////namespace change		
////////////////////////////////////////namespace change block end		
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailText',n3namespace:String=niem21_j_URI},
//  <xs:element name="ConveyanceRegistrationStatusDetailText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationStatusDetail">
		case((resolvedName='ConveyanceRegistrationStatusDetailText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationStatusDetailText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationStatusDetailText','ConveyanceRegistrationStatusDetailText','ConveyanceRegistrationStatusDetail',niem21_j_URI);
		};
		
		//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationPlateCategoryText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationPlateCategory">
		
		case((resolvedName='ConveyanceRegistrationPlateCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateCategoryText','ConveyanceRegistrationPlateCategoryText','ConveyanceRegistrationPlateCategory',niem21_j_URI);
		};
//		Tuple{n21:String='ConveyanceRegistrationPlateColorText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ConveyanceRegistrationPlateColorText" type="nc:TextType" substitutionGroup="j:ConveyanceRegistrationPlateColor">
		
		case((resolvedName='ConveyanceRegistrationPlateColorText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ConveyanceRegistrationPlateColorText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyanceRegistrationPlateColorText','ConveyanceRegistrationPlateColorText','ConveyanceRegistrationPlateColor',niem21_j_URI);
		};
		//		Tuple{n21:String='FirearmCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescriptionText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="FirearmCategoryDescriptionText" type="nc:TextType" substitutionGroup="j:FirearmCategoryDescription">
		
		case((resolvedName='FirearmCategoryDescriptionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmCategoryDescriptionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmCategoryDescriptionText','FirearmCategoryDescriptionText','FirearmCategoryDescription',niem21_j_URI);
		};

		//		Tuple{n21:String='FirearmFinishText',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinishText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="FirearmFinishText" type="nc:TextType" substitutionGroup="j:FirearmFinish">
		
		case((resolvedName='FirearmFinishText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmFinishText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmFinishText','FirearmFinishText','FirearmFinish',niem21_j_URI);
		};
		//		Tuple{n21:String='FirearmCaliberText',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeText',n3namespace:String=niem21_j_URI},		
	//  <xs:element name="FirearmBoreSizeText" type="nc:TextType" substitutionGroup="j:FirearmBoreSize">
		
		case((resolvedName='FirearmCaliberText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('FirearmBoreSizeText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('FirearmCaliberText','FirearmBoreSizeText','FirearmBoreSize',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusText',n3namespace:String=niem21_j_URI},
// <xs:element name="DriverLicenseCommercialStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseCommercialStatus">		
		
		case((resolvedName='DriverLicenseCommercialStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseCommercialStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseCommercialStatusText','DriverLicenseCommercialStatusText','DriverLicenseCommercialStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicensePermitStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusText',n3namespace:String=niem21_j_URI},		
//		  <xs:element name="DriverLicensePermitStatusText" type="nc:TextType" substitutionGroup="j:DriverLicensePermitStatus">
		
		case((resolvedName='DriverLicensePermitStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicensePermitStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicensePermitStatusText','DriverLicensePermitStatusText','DriverLicensePermitStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseNonCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusText',n3namespace:String=niem21_j_URI},		
//		  <xs:element name="DriverLicenseNonCommercialStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseNonCommercialStatus">
		case((resolvedName='DriverLicenseNonCommercialStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseNonCommercialStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseNonCommercialStatusText','DriverLicenseNonCommercialStatusText','DriverLicenseNonCommercialStatus',niem21_j_URI);
		};
		//   <xs:element name="PersonHairStyleText" type="nc:TextType" substitutionGroup="nc:PersonHairStyleAbstract">
		case((resolvedName='PersonHairStyleText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonHairStyleText','PersonHairStyleText','PersonHairStyleAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonHairStyleText','PersonHairStyleText','PersonHairStyle',niem21_nc_URI);
		};
		//   <xs:element name="PersonHairLengthText" type="nc:TextType" substitutionGroup="nc:PersonHairLengthAbstract">
		case((resolvedName='PersonHairLengthText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonHairLengthText','PersonHairLengthText','PersonHairLengthAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonHairLengthText','PersonHairLengthText','PersonHairLength',niem21_nc_URI);
		};
		//  <xs:element name="PersonFacialHairText" type="nc:TextType" substitutionGroup="nc:PersonFacialHairAbstract">
		case((resolvedName='PersonFacialHairText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('PersonFacialHairText','PersonFacialHairText','PersonFacialHairAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonFacialHairText','PersonFacialHairText','PersonFacialHair',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='LocationTwoDimensionalGeographicCoordinate',n21namespace:String=niem21_nc_URI,n3:String='Location2DGeospatialCoordinate'},// needs substitution group also
		case((resolvedName='LocationTwoDimensionalGeographicCoordinate') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('LocationTwoDimensionalGeographicCoordinate','Location2DGeospatialCoordinate','LocationGeospatialCoordinateAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationTwoDimensionalGeographicCoordinate','Location2DGeospatialCoordinate','LocationGeospatialCoordinate',niem21_nc_URI);
			
		};
		
		case((resolvedName='PersonMaritalStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('PersonMaritalStatusText','PersonUnionStatusText','PersonUnionStatus',niem21_nc_URI);
			
		};
 // <xs:element name="LocationUTMCoordinate" type="nc:UTMCoordinateType" substitutionGroup="nc:LocationGeospatialCoordinateAbstract">
		case((resolvedName='LocationUTMCoordinate') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('LocationUTMCoordinate','LocationUTMCoordinate','LocationGeospatialCoordinateAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationUTMCoordinate','LocationUTMCoordinate','LocationGeospatialCoordinate',niem21_nc_URI);
		};
//  <xs:element name="MeasureUnitText" type="nc:TextType" substitutionGroup="nc:MeasureUnit">
		case((resolvedName='MeasureUnitText') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('MeasureUnitText','MeasureUnitText','MeasureUnit',niem21_nc_URI);
		};
//  <xs:element name="GeographicDatumText" type="nc:TextType" substitutionGroup="nc:GeographicDatumAbstract">
//		Tuple{n21:String='UTMDatumID',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		case((resolvedName='UTMDatumID') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:TextType
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			
			
			myself.type:=TextType;
//			myself.propertyWithNewSubstitutionGroup('UTMDatumID','GeographicDatumText','GeographicDatumAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('UTMDatumID','GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
		case((resolvedName='ChargeSequenceID') and (resolvedNamespace=niem21_j_URI)){
			// type of result must be string
			myself.type:=getXMLPrimitiveType('string');
		};
		// ArrestSequenceID
		case((resolvedName='ArrestSequenceID') and (resolvedNamespace=niem21_j_URI)){
			// type of result must be string
			myself.type:=getXMLPrimitiveType('string');
		};
		//   <xs:element name="AircraftTailIdentification" type="nc:IdentificationType">
		// AircraftTailID
		case((resolvedName='AircraftTailID') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:IdentificationType
			var IdentificationType:UML::Classifier=findOrCreateClass('IdentificationType',niem21_nc_URI);
			myself.type:=IdentificationType;
			myself.renameProperty('AircraftTailIdentification');
		};
	// DateAccuracyCode DateAccuracyAbstract
//          <xsd:element ref="nc:DateAccuracyCode" minOccurs="0" maxOccurs="1"/>
 //         <xsd:element ref="nc:MarginDuration" minOccurs="0" maxOccurs="1"/>
	
//		Tuple{n21:String='DateAccuracyCode',n21namespace:String=niem21_nc_URI,n3:String='DateAccuracyAbstract'},
	// MarginDuration
//		Tuple{n21:String='MarginDuration',n21namespace:String=niem21_nc_URI,n3:String='DateMarginOfErrorDuration'},
		case((resolvedName='DateAccuracyCode') and (resolvedNamespace=niem21_nc_URI)){
//			myself.renameProperty('DateAccuracyAbstract');
			myself.renameProperty('DateAccuracy');
			myself.setUpper(1);
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		case((resolvedName='CommentText') and (resolvedNamespace=niem21_nc_URI) and (resolvedClassName='MetadataType')){
			myself.clientDependency:=Set{};
			var CommentType:UML::Classifier=findOrCreateClass('CommentType',niem21_nc_URI);
			myself.type:=CommentType;
			myself:=myself.renameProperty('Comment');
		};
		case((resolvedName='PersonUnionStatus') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=null;
			myself.isDerivedUnion:=true;
			myself.isDerived:=true;
			myself.isReadOnly:=true;
		};
		case((resolvedName='MarginDuration') and (resolvedNamespace=niem21_nc_URI)){
			myself.renameProperty('DateMarginOfErrorDuration');
			myself.setUpper(1);
		};
		
		//   <xs:element name="IdentificationJurisdiction" type="nc:JurisdictionType">
		case((resolvedName='IdentificationJurisdiction') and (resolvedNamespace=niem21_nc_URI)){
			// type of result must be nc:IdentificationType
			var JurisdictionType:UML::Classifier=findOrCreateClass('JurisdictionType',niem21_nc_URI);
			myself.type:=JurisdictionType;
			myself.isDerivedUnion:=false;
			myself.isDerived:=false;
			myself.isReadOnly:=false;
		};
  //<xsd:element name="IdentificationJurisdiction" abstract="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionFIPS10-4Code" type="fips_10-4:CountryCodeType" nillable="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionISO3166Alpha3Code" type="iso_3166:CountryAlpha3CodeType" nillable="true">
  //<xsd:element substitutionGroup="nc:IdentificationJurisdiction" name="IdentificationJurisdictionText" type="nc:TextType" nillable="true">
				
		//  <xsd:element substitutionGroup="nc:MeasureValue" name="MeasurePointValue" type="nc:MeasurePointValueType" nillable="true">2.1
		//  <xs:element name="MeasureDecimalValue" type="niem-xs:decimal" substitutionGroup="nc:MeasurePoint"> 3.0
		//  <xs:element name="MeasurePoint" substitutionGroup="nc:MeasureValue" abstract="true"> 3.0
		case((resolvedName='MeasurePointValue') and (resolvedNamespace=niem21_nc_URI)){
			//propertyWithNewSubstitutionGroup('MeasurePointValue','MeasureDecimalValue','MeasureUnit',niem21_nc_URI);
			log('INFO: subsetting  Property '+self.qualifiedName);
			myself:=myself.renameProperty('MeasureDecimalValue');
			
			if(self.isPropertyHolderElement())then{
				var MeasurePoint:UML::Property=findOrCreateElement('MeasurePoint',niem21_nc_URI);
				var MeasureValue:UML::Property=findOrCreateElement('MeasureValue',niem21_nc_URI);
				MeasurePoint.isDerivedUnion:=true;
				MeasurePoint.isDerived:=true;
				MeasurePoint.isReadOnly:=true;
				MeasureValue.isReadOnly:=true;
				MeasureValue.isDerived:=true;
				MeasureValue.isDerivedUnion:=true;
				// and that needs to be connected to MeasureValue
				MeasurePoint.subsettedProperty:=MeasureValue;
				MeasureValue.namespace.oclAsType(UML::Class).ownedAttribute+=MeasurePoint;
				myself.subsettedProperty:=MeasurePoint;
				MeasurePoint.namespace.oclAsType(UML::Class).ownedAttribute+=myself;
			}else{
			}endif;
				
		};
		case((resolvedName='LocationAltitudeMeasure') and (resolvedNamespace=niem21_nc_URI)){
			// change LengthMeasureType to LocationHeightMeasureType
			var LocationHeightMeasureType:UML::Class=findOrCreateClass('LocationHeightMeasureType',niem21_nc_URI);
			myself.type:=LocationHeightMeasureType;	
//			myself.propertyWithNewSubstitutionGroup('LocationAltitudeMeasure','LocationAltitude','LocationHeightAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LocationAltitudeMeasure','LocationAltitude','LocationHeight',niem21_nc_URI);
			
		};
		
		//   <xs:element name="InjuryCategoryText" type="nc:TextType" substitutionGroup="nc:InjuryCategoryAbstract">
		case((resolvedName='InjuryCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('InjuryCategoryText','InjuryCategoryText','InjuryCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('InjuryCategoryText','InjuryCategoryText','InjuryCategory',niem21_nc_URI);
		};
		//   <xs:element name="AddressHighway" type="nc:HighwayType" substitutionGroup="nc:LocationAddressAbstract">
		// LocationHighway
		case((resolvedName='LocationHighway') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('LocationHighway','AddressHighway','LocationAddressAbstract',niem21_nc_URI);
		};
		//   <xs:element name="AddressCrossStreet" type="nc:CrossStreetType" substitutionGroup="nc:LocationAddressAbstract">
		// LocationCrossStreet
		case((resolvedName='LocationCrossStreet') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('LocationCrossStreet','AddressCrossStreet','LocationAddressAbstract',niem21_nc_URI);
		};
		// DispositionCategoryText
		case((resolvedName='DispositionCategoryText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('DispositionCategoryText','DispositionCategoryText','DispositionCategoryAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DispositionCategoryText','DispositionCategoryText','DispositionCategory',niem21_nc_URI);
		};
		//   <xs:element name="StatusDate" type="nc:DateType" substitutionGroup="nc:StatusDateRepresentation">
		case((resolvedName='StatusDate') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('StatusDate','StatusDate','StatusDateRepresentation',niem21_nc_URI);
		};
    /*
              <xsd:element ref="nc:SecuritiesCollectionEndDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:SecuritiesCollectionStartDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:SecuritiesCategoryCode" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="SecuritiesCategoryCode" type="fbi:TYPSCodeType" nillable="true">
    
              <xs:element ref="nc:SecuritiesCollectionDateRange" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:SecuritiesCategoryAbstract" minOccurs="0" maxOccurs="unbounded"/>
    jxdm:     <xs:element name="SecuritiesCategoryCode" type="ncic:TYPSCodeType" substitutionGroup="nc:SecuritiesCategoryAbstract">

    
    */
		case((resolvedName='SecuritiesCollectionStartDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('SecuritiesCollectionDateRange');
		};
		case((resolvedName='ObligationStartDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('ObligationDateRange');
		};
	
		//   <xs:element name="ItemValueAssigningMethodText" type="nc:TextType" substitutionGroup="nc:ItemValueAssigningMethodAbstract">
		case((resolvedName='ItemValueAssigningMethodText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('ItemValueAssigningMethodText','ItemValueAssigningMethodText','ItemValueAssigningMethodAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('ItemValueAssigningMethodText','ItemValueAssigningMethodText','ItemValueAssigningMethod',niem21_nc_URI);
		};
		
		/*
          <xsd:element ref="nc:ClothingCategoryText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ClothingStyleText" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="j:ClothingCategoryText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingColorText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingStyleText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ClothingAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
		
		*/
		
		case((resolvedName='ConveyancePartBrandName') and (resolvedNamespace=niem21_nc_URI)){
			myself.changeNamespace('ConveyancePartBrandName',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ConveyancePartBrandName','ConveyancePartBrandName','ConveyancePartBrand',niem21_j_URI);
		};
		case((resolvedName='DeviceStoredContactInformation') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredContactInformation','DeviceStoredContactInformation','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceOutgoingTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceOutgoingTelephoneNumber','DeviceOutgoingTelephoneNumber','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceIncomingTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceIncomingTelephoneNumber','DeviceIncomingTelephoneNumber','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceStoredTelephoneNumber') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredTelephoneNumber','DeviceStoredTelephoneNumber','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceOutgoingTextMessage') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MessageType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DeviceOutgoingTextMessage','DeviceOutgoingTextMessage','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceIncomingTextMessage') and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MessageType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('DeviceIncomingTextMessage','DeviceIncomingTextMessage','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceStoredImage') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredImage','DeviceStoredImage','DeviceStoredInformation',niem21_nc_URI);
		};
		//  <xs:element name="InjuryLocationText" type="nc:TextType" substitutionGroup="nc:InjuryLocationAbstract">
		case((resolvedName='InjuryLocationText') and (resolvedNamespace=niem21_nc_URI)){
//			myself.propertyWithNewSubstitutionGroup('InjuryLocationText','InjuryLocationText','InjuryLocationAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('InjuryLocationText','InjuryLocationText','InjuryLocation',niem21_nc_URI);
		};
		
		case((resolvedName='DeviceStoredBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredBinary','DeviceStoredBinary','DeviceStoredInformation',niem21_nc_URI);
		};
		case((resolvedName='currencyCode') and (resolvedNamespace=niem21_nc_URI)){
			var CurrencyCodeType:UML::Enumeration =findOrCreateEnumeration('CurrencyCodeType',niem21_iso_4217_URI);
			var CurrencyCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('CurrencyCodeSimpleType',niem21_iso_4217_URI);
			CurrencyCodeSimpleType.generalize(CurrencyCodeType);
			myself.type:=CurrencyCodeType;
			myself.propertyWithNewSubstitutionGroup('currencyCode','CurrencyCode','Currency',niem21_nc_URI);
		};
		case((resolvedName='ClassOfAdmissionClassificationCode') and (resolvedNamespace=niem21_scr_URI)){
			var ImmigrationClassOfAdmissionCategoryCodeType:UML::Enumeration =findOrCreateEnumeration('ImmigrationClassOfAdmissionCategoryCodeType',niem21_im_URI);
			var ImmigrationClassOfAdmissionCategoryCodeSimpleType:UML::Enumeration=findOrCreateEnumeration('ImmigrationClassOfAdmissionCategoryCodeSimpleType',niem21_im_URI);
			ImmigrationClassOfAdmissionCategoryCodeSimpleType.generalize(ImmigrationClassOfAdmissionCategoryCodeType);
			myself.type:=ImmigrationClassOfAdmissionCategoryCodeType;
		};
		  
		case(((resolvedName='ImmigrationStatus')) and (resolvedNamespace=niem21_im_URI)){
			myself.type:=findOrCreateClass('StatusType',niem21_nc_URI);
		};
		
		//		// j:IncidentLightingText as TextType was j:IncidentLightingCode as LightingCodeType which is obsolete
		case((resolvedName='IncidentLightingCode') and (resolvedNamespace=niem21_j_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
			myself.renameProperty('IncidentLightingText');
		};
		case((resolvedName='ContainerSizeText') and (resolvedNamespace=niem21_it_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
		};
		
		// nc:VehicleMotorCarrierIdentification ? no elements reference CommercialCarrierUSDOTNumberType
		//   <xs:element name="PassagePointSecurityCategoryText" type="nc:TextType" substitutionGroup="j:PassagePointSecurityCategoryAbstract">
		case((resolvedName='PassagePointSecurityCategoryText') and (resolvedNamespace=niem21_j_URI)){
//			myself.propertyWithNewSubstitutionGroup('PassagePointSecurityCategoryText','PassagePointSecurityCategoryText','PassagePointSecurityCategoryAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PassagePointSecurityCategoryText','PassagePointSecurityCategoryText','PassagePointSecurityCategory',niem21_j_URI);
		};
		case((resolvedName='currencyText') and (resolvedNamespace=niem21_nc_URI)){
			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup('currencyText','CurrencyText','Currency',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredAudioBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredAudioBinary','DeviceStoredAudioBinary','DeviceStoredInformation',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredVideoBinary') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredVideoBinary','DeviceStoredVideoBinary','DeviceStoredInformation',niem21_nc_URI);
		};
			case((resolvedName='DeviceStoredDocument') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceStoredDocument','DeviceStoredDocument','DeviceStoredInformation',niem21_nc_URI);
		};
	
		case((resolvedName='DeviceSentEmail') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceSentEmail','DeviceSentEmail','DeviceSentInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceReceivedEmail') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceReceivedEmail','DeviceReceivedEmail','DeviceReceivedInformation',niem21_nc_URI);
		};
		case((resolvedName='DeviceVisitedWebsiteURI') and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup('DeviceVisitedWebsiteURI','DeviceVisitedWebsiteURI','DeviceVisitedInformation',niem21_nc_URI);
		};
 		
/*
          <xsd:element ref="nc:AssociationBeginDate" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:AssociationEndDate" minOccurs="0" maxOccurs="unbounded"/>

          <xs:element ref="nc:AssociationDateRange" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="nc:AssociationDescriptionText" minOccurs="0" maxOccurs="unbounded"/>
			DateRangeType
*/		
		case((resolvedName='AssociationBeginDate') and (resolvedNamespace=niem21_nc_URI)){
			var DateRangeType:UML::Class=findOrCreateClass('DateRangeType',niem21_nc_URI);
			myself.type:=DateRangeType;
			myself.renameProperty('AssociationDateRange');
		};
//		Tuple{n21:String='IntoxicationIntoxicantCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="IntoxicationIntoxicantCategoryText" type="nc:TextType" substitutionGroup="j:IntoxicationIntoxicantCategory">
		
		case((resolvedName='IntoxicationIntoxicantCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('IntoxicationIntoxicantCategoryText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('IntoxicationIntoxicantCategoryText','IntoxicationIntoxicantCategoryText','IntoxicationIntoxicantCategory',niem21_j_URI);
		};
		//		Tuple{n21:String='DrivingRestrictionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DrivingRestrictionText" type="nc:TextType" substitutionGroup="j:DrivingRestrictionValue">
		
		case((resolvedName='DrivingRestrictionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DrivingRestrictionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DrivingRestrictionText','DrivingRestrictionText','DrivingRestrictionValue',niem21_j_URI);
		};
		
		//		Tuple{n21:String='DriverLicenseWithdrawalText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalValue">
		
		case((resolvedName='DriverLicenseWithdrawalText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalText','DriverLicenseWithdrawalText','DriverLicenseWithdrawalValue',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="DriverLicenseWithdrawalIssuingAuthorityText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalIssuingAuthority">
		case((resolvedName='DriverLicenseWithdrawalIssuingAuthorityText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalIssuingAuthorityText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalIssuingAuthorityText','DriverLicenseWithdrawalIssuingAuthorityText','DriverLicenseWithdrawalIssuingAuthority',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalExtentText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="DriverLicenseWithdrawalExtentText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalExtent">
		case((resolvedName='DriverLicenseWithdrawalExtentText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalExtentText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalExtentText','DriverLicenseWithdrawalExtentText','DriverLicenseWithdrawalExtent',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusText',n3namespace:String=niem21_j_URI},		
	//  <xs:element name="DriverLicenseWithdrawalDueProcessStatusText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalDueProcessStatus">
		case((resolvedName='DriverLicenseWithdrawalDueProcessStatusText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalDueProcessStatusText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalDueProcessStatusText','DriverLicenseWithdrawalDueProcessStatusText','DriverLicenseWithdrawalDueProcessStatus',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalBasisText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="DriverLicenseWithdrawalBasisText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalBasis">
		case((resolvedName='DriverLicenseWithdrawalBasisText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalBasisText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalBasisText','DriverLicenseWithdrawalBasisText','DriverLicenseWithdrawalBasis',niem21_j_URI);
		};
//		Tuple{n21:String='DriverLicenseWithdrawalActionText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionText',n3namespace:String=niem21_j_URI},		
		 // <xs:element name="DriverLicenseWithdrawalActionText" type="nc:TextType" substitutionGroup="j:DriverLicenseWithdrawalAction">
		
		case((resolvedName='DriverLicenseWithdrawalActionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('DriverLicenseWithdrawalActionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('DriverLicenseWithdrawalActionText','DriverLicenseWithdrawalActionText','DriverLicenseWithdrawalAction',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveIgnitionText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionText',n3namespace:String=niem21_j_URI},		
//	  <xs:element name="ExplosiveIgnitionText" type="nc:TextType" substitutionGroup="j:ExplosiveIgnition">

		case((resolvedName='ExplosiveIgnitionText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveIgnitionText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveIgnitionText','ExplosiveIgnitionText','ExplosiveIgnition',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveFillerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="ExplosiveFillerText" type="nc:TextType" substitutionGroup="j:ExplosiveFiller">
		
		case((resolvedName='ExplosiveFillerText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveFillerText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveFillerText','ExplosiveFillerText','ExplosiveFiller',niem21_j_URI);
		};
				
//		Tuple{n21:String='ExplosiveContainerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerText',n3namespace:String=niem21_j_URI},		
		//  <xs:element name="ExplosiveContainerText" type="nc:TextType" substitutionGroup="j:ExplosiveContainer">
		
		case((resolvedName='ExplosiveContainerText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveContainerText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveContainerText','ExplosiveContainerText','ExplosiveContainer',niem21_j_URI);
		};
//		Tuple{n21:String='ExplosiveComponentText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentText',n3namespace:String=niem21_j_URI},		
//  <xs:element name="ExplosiveComponentText" type="nc:TextType" substitutionGroup="j:ExplosiveComponent">
		
		case((resolvedName='ExplosiveComponentText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('ExplosiveComponentText',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('ExplosiveComponentText','ExplosiveComponentText','ExplosiveComponent',niem21_j_URI);
		};
		//   <xs:element name="JewelryStoneCategoryText" type="nc:TextType" substitutionGroup="j:JewelryStoneCategoryAbstract">
	
		case((resolvedName='JewelryStoneCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('JewelryStoneCategoryText',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('JewelryStoneCategoryText','JewelryStoneCategoryText','JewelryStoneCategoryAbstract',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('JewelryStoneCategoryText','JewelryStoneCategoryText','JewelryStoneCategory',niem21_j_URI);
			
		};
	//   <xs:element name="JurisdictionText" type="nc:TextType" substitutionGroup="nc:JurisdictionAbstract">
	// RegistrationJurisdictionName
		case(((resolvedName='JurisdictionText')or(resolvedName='RegistrationJurisdictionName')
			
		or(resolvedName='IdentificationJurisdictionText')
		) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'JurisdictionText','JurisdictionAbstract',niem21_nc_URI);
		};
		//		Tuple{n21:String='ImmigrationStatus',n21namespace:String=niem21_scr_URI,n3:String='ScreeningImmigrationStatus'},
		//  <xs:element name="ScreeningImmigrationStatus" type="scr:ImmigrationStatusType" substitutionGroup="im:ImmigrationStatus" nillable="true">
		
		case(((resolvedName='ImmigrationStatus')) and (resolvedNamespace=niem21_scr_URI)){
			myself.type:=findOrCreateClass('ImmigrationStatusType',niem21_scr_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ScreeningImmigrationStatus','ImmigrationStatus',niem21_im_URI);
		};
		
		//		Tuple{n21:String='Detention',n21namespace:String=niem21_scr_URI,n3:String='AlienDetention'},
		case(((resolvedName='Detention')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlienDetention','Supervision',niem21_nc_URI);
		};
		//		Tuple{n21:String='ConveyanceAugmentation',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentation'},
		case(((resolvedName='ConveyanceAugmentation')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'VehicleAugmentation','VehicleAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='Alert',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentation'},
		/*
		case(((resolvedName='Alert')) and (resolvedNamespace=niem21_scr_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlertAugmentation','AlertAugmentationPoint',niem21_em_URI);
		};
		*/
		//		Tuple{n21:String='SecurityLevelText',n21namespace:String=niem21_nc_URI,n3:String='DocumentSensitivityText'},
		case(((resolvedName='SecurityLevelText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentSensitivityText','DocumentSensitivity',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyRecoveredValue',n21namespace:String=niem21_nc_URI,n3:String='ItemRecoveredValue'},
		case(((resolvedName='PropertyRecoveredValue')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemRecoveredValue','ItemStyle',niem21_nc_URI);
		};
		// 		Tuple{n21:String='MeasureText',n21namespace:String=niem21_nc_URI,n3:String='MeasureValueText'},
		case(((resolvedName='MeasureText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MeasureValueText','MeasureValue',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationGeographicElevation',n21namespace:String=niem21_nc_URI,n3:String='LocationElevation'},
		case(((resolvedName='LocationGeographicElevation')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationElevation','LocationHeight',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationDepthMeasure',n21namespace:String=niem21_nc_URI,n3:String='LocationDepth'},
		case(((resolvedName='LocationDepthMeasure')) and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('LocationHeightMeasureType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationDepth','LocationHeight',niem21_nc_URI);
		};
		case(((resolvedName='PersonAgeMeasure')) and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('MeasureType',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailSenderName',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderName'},
		case(((resolvedName='EmailSenderName')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageSenderName','MessageSender',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailSenderEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderEntity'},
		case(((resolvedName='EmailSenderEntity')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageSenderEntity','MessageSender',niem21_nc_URI);
		};
//		Tuple{n21:String='EmailRecipientName',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientName'},
		case(((resolvedName='EmailRecipientName')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageRecipientName','MessageRecipient',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailRecipientEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientEntity'},
		case(((resolvedName='EmailRecipientEntity')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageRecipientEntity','MessageRecipient',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentImage',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentImage'},
		case(((resolvedName='EmailAttachmentImage')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentImage','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentDocument',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentDocument'},
		case(((resolvedName='EmailAttachmentDocument')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentDocument','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmailAttachmentBinary',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentBinary'},
		case(((resolvedName='EmailAttachmentBinary')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'MessageAttachmentBinary','MessageAttachment',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextText',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageText'},
		case(((resolvedName='DocumentCoverageTextText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageText','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextDate',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageDate'},
		case(((resolvedName='DocumentCoverageTextDate')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageDate','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='DocumentCoverageTextAddress',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageAddress'},
		case(((resolvedName='DocumentCoverageTextAddress')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'DocumentCoverageAddress','DocumentCoverage',niem21_nc_URI);
		};
		//		Tuple{n21:String='AddressBuildingText',n21namespace:String=niem21_nc_URI,n3:String='AddressBuildingName'},
		case(((resolvedName='AddressBuildingText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AddressBuildingName','AddressDeliveryPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='VictimAffectedProperty',n21namespace:String=niem21_j_URI,n3:String='VictimAffectedItem'},
		case(((resolvedName='VictimAffectedProperty')) and (resolvedNamespace=niem21_j_URI)){
			myself.type:=findOrCreateClass('ItemType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'VictimAffectedItem','VictimEntity',niem21_j_URI);
		};
		//		Tuple{n21:String='Treatment',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentation'},
		case(((resolvedName='Treatment')) and (resolvedNamespace=niem21_j_URI)){
			// make sure TreatmentType defined
			findOrCreateClass('TreatmentType',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'TreatmentAugmentation','TreatmentAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertySeizureSeizingEnforcementOfficial',n21namespace:String=niem21_j_URI,n3:String='ItemSeizingEnforcementOfficial'},
		case(((resolvedName='PropertySeizureSeizingEnforcementOfficial')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemSeizingEnforcementOfficial','ItemSeizer',niem21_j_URI);
		};
		//		Tuple{n21:String='PropertyDispositionAugmentation',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentation'},
		case(((resolvedName='PropertyDispositionAugmentation')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDispositionAugmentation','ItemDispositionAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PropertyDetailText',n21namespace:String=niem21_j_URI,n3:String='ItemDetailText'},
		case(((resolvedName='PropertyDetailText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ItemDetailText','ItemDetailValue',niem21_j_URI);
		};
		//		Tuple{n21:String='PersonToothAugmentation',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentation'},
		//   <xs:element name="ToothAugmentation" type="j:ToothAugmentationType" substitutionGroup="biom:ToothAugmentationPoint" nillable="true">
		
		case(((resolvedName='PersonToothAugmentation')) and (resolvedNamespace=niem21_j_URI)){
//			need to make sure that ToothType also exists 
			var ToothType:UML::Class=findOrCreateClass('ToothType',niem21_ansi_nist_URI);
			//ToothAugmentation.applyStereotype(NIEMAugmentationStereotype);
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ToothAugmentation','ToothAugmentationPoint',niem21_ansi_nist_URI);
		};
		//		Tuple{n21:String='PersonIssuedPropertyTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitle'},
		case(((resolvedName='PersonIssuedPropertyTitle')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonIssuedItemTitle','PersonIssuedItemTitleAbstract',niem21_j_URI);
		};
		//		Tuple{n21:String='PersonIssuedPropertyRegistrationTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemRegistrationTitle'},
		case(((resolvedName='PersonIssuedPropertyRegistrationTitle')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonIssuedItemRegistrationTitle','PersonIssuedItemTitleAbstract',niem21_j_URI);
		};
		//		Tuple{n21:String='PassagePointMethodText',n21namespace:String=niem21_j_URI,n3:String='PassagePointMethodOfAccessText'},
		case(((resolvedName='PassagePointMethodText')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PassagePointMethodOfAccessText','PassagePointMethod',niem21_j_URI);
		};
		//		Tuple{n21:String='CrashLocationAugmentation',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='CrashLocationAugmentation')) and (resolvedNamespace=niem21_j_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PaymentAugmentation',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentation'},
		case(((resolvedName='PaymentAugmentation')) and (resolvedNamespace=niem21_it_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ObligationAugmentation','ObligationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonLocationDetailsAugmentation',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='PersonLocationDetailsAugmentation')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentation'},
		case(((resolvedName='IdentityAssociation')) and (resolvedNamespace=niem21_intel_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'IdentityAssociationAugmentation','PersonIdentityAssociationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='EmploymentAugmentation',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentation'},
		case(((resolvedName='EmploymentAugmentation')) and (resolvedNamespace=niem21_im_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonEmploymentAssociationAugmentation','PersonEmploymentAssociationAugmentationPoint',niem21_nc_URI);
		};
		
		//  <xs:element name="AlienRole" type="im:AlienRoleType" substitutionGroup="im:PersonCountryRole" nillable="true">
		case((resolvedName='Alien') and (resolvedNamespace=niem21_im_URI) and (resolvedClassName='AlienAlertType')){
			var PersonCountryRoleType:UML::Class=findOrCreateClass('PersonCountryRoleType',niem21_im_URI);
			var PersonCountryRole:UML::Property=findOrCreateElement('PersonCountryRole',niem21_im_URI);
			PersonCountryRole.type:=PersonCountryRoleType;
			var AlienRoleType:UML::Class=findOrCreateClass('AlienRoleType',niem21_im_URI);
			PersonCountryRoleType.generalize(AlienRoleType);
			myself.type:=AlienRoleType;
			myself.propertyWithNewSubstitutionGroup('Alien','AlienRole','PersonCountryRole',niem21_im_URI);
		};
		
		//		Tuple{n21:String='Alien',n21namespace:String=niem21_im_URI,n3:String='AlienRole'},
		case(((resolvedName='Alien')) and (resolvedNamespace=niem21_im_URI)){
			var PersonCountryRoleType:UML::Class=findOrCreateClass('PersonCountryRoleType',niem21_im_URI);
			var PersonCountryRole:UML::Property=findOrCreateElement('PersonCountryRole',niem21_im_URI);
			PersonCountryRole.type:=PersonCountryRoleType;
			var AlienRoleType:UML::Class=findOrCreateClass('AlienRoleType',niem21_im_URI);
			PersonCountryRoleType.generalize(AlienRoleType);
			myself.type:=AlienRoleType;
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlienRole','PersonCountryRole',niem21_im_URI);
		};
		//		Tuple{n21:String='NotificationRecipientContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationRecipientContactEmailID'},
		case(((resolvedName='NotificationRecipientContactEmail')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'NotificationRecipientContactEmailID','NotificationRecipient',niem21_em_URI);
		};
		//		Tuple{n21:String='NotificationOriginatorContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationOriginatorContactEmailID'},
		case(((resolvedName='NotificationOriginatorContactEmail')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'NotificationOriginatorContactEmailID','NotificationOriginator',niem21_em_URI);
		};
		//		Tuple{n21:String='AlertHandlingIdentification',n21namespace:String=niem21_em_URI,n3:String='AlertHandlingID'},
		case(((resolvedName='AlertHandlingIdentification')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlertHandlingID','AlertHandling',niem21_em_URI);
		};
		//		Tuple{n21:String='AlarmMonitoringServiceProviderIdentification',n21namespace:String=niem21_em_URI,n3:String='AlarmMonitoringServiceProviderID'},
		case(((resolvedName='AlarmMonitoringServiceProviderIdentification')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AlarmMonitoringServiceProviderID','AlarmMonitoringServiceProvider',niem21_em_URI);
		};
		//		Tuple{n21:String='AlarmLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentation'},
		case(((resolvedName='AlarmLocationAugmentation')) and (resolvedNamespace=niem21_em_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'LocationAugmentation','LocationAugmentationPoint',niem21_nc_URI);
		};
		//		Tuple{n21:String='PersonActivityInvolvementText',n21namespace:String=niem21_nc_URI,n3:String='ActivityInvolvementText'},
		case(((resolvedName='PersonActivityInvolvementText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'ActivityInvolvementText','ActivityInvolvement',niem21_nc_URI);
		};
		//		Tuple{n21:String='LocationAddressGrid',n21namespace:String=niem21_nc_URI,n3:String='AddressGrid'},
		case(((resolvedName='LocationAddressGrid')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'AddressGrid','LocationAddressAbstract',niem21_nc_URI);
		};
		//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='TelephoneNumberCategoryText'},
		case(((resolvedName='TelephoneCategoryDescriptionText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.propertyWithNewSubstitutionGroup(resolvedName,'TelephoneNumberCategoryText','TelephoneNumberCategory',niem21_nc_URI);
		};
		//		Tuple{n21:String='MeasureUnitText',n21namespace:String=niem21_j_URI,n3:String='GeographicDatumText'}
		case(((resolvedName='MeasureUnitText')) and (resolvedNamespace=niem21_j_URI)){

			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
		
		//		Tuple{n21:String='GeographicDatumCode',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		case(((resolvedName='GeographicDatumCode')) and (resolvedNamespace=niem21_nc_URI)){

			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup(resolvedName,'GeographicDatumText','GeographicDatum',niem21_nc_URI);
		};
//		Tuple{n21:String='PersonHitResultsCode',n21namespace:String=niem21_j_URI,n3:String='PersonHitResultsText',n3namespace:String=niem21_j_URI,sgName:String='PersonHitResults',sgNamespace:String=niem21_j_URI	},
		case(((resolvedName='PersonHitResultsCode')) and (resolvedNamespace=niem21_j_URI)){

			var str:UML::Classifier=getXMLPrimitiveType('string');
			var TextType:UML::Classifier=findOrCreatePrimitiveType('TextType',niem21_nc_URI);
			str.generalize(TextType);
			
			myself.type:=TextType;
			myself.propertyWithNewSubstitutionGroup(resolvedName,'PersonHitResultsText','PersonHitResults',niem21_j_URI);
		};
		
	/*
          <xsd:element ref="nc:PropertyRecoveredValue" minOccurs="0" maxOccurs="unbounded"/> ???
	
          <xs:element ref="j:ItemSeizureMethodText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureOwningPerson" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizurePossessingPerson" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureReleaseConditionText" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureWarrant" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="j:ItemSeizureAugmentationPoint" minOccurs="0" maxOccurs="unbounded"/>
	
		Tuple{n21:String='PropertyCurrentResaleValue',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentResaleValue'},
*/
		
		case(((resolvedName='PropertySeizer')) and (resolvedNamespace=niem21_nc_URI)){
			//myself:=myself.changeNamespace('ItemSeizer',niem21_j_URI);
			myself:=myself.changeNamespace('ItemSeizerEntity',niem21_j_URI);
			myself.propertyWithNewSubstitutionGroup('PropertySeizer','ItemSeizerEntity','ItemSeizer',niem21_j_URI);
			
		};
		
		
		case(((resolvedName='AssessmentRecommendationText')) and (resolvedNamespace=niem21_nc_URI)){
			myself.type:=findOrCreateClass('CommentType',niem21_nc_URI);
			myself:=myself.changeNamespace('AssessmentRecommendation',niem21_j_URI);
	//		myself.type:=findOrCreateClass('AssessmentRecommendationType',niem21_fs_URI);
	
			if(resolvedClassName='AssessmentType')then{
				var AssessmentAugmentationType:UML::Class=findOrCreateClass('AssessmentAugmentationType',niem21_j_URI);
				AssessmentAugmentationType.ownedAttribute+=myself;
			}endif;
		};
		
	//   <xsd:element substitutionGroup="nc:LocationCounty" name="LocationCountyCode" type="fips_6-4:USCountyCodeType" nillable="true">
	//   <xs:element name="LocationCountyCode" type="census:USCountyCodeType" substitutionGroup="nc:LocationCounty">
		case((resolvedName='LocationCountyCode') and (resolvedNamespace=niem21_nc_URI)){
			var USCountyCodeType:UML::Enumeration=findOrCreateEnumeration('USCountyCodeType',niem21_census_URI);
			var USCountyCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('USCountyCodeSimpleType',niem21_census_URI);
			USCountyCodeSimpleType.generalize(USCountyCodeType);
			myself.type:=USCountyCodeType;
		};
		case((resolvedName='TelephoneNumberCategoryCode') and (resolvedNamespace=niem21_nc_URI)){
			var TelephoneCategoryCodeType:UML::Enumeration=findOrCreateEnumeration('TelephoneCategoryCodeType',niem21_xcard_URI);
			var TelephoneCategoryCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('TelephoneCategoryCodeSimpleType',niem21_xcard_URI);
			TelephoneCategoryCodeSimpleType.generalize(TelephoneCategoryCodeType);
			myself.type:=TelephoneCategoryCodeType;
		};
	
		//   <xsd:element name="PersonUnionStatusCode" type="nonauth:MarriageStatusCodeType" nillable="true">
		
		//           <xs:element ref="nc:PersonUnionStatusAbstract" minOccurs="0" maxOccurs="unbounded"/>
		// jxdm   <xs:element name="MaritalStatusCode" type="ndex:MaritalStatusCodeType" substitutionGroup="nc:PersonUnionStatusAbstract">
		/*
		case((resolvedName='PersonUnionStatusCode') and (resolvedNamespace=niem21_nc_URI)){
			myself:=myself.changeNamespace('MaritalStatusCode',niem21_j_URI);
//			myself.propertyWithNewSubstitutionGroup('PersonUnionStatusCode','MaritalStatusCode','PersonUnionStatusAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('PersonUnionStatusCode','MaritalStatusCode','PersonUnionStatus',niem21_nc_URI);
		};
		*/
		
		//   <xs:element name="LengthUnitCode" type="unece:LengthCodeType" substitutionGroup="nc:LengthUnitAbstract">
		//   <xs:element name="LengthUnitAbstract" substitutionGroup="nc:MeasureUnit" abstract="true">
		
		case((resolvedName='LengthUnitCode') and (resolvedNamespace=niem21_nc_URI)){
			//if(myself.isPropertyHolderElement())then{
//				var LengthUnitAbstract:UML::Property=findOrCreateElement('LengthUnitAbstract',niem20_nc_URI);
				var LengthUnitAbstract:UML::Property=findOrCreateElement('LengthUnit',niem21_nc_URI);
				LengthUnitAbstract.isDerivedUnion:=true;
				LengthUnitAbstract.isDerived:=true;
				LengthUnitAbstract.isReadOnly:=true;
				//var MeasureUnit:UML::Property=findOrCreateElement('MeasureUnit',niem20_nc_URI);
				//MeasureUnit.isDerivedUnion:=true;
				// and that needs to be connected to MeasureValue
				LengthUnitAbstract.setSubstitutionGroup('MeasureUnit',niem21_nc_URI);
				//LengthUnitAbstract.subsettedProperty:=MeasureUnit;
				//MeasureUnit.namespace.oclAsType(UML::Class).ownedAttribute+=LengthUnitAbstract;
			//}else{
			//}endif;
//			myself.propertyWithNewSubstitutionGroup('LengthUnitCode','LengthUnitCode','LengthUnitAbstract',niem21_nc_URI);
			myself.propertyWithNewSubstitutionGroup('LengthUnitCode','LengthUnitCode','LengthUnit',niem21_nc_URI);
		};
		//		Tuple{n21:String='MeasureRangeValue',n21namespace:String=niem21_nc_URI,n3:String='MeasureDecimalRange'},
		case(((resolvedName='MeasureRangeValue')) and (resolvedNamespace=niem21_nc_URI)){
				var MeasureRange:UML::Property=findOrCreateElement('MeasureRange',niem21_nc_URI);
				MeasureRange.isDerivedUnion:=true;
				MeasureRange.isDerived:=true;
				MeasureRange.isReadOnly:=true;
				MeasureRange.setSubstitutionGroup('MeasureValue',niem21_nc_URI);
			myself:=myself.propertyWithNewSubstitutionGroup(resolvedName,'MeasureDecimalRange','MeasureRange',niem21_nc_URI);
		};
		case((
			(resolvedName='VehicleAxleQuantity')
			or (resolvedName='VehicleCurrentWeightMeasure')
			or (resolvedName='VehicleGrossLadenSumWeightMeasure')
			or (resolvedName='VehicleGrossLadenUnitWeightMeasure')
			or (resolvedName='VehicleMaximumLoadWeightMeasure')
			or (resolvedName='VehicleUnladenWeightMeasure')
				
			) and (resolvedNamespace=niem21_nc_URI)
			and (resolvedClassName<>'VehicleType')	
			){
			if(myself.isPropertyHolderElement())then{
				// no change
			}else{
				// for non-top-level, this property must move up to VehicleType
				var VehicleType:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=VehicleType.ownedAttribute
					->select(p|p.name=resolvedName)->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					VehicleType.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		//		Tuple{n21:String='VesselRegistrationIdentification',n21namespace:String=niem21_nc_URI,n3:String='ItemStateIdentification'},
		// this is replaced by a property in Item, 2 levels above Vessel
		case((resolvedName='VesselRegistrationIdentification') and (resolvedNamespace=niem21_nc_URI)){
			if(myself.isPropertyHolderElement())then{
				// this can be a rename
				myself.renameProperty('ItemStateIdentification');
			}else{
				// for non-top-level, this property must move up to item and change name
				var item:UML::Class=myself.classifier.general.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemStateIdentification')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					myself:=myself.renameProperty('ItemStateIdentification');
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		
		// this is replaced by a property in Item, 2 levels above VehicleType
		case((resolvedName='ItemOwnershipCategoryText') and (resolvedNamespace=niem21_nc_URI)){
			if(myself.isPropertyHolderElement())then{
				// ok
			}else{
				// for non-top-level, this property must move up to item
				var item:UML::Class=myself.classifier.general.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='ItemOwnershipCategoryText')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};	
		// nc:VehicleCurrentWeightMeasure move up one level
	/*
		case((resolvedName='VehicleCurrentWeightMeasure') and (resolvedNamespace=niem20_nc_URI)and not(resolvedClassName='VehicleType')){
			if(myself.isPropertyHolderElement())then{
				// ok
			}else{
				// for non-top-level, this property must move up to vehicleType
				var item:UML::Class=myself.classifier.general.oclAsType(UML::Class)->asSequence()->first();
				var existingProperty:UML::Property=item.ownedAttribute
					->select(p|p.name='VehicleCurrentWeightMeasure')->asSequence()->first();
				if(existingProperty.oclIsUndefined())then{
					item.ownedAttribute+=myself;
				}else{
					// need to transfer refs to existing, remove myself
					myself.clientDependency->select(d|d.isReferences())->forEach(d){d.client:=existingProperty;};
					myself.removeElement();
				}endif;
			}endif;
		};
		*/	
		/*
		          <xsd:element ref="nc:ContactInformationIsPrimaryIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsEmergencyIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsDayIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsEveningIndicator" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="nc:ContactInformationIsNightIndicator" minOccurs="0" maxOccurs="unbounded"/>
  <xs:element name="ContactInformationAvailabilityCode" type="core_misc:ContactInformationAvailabilityCodeType" substitutionGroup="nc:ContactInformationAvailability">
          
 */
 /*
		case(((resolvedName='ContactInformationIsPrimaryIndicator') 
			or (resolvedName='ContactInformationIsEmergencyIndicator')
			or (resolvedName='ContactInformationIsDayIndicator')
				or (resolvedName='ContactInformationIsEveningIndicator')
				or (resolvedName='ContactInformationIsNightIndicator')
			)and (resolvedNamespace=niem21_nc_URI)){
			var ContactInformationAvailabilityCodeType:UML::Enumeration:=findOrCreateEnumeration('ContactInformationAvailabilityCodeType',niem21_ut_offender_URI);
			var ContactInformationAvailabilityCodeSimpleType:UML::Enumeration:=findOrCreateEnumeration('ContactInformationAvailabilityCodeSimpleType',niem21_ut_offender_URI);
			ContactInformationAvailabilityCodeSimpleType.generalize(ContactInformationAvailabilityCodeType);
			myself.type:=ContactInformationAvailabilityCodeType;
				
			var ContactInformationAvailabilityCode:UML::Property=myself.propertyWithNewSubstitutionGroup(resolvedName,'ContactInformationAvailabilityCode','ContactInformationAvailability',niem21_nc_URI);
		};
		*/
				// TODO: AddressType to AddressType, but fold in StructuredAddressType
		// TODO: currencyCode attribute to CurrencyCode element -- includes subsetting
		// TODO: currencyText attribute to CurrencyText element
		// TODO: AreaPolygonDescriptionText, fold into AreaDescriptionText
		// TODO: AreaCircularDescriptionText, fold into AreaDescriptionText
		// TODO: AreaGeographicCode to AreaGeographicAbstract, -- but we need concrete
		// TODO: AssessmentRecommendationText fold into AssessmentScoreText
		// TODO: AssociationBeginDate/AssociationEndDate become AssociationDateRange
		
	};
	return;
}
query UML::NamedElement::supplierReferences():Set(UML::NamedElement)=
	self.supplierReferenceRealizations().client->asSet();
query UML::NamedElement::supplierReferenceRealizations():Set(UML::Realization)=
	self.supplierDependency->select(d|d.isReferences()).oclAsType(UML::Realization)->asSet();
query UML::Dependency::isReferences():Boolean=
	self.IsStereotypeApplied(NIEMReferencesStereotype);
helper UML::Classifier::renameClassifier(newName:String):UML::Classifier{
	var myself:UML::Classifier=self;
	var myInformationModel:UML::Package=self.getNearestPackage();
			// if newName already exists in same classifier, switch dependencies to existing property and remove this property
			var existingClassifier:UML::Classifier=myInformationModel.ownedType
				->select(c|c.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier)
				->select(p|((p.name=newName)or(p.name=myself.name))and(p<>self))->asSequence()->first();
			if(existingClassifier.oclIsUndefined())	then{
					myself.name:=newName;
					existingClassifier:=myself;
				}else{
					self._directedRelationshipOfTarget->forEach(dep){
						dep.target:=existingClassifier;						
					};
					// might be typedElement of type? typedElementOfType
					myself._typedElementOfType->forEach(typedElement){typedElement.type:=existingClassifier;};	
					self.removeElement();
				log('INFO: removed Duplicate Classifier ');
				}endif;
	return existingClassifier;
}

helper UML::Property::renameProperty(newName:String):UML::Property{
	var myself:UML::Property=self;
	var myNamespace:UML::String=self.getNearestPackage().getTargetNamespace();
			// if newName already exists in same classifier, switch dependencies to existing property and remove this property
			var existingProperty:UML::Property=self.owner
				->select(c|c.oclIsKindOf(UML::Classifier)).oclAsType(UML::Classifier).attribute
				->select(p|((p.name=newName)or(p.name=myself.name))and(p<>self))->asSequence()->first();
			if(existingProperty.oclIsUndefined() and myself.isPropertyHolderElement())	then{
				existingProperty:=findPropertyHolderProperty(myself.name,newName,myNamespace);
				if(existingProperty=myself)then{existingProperty:=null;}endif;
			}endif;	
			if(existingProperty.oclIsUndefined())	then{
					myself.name:=newName;
					existingProperty:=myself;
				}else{
					/* client side should not be necessary
					self.clientDependency->forEach(dep){
						dep.client:=existingProperty;						
					};
					*/
					self._directedRelationshipOfTarget->forEach(dep){
						dep.target:=existingProperty;						
					};
					// might be substitution groups, etc?
					if(existingProperty.subsettedProperty->isEmpty() and myself.subsettedProperty->notEmpty())then{
						existingProperty.subsettedProperty+=myself.subsettedProperty;
					}endif;
					self.removeElement();
				log('INFO: removed Duplicate Property ');
				}endif;
	return existingProperty;
}
	
helper UML::Property::organizationEntity(elementName:String):UML::Property{
	return self.contactEntity(elementName,'EntityOrganization');
}
helper UML::Property::personEntity(elementName:String):UML::Property{
	return self.contactEntity(elementName,'EntityPerson');
}
	
helper UML::Property::contactEntity(elementName:String,entityTypeName:String):UML::Property{
	//  fixup depending upon propertyholder or not
	var myself:UML::Property=self;
	// if there is already a property of that name, then use it and remove self
	var existingProperty:UML::Property=
		myself.classifier.oclAsType(UML::Class).ownedAttribute->select(p|p.name=elementName)->asSequence()->first();
	if(not(existingProperty.oclIsUndefined()))	then{
		myself.removeElement();
		myself:=existingProperty;
	}endif;
					myself:=myself.renameProperty(elementName);
			var ContactEntity:UML::Property=findOrCreateElement(elementName,niem21_nc_URI);
				ContactEntity.setLower(0);
				ContactEntity.setUpper(-1);
				ContactEntity.aggregation:=UML::AggregationKind::shared;
			var EntityType:UML::Class=findOrCreateClass('EntityType',niem21_nc_URI);
			ContactEntity.type:=EntityType;
			//   <xs:element name="EntityOrganization" type="nc:OrganizationType" substitutionGroup="nc:EntityRepresentation">
			
			var EntityRepresentation:UML::Property=EntityType.ownedAttribute
				->select(p|p.name='EntityRepresentation')->asSequence()->first();
			if(EntityRepresentation.oclIsUndefined())then{
				EntityRepresentation:=new UML::Property();
				EntityType.ownedAttribute+=EntityRepresentation;
				EntityRepresentation.name:='EntityRepresentation';
				EntityRepresentation.setLower(0);
				EntityRepresentation.setUpper(-1);
				EntityRepresentation.isDerivedUnion:=true;
				EntityRepresentation.isDerived:=true;
				EntityRepresentation.isReadOnly:=true;
				EntityRepresentation.aggregation:=UML::AggregationKind::shared;
			}endif;
			var TopEntityRepresentation:UML::Property=findOrCreateElement('EntityRepresentation',niem21_nc_URI);
			TopEntityRepresentation.name:=EntityRepresentation.name;
			TopEntityRepresentation.isDerivedUnion:=EntityRepresentation.isDerivedUnion;
			TopEntityRepresentation.isDerived:=EntityRepresentation.isDerived;
			TopEntityRepresentation.isReadOnly:=EntityRepresentation.isReadOnly;
			TopEntityRepresentation.aggregation:=EntityRepresentation.aggregation;
				TopEntityRepresentation.setLower(EntityRepresentation.lower);
				TopEntityRepresentation.setUpper(EntityRepresentation.upper);
			var EntityOrganization:UML::Property=findOrCreateElement(entityTypeName,niem21_nc_URI);
				EntityOrganization.setLower(0);
				EntityOrganization.setUpper(-1);
				EntityOrganization.aggregation:=UML::AggregationKind::shared;
				EntityOrganization.subsettedProperty:=TopEntityRepresentation;
				TopEntityRepresentation.classifier.oclAsType(UML::Class).ownedAttribute+=EntityOrganization;
			EntityOrganization.type:=myself.type;
			myself.type:=EntityType;
	return ContactEntity;
}
	
helper UML::Property::setSubstitutionGroup(substitutionGroup:String,namespaceIn:String):UML::Property{
	// find or create the substitutionGroup; if untyped, set cardinality/isDerivedUnion; 
	// set the substitutionGroup as subsetted Property of self; move self to same Class as substitutionGroup
			var myself:UML::Property=self;
			var myClass:UML::Class=self.owner.oclAsType(UML::Class);
			var myPackage:UML::Package=self.getNearestPackage();
			var myNamespace:String=myPackage.getTargetNamespace();
				var locationGeospatialCoordinateAbstract:UML::Property=findOrCreateElement(substitutionGroup,namespaceIn);
				if(locationGeospatialCoordinateAbstract.type.oclIsUndefined())then{
					locationGeospatialCoordinateAbstract.isDerivedUnion:=true;
					locationGeospatialCoordinateAbstract.isDerived:=true;
					locationGeospatialCoordinateAbstract.isReadOnly:=true;
					locationGeospatialCoordinateAbstract.setLower(0);
					locationGeospatialCoordinateAbstract.setUpper(-1);
				}endif;
				myself.subsettedProperty:=locationGeospatialCoordinateAbstract;
				var headHolder:UML::Class=locationGeospatialCoordinateAbstract.owner.oclAsType(UML::Class);
				// make generalization if necessary
				
				if(myNamespace=namespaceIn)then{
					headHolder.ownedAttribute+=myself;
				}else{
					// make generalization
					if(not(myClass.general->includes(headHolder))and (myClass<>headHolder))then{
						var general:UML::Generalization=new UML::Generalization();
						general.specific:=myClass;
						general.general:=headHolder;
						log('substitution across namespaces '+myNamespace+", "+namespaceIn+', '+(myNamespace=namespaceIn).toString()+', '+self.qualifiedName);
						//substitution across namespaces http://niem.gov/niem/niem-core/2.0, http://niem.gov/niem/niem-core/2.0,
					}endif;
				}endif;
				
	return locationGeospatialCoordinateAbstract;	
}
helper UML::Classifier::generalize(specific:UML::Classifier){
			if(not(specific.general->includes(self)))then{
				var g:UML::Generalization=new UML::Generalization();
				g.specific:=specific;
				g.general:=self;
			}endif;
	
}	
helper UML::Property::propertyWithNewSubstitutionGroup(n21Name:String,n3Name:String,substitutionGroup:String,namespace:String):UML::Property{
			//log('INFO: renaming  Property '+self.qualifiedName);
			// must have substitionGroup=nc:LocationGeospatialCoordinateAbstract
			var myself:UML::Property=self.renameProperty(n3Name);
			//myself.name:=n3Name;
			if(myself.isPropertyHolderElement())then{
				myself.setSubstitutionGroup(substitutionGroup,namespace);
			}else{
				// if no propertyHolder, then we need to create one
					var resolvedNamespace:String=myself.getResolvedNamespace();
				
				var propertyHolderProperty:UML::Property=findPropertyHolderProperty(n21Name,n3Name,resolvedNamespace);
				if(propertyHolderProperty.oclIsUndefined())then{
					propertyHolderProperty:=myself.cloneAsPropertyHolder(resolvedNamespace);
				}endif;
				propertyHolderProperty.setSubstitutionGroup(substitutionGroup,namespace);
			}endif;
	return myself;	
}
helper UML::Property::cloneAsPropertyHolder(namespace:String):UML::Property{
	namespace.findOrCreateNamespace()->forEach(pkg){
		var newProperty:UML::Property=new UML::Property();
		var propertyHolder:UML::Class=pkg.getPropertyHolder();
		propertyHolder.ownedAttribute+=newProperty;
		newProperty.name:=self.name;
		newProperty.type:=self.type;
		newProperty.aggregation:=self.aggregation;
		newProperty.setUpper(self.upper);
		newProperty.setLower(self.lower);
	return newProperty;		
	};
	return null;
}
	
helper findPropertyHolderProperty(n21Name:String,n30Name:String,namespace:String):UML::Property{
	var topLevelElements:Set(UML::Property)=namespace.findOrCreateNamespace().ownedType
			->select(t|t.IsStereotypeApplied(NIEMPropertyHolderStereotype)).oclAsType(UML::Class).ownedAttribute
			->asSet();
	topLevelElements->select(a|(a.name=n30Name))->forEach(p){return p;};
	topLevelElements->select(a|(a.name=n21Name))->forEach(p){return p;};
	if(n30Name='JurisdictionAbstract')then{
		topLevelElements
				->select(a|a.name='RegistrationJurisdiction')
				->forEach(p){
					return p;
				};
	}endif;		
	return null;		
}
query UML::Property::isPsmXsdElement():Boolean{
	if(self.IsStereotypeApplied(NIEMPropertyStereotype))then{
		return (self.GetStereotypeApplication(NIEMPropertyStereotype).oclAsType(Stdlib::Element).getNIEMPropertyKind()='element');
	}endif;
	return (self.name.firstToUpper()=self.name)
		or self.type.oclIsUndefined()
		or not(self.type.oclAsType(UML::Classifier).isXmlPrimitive());
}
query UML::Classifier::isXmlPrimitive():Boolean=
		(self.owner.oclAsType(UML::NamedElement).name=XMLPrimitiveTypesPackageName) // tjd
		or (self.owner.oclAsType(UML::NamedElement).name=UMLPrimitiveTypesPackageName)// tjd
		;

// unresolved
//property niem30_gmx_URI:String='http://www.isotc211.org/2005/gmx'; // unknown uri

//property niem30_lasd_URI:String=baseNiemNamespace+'lasd/2.0'; // no match 
//property niem30_twpdes_URI:String=baseNiemNamespace+'twpdes/2.0'; // no match 


property niem30_ansi_nist_URI:String=baseNiemNamespace+'domains/biometrics/3.0/'; 
property niem30_ansi_d20_URI:String=baseNiemNamespace+'codes/ansi_d20/3.0/'; 
property niem30_apco_URI:String=baseNiemNamespace+'codes/apco_event/3.0/';
property niem30_atf_URI:String=baseNiemNamespace+'codes/atf/3.0/'; 
property niem30_can_URI:String=baseNiemNamespace+'codes/canada_post/3.0/'; 
property niem30_cap_URI:String='urn:oasis:names:tc:emergency:cap:1.1'; // same
property niem30_cbrn_URI:String=baseNiemNamespace+'domains/cbrn/3.0/'; 
property niem30_cbrncl_URI:String=baseNiemNamespace+'codes/cbrncl/3.0/'; 
//property niem30_census_URI:String=baseNiemNamespace+'codes/census_commodity/3.0/'; 
property niem30_census_URI:String=baseNiemNamespace+'codes/census_uscounty/3.0/'; 
property niem30_de_URI:String='urn:oasis:names:tc:emergency:EDXL:DE:1.0';// same 
property niem30_dea_URI:String=baseNiemNamespace+'codes/dea_ctlsub/3.0/'; 
property niem30_dod_jcs_pub2_0_URI:String=baseNiemNamespace+'codes/dod_jcs-pub2.0/3.0/'; 
property niem30_edxl_URI:String=baseNiemNamespace+'codes/edxl_rm/3.0/'; 
property niem30_edxl_cap_URI:String=baseNiemNamespace+'adapters/edxl-cap/3.0/';  
property niem30_edxl_de_URI:String=baseNiemNamespace+'adapters/edxl-de/3.0/';  
property niem30_edxl_have_URI:String=baseNiemNamespace+'adapters/edxl-have/3.0/'; 
property niem30_em_URI:String=baseNiemNamespace+'domains/emergencyManagement/3.0/';  
property niem30_fbi_URI:String=baseNiemNamespace+'codes/fbi_ncic/3.0/';  
property niem30_fips_10_4_URI:String=baseNiemNamespace+'codes/fips_10-4/3.0/';  
property niem30_fips_5_2_URI:String=baseNiemNamespace+'codes/fips_5-2/3.0/'; 
property niem30_fips_6_4_URI:String=baseNiemNamespace+'codes/fips_6-4/3.0/'; 
property niem30_fs_URI:String=baseNiemNamespace+'domains/cyfs/3.0/'; 
property niem30_gco_URI:String='http://www.isotc211.org/2005/gco';// same  
property niem30_geo_URI:String=baseNiemNamespace+'adapters/geospatial/3.0/';  
property niem30_gmd_URI:String='http://www.isotc211.org/2005/gmd';// same  
property niem30_gml_URI:String='http://www.opengis.net/gml/3.2'; // same 
property niem30_gsr_URI:String='http://www.isotc211.org/2005/gsr'; // same
property niem30_gss_URI:String='http://www.isotc211.org/2005/gss'; // same
property niem30_gts_URI:String='http://www.isotc211.org/2005/gts'; // same
property niem30_have_URI:String='urn:oasis:names:tc:emergency:EDXL:HAVE:1.0'; // same 
property niem30_have_codes_URI:String=baseNiemNamespace+'codes/edxl_have/3.0/'; 
property niem30_hazmat_URI:String=baseNiemNamespace+'codes/dot_hazmat/3.0/'; // 
property niem30_im_URI:String=baseNiemNamespace+'domains/immigration/3.0/'; // 
property niem30_intel_URI:String=baseNiemNamespace+'domains/intelligence/3.0/'; // 
property niem30_ip_URI:String=baseNiemNamespace+'domains/infrastructureProtection/3.0/'; // 
property niem30_iso_3166_URI:String=baseNiemNamespace+'codes/iso_3166-1/3.0/'; 
property niem30_iso_4217_URI:String=baseNiemNamespace+'codes/iso_4217/3.0/'; 
property niem30_iso_639_3_URI:String=baseNiemNamespace+'codes/iso_639-3/3.0/'; // 
property niem30_it_URI:String=baseNiemNamespace+'domains/internationalTrade/3.0/'; // 
property niem30_itis_URI:String=baseNiemNamespace+'codes/it_codes/3.0/'; // 
property niem30_j_URI:String=baseNiemNamespace+'domains/jxdm/5.0/'; // 
property niem30_m_URI:String=baseNiemNamespace+'domains/maritime/3.0/'; //  
property niem30_mmucc_2_URI:String=baseNiemNamespace+'codes/mmucc/3.0/'; // 
//property niem30_mn_off_URI:String=baseNiemNamespace+'codes/fbi_ucr/3.0/'; //  partial match
property niem30_nc_URI:String=baseNiemNamespace+'niem-core/3.0/'; // 
property niem30_nga_URI:String=baseNiemNamespace+'codes/nga_genc/3.0/'; // 
property niem30_nlets_URI:String=baseNiemNamespace+'codes/nlets/3.0/'; // 
property niem30_nonauth_URI:String=baseNiemNamespace+'codes/core_misc/3.0/'; // partial match; but overlaps ut_offender: explicit change each component and disable old package
property niem30_sar_URI:String=baseNiemNamespace+'codes/pmise_sar/3.0/'; // 
property niem30_scr_URI:String=baseNiemNamespace+'domains/screening/3.0/'; // 
property niem30_ucr_URI:String=baseNiemNamespace+'codes/fbi_ucr/3.0/'; // 
property niem30_unece_URI:String=baseNiemNamespace+'codes/unece_rec20/3.0/'; // 
property niem30_usps_URI:String=baseNiemNamespace+'codes/usps_states/3.0/'; // 
property niem30_ut_offender_URI:String=baseNiemNamespace+'codes/core_misc/3.0/'; //  
property niem30_xls_URI:String='http://release.niem.gov/niem/external/ogc/xls/1.1.0/dhs-gmo/2.1.0'; // 


// not in niem 2.1
//http\://release.niem.gov/niem/codes/census_uscounty/3.0/=codes-census_uscounty // new

property niem21_ndex_URI:String='http://release.niem.gov/niem/codes/fbi_ndex/3.0/'; // pseudo, does not exist 
property niem30_ndex_URI:String='http://release.niem.gov/niem/codes/fbi_ndex/3.0/'; // new
property niem21_hl7_URI:String='http://release.niem.gov/niem/codes/hl7/3.0/'; // pseudo, does not exist 
property niem30_hl7_URI:String='http://release.niem.gov/niem/codes/hl7/3.0/'; // new

property niem21_occs_URI:String='http://release.niem.gov/niem/codes/occs_facility/3.0/'; // pseudo, does not exist 
property niem30_occs_URI:String='http://release.niem.gov/niem/codes/occs_facility/3.0/'; // new
property niem21_dol_soc_URI:String='http://release.niem.gov/niem/codes/dol_soc/3.0/'; // pseudo, does not exist 
property niem30_dol_soc_URI:String='http://release.niem.gov/niem/codes/dol_soc/3.0/'; // new

property niem21_xcard_URI:String='http://release.niem.gov/niem/codes/xCard/3.0/'; // pseudo, does not exist
property niem30_xcard_URI:String='http://release.niem.gov/niem/codes/xCard/3.0/'; // new
//http\://release.niem.gov/niem/codes/dol_soc/3.0/=codes-dol_soc // new
//http\://release.niem.gov/niem/codes/iata/3.0/=codes-iata // new
//http\://release.niem.gov/niem/codes/nga_vdatum/3.0/=codes-nga_vdatum // new
//http\://release.niem.gov/niem/codes/occs_facility/3.0/=codes-occs_facility // new
//http\://release.niem.gov/niem/codes/xCard/3.0/=codes-xCard // new


/*

*/

property enumeration21to3Remove:Sequence(Tuple(n21:String,n21namespace:String,literals:Sequence(String))) = Sequence{
	 
//		Tuple{n21:String='VMACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{'HEL'}},
// 		Tuple{n21:String='VMOCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{'HEL'}},


		Tuple{n21:String='VMOCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
'ACUR-EL',
'AV',
'BLM',
'CE',
'CYL',
'DB6',
'DUN',
'FE',
'GOF',
'GRT',
'HEL',
'HOT',
'PHT',
'REP',
'SKT',
'SKW',
'TL',
'TOY',
'TRW',
'ULT',
'WHE'


		}},

		Tuple{n21:String='VMACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AAWL',
   'ARPT',
   'ASM',
   'ASMT',
   'BAUG','BAY','BAYC','BBCB','BBCH','BBEE','BBTM','BBW','BCMW','BDFL','BEAC','BEAD','BEAE','BEAI','BEAL','BEAM','BEAN','BEAR','BEAT','BEAV','BEBE','BEBO','BEC','BECK','BEDE','BEDF','BEDX','BEEA','BEEC','BEEE','BEEG','BEEH','BEEI','BEEM','BEET','BEIL','BEJE','BELA','BELE','BELF','BELH','BELL','BELN','BELP','BELR','BELS','BELT','BELU','BELV','BENE','BENL','BENS','BENT','BEPO','BERE','BERG','BERH','BERK','BERM','BERO','BERR','BERT','BERV','BESA','BETA','BETE','BETH','BETT','BEVR','BFOS','BGCH','BGDG','BGHM','BHNK','BIAN','BIBB','BIBK','BIEW','BIGB','BIGF','BIGH','BIGI','BIGJ','BIGT','BIGV','BILE','BILK','BILL','BILR','BILT','BIMO','BIMT','BINK','BINS','BIOT','BIRD','BIRE','BIRM','BITT','BIVO','BIZZ','BJAA','BJCT','BJEN','BJMC','BJMS','BKDN','BKHM','BLAB','BLAC','BLAE','BLAH','BLAI','BLAK','BLAO','BLAR','BLAS','BLAW','BLAZ','BLDC','BLGA','BLIN','BLIT','BLIX','BLIZ','BLKE','BLLV','BLMT','BLOM','BLOO','BLRG','BLRT','BLST','BLTR','BLUB','BLUE','BLUG','BLUI','BLUJ','BMBM','BMBR','BMC','BMEQ','BMMF','BMMM','BMTR','BMW','BNDR','BNDT','BNHR','BNST','BNTM','BNZA','BOAN','BOAR','BOAS','BOAT','BOB','BOBB','BOBC','BOBK','BOBM','BOCA','BOCE','BOCK','BOCS','BODZ','BOER','BOIS','BOLA','BOLG','BOMA','BOMB','BOMF','BOMG','BONA','BONC','BOND','BONE','BONI','BOON','BORC','BORF','BORG','BOSS','BOTL','BOUL','BOWE','BOWI','BOWM','BOWN','BOWS','BOXR','BOYD','BOYR','BRAC','BRAD','BRAF','BRAL','BRAN','BRAS','BRAT','BRAU','BRAV','BRAW','BRAY','BRCO','BRCT','BRCV','BRDC','BRDK','BRDL','BRDR','BREE','BREI','BREK','BREM','BREN','BRET','BREW','BREZ','BRGS','BRGV','BRIC','BRID','BRIE','BRIG','BRIH','BRIL','BRIO','BRIS','BRIT','BRKW','BRLL','BRMR','BRND','BRNG','BROA','BROB','BROC','BROD','BROE','BROH','BROK','BRON','BROO','BROR','BROS','BROT','BROU','BROW','BROY','BRRN','BRRO','BRSH','BRST','BRTE','BRTI','BRTO','BRTR','BRTT','BRUN','BRUT','BRUZ','BRWD','BRWN','BSA','BSB','BTEC','BTVS','BUCC','BUCI','BUCK','BUCM','BUCN','BUCO','BUCS','BUCY','BUDC','BUDD','BUDG','BUDR','BUDS','BUEL','BUFF','BUG','BUGA','BUHL','BUIC','BUIL','BULK','BULL','BULM','BULR','BULT','BUNT','BUNY','BURC','BURE','BURK','BURL','BURN','BURO','BURR','BUSH','BUSO','BUSP','BUTE','BUTL','BUTT','BVCR','BWAY','BWCT','BWHO','BYER','BYMW','BYOR','BYRM','BYRS','BYSN','BZEL','CAAR','CABA','CABK','CACA','CACR','CACV','CACY','CADE','CADF','CADI','CAFF','CAGI','CAHA','CALC','CALD','CALF','CALH','CALI','CALK','CALL','CALM','CALN','CALO','CALS','CALT','CALU','CALW','CALY','CAMA','CAMB','CAMC','CAMD','CAME','CAMF','CAMI','CAML','CAMM','CAMO','CAMP','CAMR','CAMS','CAMT','CAMU','CAMV','CAMY','CANA','CANC','CAND','CANE','CANG','CANN','CANO','CANS','CANT','CANV','CAP','CAPA','CAPC','CAPE','CAPH','CAPI','CAPL','CAPM','CAPR','CAPT','CARA','CARB','CARC','CARD','CARE','CARF','CARG','CARH','CARI','CARK','CARL','CARM','CARN','CARO','CARP','CARR','CARS','CART','CARW','CARY','CASA','CASC','CASE','CASH','CASL','CASR','CAST','CAT','CATA','CATC','CATI','CATL','CATM','CATO','CAUL','CAVA','CAVC','CAVE','CAVL','CBCM','CBMA','CBRA','CBRO','CBTL','CBUT','CCC','CCCY','CCDI','CCMF','CCMH','CCTI','CEEZ','CEIQ','CENA','CENI','CENR','CENT','CENU','CENY','CERT','CEVA','CEZE','CFBT','CFCH','CFHG','CGMT','CGXP','CHAC','CHAE','CHAG','CHAH','CHAI','CHAL','CHAM','CHAP','CHAR','CHAT','CHAU','CHCI','CHCO','CHEC','CHEE','CHEM','CHEN','CHEO','CHEP','CHER','CHES','CHET','CHEV','CHEX','CHFB','CHIA','CHIB','CHIC','CHIE','CHII','CHIL','CHIM','CHIN','CHIP','CHIS','CHKE','CHKG','CHLG','CHLY','CHMC','CHMI','CHMP','CHMT','CHNO','CHOC','CHPL','CHPM','CHPN','CHPR','CHPT','CHRI','CHRO','CHRS','CHRV','CHRY','CHTH','CHTM','CHUB','CHUC','CHUK','CHVL','CHYI','CICC','CIMA','CIMC','CIMR','CIRC','CIRD','CIRH','CIRK','CIRM','CIRR','CIRV','CISI','CITA','CITI','CITR','CITY','CIWE','CJGC','CLAA','CLAB','CLAC','CLAI','CLAM','CLAN','CLAR','CLAS','CLAT','CLAX','CLAY','CLAZ','CLBR','CLCO','CLEA','CLEG','CLEM','CLEN','CLEV','CLIF','CLIH','CLIN','CLIP','CLIT','CLMB','CLMC','CLMN','CLND','CLON','CLOU','CLOV','CLSS','CLST','CLUA','CLUM','CLVA','CLVR','CLWX','CLYP','CMAC','CMBL','CMCC','CMCI','CMCO','CMCW','CMEO','CMFB','CMIC','CMIL','CMMS','CMOR','CMPF','CMPG','CMPS','CMPT','CMSU','CMWC','CNCG','CNLS','CNMI','CNRD','CNRY','CNST','CNTL','CNTR','CNWD','COAC','COAH','COAI','COAM','COAS','COBM','COBR','COBU','COCF','COCH','COCL','COCO','COCP','CODY','COEQ','COLB','COLE','COLF','COLG','COLL','COLM','COLO','COLP','COLS','COLT','COLU','COMA','COMC','COMD','COME','COMI','COML','COMM','COMN','COMO','COMP','COMR','COMT','COMU','COMV','COMY','CONC','COND','CONE','CONF','CONG','CONH','CONI','CONL','CONM','CONN','CONO','CONP','CONR','CONS','CONT','CONU','CONV','CONW','CONX','CONY','CONZ','COOE','COOK','COON','COOP','COOS','COPA','COPC','COPP','CORB','CORD','CORG','CORN','CORO','CORR','CORS','CORT','CORV','CORY','COSM','COSU','COT','COTC','COTN','COTT','COTZ','COUA','COUB','COUI','COUN','COUR','COVE','COWM','COWY','COXS','COYN','COYO','COZA','CPIU','CPNK','CPPR','CPTC','CPTN','CPTV','CRAF','CRAM','CRAN','CRAW','CRCF','CRCN','CRCO','CREE','CREL','CREO','CREQ','CRET','CREX','CRFI','CRFT','CRGK','CRGO','CRGP','CRGR','CRI','CRIC','CRIM','CRIT','CRKG','CRLY','CRMT','CRNP','CROE','CROF','CROH','CROI','CRON','CROR','CROS','CROT','CROW','CRPT','CRRN','CRRV','CRSN','CRST','CRUI','CRUM','CRVM','CRWE','CRWN','CRYS','CSHM','CSMC','CSMM','CSTL','CSTM','CSTW','CTEC','CTRC','CTRI','CTSI','CTTM','CUAP','CUAS','CUBC','CUBS','CUBT','CUKE','CUKH','CULL','CULN','CULP','CUMB','CUNN','CURB','CURR','CURT','CUSA','CUSB','CUSC','CUSE','CUSF','CUSH','CUSI','CUSL','CUSM','CUSO','CUST','CUTU','CUYL','CVCO','CVLO','CVWE','CWCF','CWJT','CWPC','CWTE','CWTR','CYCK','CYCL','CYSC','CZ','DABR','DACO','DAEW','DAF','DAFF','DAIH','DAIM','DAIN','DAIR','DAKO','DALE','DALI','DALT','DALW','DAMO','DANA','DANB','DANC','DAND','DANT','DANU','DANZ','DARB','DARC','DARF','DARG','DART','DARV','DARW','DATO','DATR','DATS','DAUP','DAVC','DAVD','DAVE','DAVI','DAVN','DAVO','DAVY','DAWE','DAWS','DAYB','DAYO','DAYS','DAYT','DAZN','DB','DBDL','DCCS','DCNT','DCTR','DD','DDFB','DDTI','DEAL','DEAN','DEBO','DECA','DECO','DEEP','DEER','DEGE','DEGL','DEIC','DEKC','DELA','DELH','DELK','DELL','DELM','DELN','DELO','DELP','DELR','DELS','DELT','DELU','DELX','DEMC','DEMM','DEMP','DEMU','DENC','DENE','DENN','DENZ','DERB','DERE','DERH','DESA','DESG','DESI','DESO','DESP','DEST','DETE','DETH','DETI','DETO','DETT','DEUT','DEVI','DEVL','DEVN','DEWE','DEWL','DEXT','DIAB','DIAC','DIAD','DIAG','DIAM','DIAO','DIAR','DIAS','DIAT','DICH','DICK','DICO','DIDI','DIGM','DILL','DILM','DILO','DILY','DINA','DINL','DIPL','DISC','DITC','DITE','DITR','DIVA','DIVC','DIVE','DIVO','DIXE','DIXI','DIXO','DKR','DKW','DLHY','DLPE','DLPH','DM','DMBT','DMFT','DMHC','DMI','DMP','DMVE','DNPR','DODD','DODE','DODG','DOEP','DOLA','DOLI','DOMI','DOMO','DONA','DONG','DONH','DONL','DONM','DONS','DONU','DOO','DOOL','DOON','DORI','DORS','DORT','DOT','DOUB','DOUD','DOUE','DOUG','DOUJ','DOWE','DOWH','DPWC','DRAG','DRAK','DRDN','DREA','DRES','DRGL','DRIE','DRIF','DRIV','DRML','DROP','DROT','DRSN','DRYD','DSPD','DSSC','DSWS','DTCH','DTRL','DTRV','DUAE','DUAL','DUAM','DUCA','DUDE','DUEL','DUES','DUGA','DUGO','DUKE','DUNB','DUNH','DUNL','DUNR','DUPA','DUPL','DUPN','DUPX','DURA','DURB','DURC','DURE','DURI','DURO','DUTC','DUTE','DUTT','DWNS','DWTE','DXIE','DYCY','DYEC','DYMC','DYNA','DYNC','DYNM','DYNS','DYNW','DYST','DYTC','EACR','EADU','EAGB','EAGC','EAGE','EAGI','EAGL','EALO','EARI','EASE','EASM','EAST','EASU','EASW','EASY','EATN','EATO','EATR','EBON','EBUS','ECHE','ECMY','ECNO','ECOB','ECOF','ECOH','ECON','ECSA','ECTA','EDEY','EDSE','EDWA','EDWN','EEE','EEZY','EGIL','EGLE','EGLR','EHMC','EIDA','EIDL','EIGH','EJAY','EKCH','ELCA','ELCO','ELCT','ELCY','ELDC','ELDE','ELDO','ELEC','ELET','ELGI','ELGN','ELIT','ELJA','ELKA','ELKH','ELKR','ELLE','ELLI','ELLS','ELMA','ELVA','ELVC','ELVT','ELWN','EMAX','EMBA','EMBB','EMCO','EMER','EMME','EMML','EMON','EMPC','EMPG','EMPI','EMPL','EMPR','EMW','ENCO','ENCR','ENER','ENGF','ENGI','ENGL','ENGN','ENMC','ENPR','ENRT','ENSE','ENTR','ENVA','ENVI','ENVY','ENZM','EONE','EPCC','EQPR','ERCE','EREK','ERIC','ERIE','ERIG','ERIN','ERIS','ERMC','ERSK','ESCA','ESCC','ESCO','ESCP','ESCT','ESHL','ESIX','ESQU','ESSE','ESSI','ESSK','ESTA','ESTE','ESTM','ETNY','ETON','ETXL','EUCL','EVAN','EVAP','EVAS','EVEN','EVER','EVES','EVIN','EVLT','EVNI','EVRY','EVSI','EVTX','EWAL','EXC','EXCE','EXCI','EXCL','EXCN','EXCR','EXCY','EXEC','EXEZ','EXHE','EXIS','EXPD','EXPL','EXTL','EXTO','EXTR','EZAC','EZCK','EZDU','EZHA','EZLD','EZUT','EZZY','FAAL','FABC','FABO','FACE','FACL','FACT','FAIH','FAIM','FAIR','FALC','FALL','FALM','FALN','FAN','FARG','FARH','FARK','FARM','FARW','FAST','FATC','FAWN','FAYE','FECH','FEDE','FEDL','FELB','FELD','FELL','FELP','FEMC','FERE','FERG','FERR','FERT','FEST','FETE','FEYF','FHL','FHMC','FIAA','FIAC','FIAL','FIAT','FIBE','FIBI','FIEA','FIED','FIEL','FIEM','FIES','FIFE','FIGU','FIKO','FILK','FINN','FIRB','FIRE','FIRS','FIRT','FISC','FIST','FIVE','FIVK','FLAG','FLAH','FLAI','FLAM','FLAN','FLAS','FLBR','FLE','FLEA','FLEE','FLEI','FLEM','FLEN','FLEO','FLEX','FLIN','FLMG','FLMR','FLNG','FLOA','FLOD','FLOE','FLOI','FLOR','FLOT','FLOW','FLYI','FLYL','FMC','FMSH','FN','FNM','FNTM','FOLA','FOML','FOMO','FONA','FONT','FOOT','FOR','FORA','FORC','FORD','FORE','FORF','FORG','FORH','FORI','FORL','FORN','FORR','FORS','FORT','FORU','FOSJ','FOST','FOTX','FOUN','FOUR','FOUS','FOUT','FOUW','FOWN','FOX','FOXI','FRAC','FRAI','FRAK','FRAN','FRAZ','FRBA','FRCS','FREA','FRED','FREE','FREF','FREN','FRES','FRHH','FRHT','FRIE','FRIG','FRIS','FRNA','FRNK','FROL','FRON','FROS','FRRA','FRRS','FRRV','FRTV','FRUE','FRUN','FRYE','FSLD','FSTL','FTRC','FTWD','FUER','FUJI','FULL','FULT','FUNL','FUNT','FUQU','FURA','FUTR','FUTU','FWD','FWTI','FXBB','GAAC','GABB','GABR','GADA','GADB','GAFN','GALA','GALB','GALI','GALT','GANN','GARB','GARD','GARE','GARH','GARL','GARN','GARO','GARP','GARR','GARS','GARY','GASE','GAST','GATE','GATO','GATP','GAZ','GBCO','GCMC','GDAN','GE','GECI','GEEB','GEEC','GEEL','GEEN','GEER','GEHL','GELT','GEM','GEMI','GEMT','GEN','GENA','GENC','GENE','GENF','GENG','GENH','GENI','GENM','GENR','GENT','GENU','GEO','GEOR','GEOT','GERA','GERC','GERL','GERR','GETM','GFHT','GFST','GFTR','GGMA','GHIE','GHMI','GIAA','GIAN','GIAT','GIBL','GIBR','GIDD','GIGI','GILB','GILD','GILE','GILG','GILL','GILM','GILS','GILT','GIND','GINE','GINR','GIRA','GISN','GITA','GIVE','GLAD','GLAS','GLAT','GLBE','GLBL','GLCG','GLDV','GLEA','GLEB','GLEC','GLEH','GLEL','GLEN','GLFI','GLID','GLIT','GLMB','GLND','GLNL','GLOB','GLOM','GLOS','GLOV','GLRD','GLRV','GLSC','GLSS','GLST','GLUT','GLWO','GM','GMC','GMRE','GNMI','GNSH','GNWF','GOAT','GOCO','GOEB','GOEV','GOFF','GOGA','GOGE','GOGO','GOKT','GOLA','GOLD','GOLE','GOLI','GOLK','GOLL','GOLM','GOLN','GONA','GONU','GOOD','GOOS','GOOY','GORB','GORD','GORE','GORM','GORO','GPRX','GRAB','GRAC','GRAD','GRAE','GRAF','GRAH','GRAM','GRAO','GRAP','GRAV','GRDN','GREA','GREB','GREE','GREG','GREI','GREL','GREM','GREN','GRER','GRES','GREV','GRIF','GRIM','GRIZ','GRLK','GRNE','GRNH','GROE','GROV','GRRM','GRSO','GRSP','GRUE','GRUM','GRVE','GRVM','GRYE','GRZL','GSCR','GSEN','GSIN','GSM','GUER','GUES','GUID','GUIZ','GULF','GUST','GUTH','GUZO','GWM','GYEL','GYPS','GZL','HABN','HACK','HADL','HADX','HAFA','HAFL','HAHN','HAIR','HALC','HALE','HALL','HALM','HALN','HALR','HAMB','HAMI','HAML','HAMP','HAMR','HANK','HANN','HANO','HANS','HAPP','HAPY','HARB','HARC','HARD','HARF','HARG','HARH','HARI','HARK','HARL','HARM','HARN','HARR','HART','HARV','HARW','HAUA','HAUI','HAUL','HAUR','HAUT','HAWK','HAWN','HAWT','HAYE','HAYN','HAYS','HBTC','HD','HDHM','HDMC','HDSN','HEAL','HEAR','HEAT','HECD','HECK','HECO','HEDW','HEIL','HEIN','HEIT','HELM','HELR','HELT','HEND','HENE','HENK','HENM','HENN','HENR','HENS','HERB','HERC','HERD','HERI','HERO','HERR','HERT','HERZ','HESC','HESS','HEST','HETG','HEWE','HEWI','HFTD','HFTY','HGON','HGRV','HHTC','HI','HIAA','HIAB','HIAW','HIBD','HIBT','HICH','HICK','HICO','HICS','HIDE','HIGA','HIGC','HIGE','HIGH','HIGK','HIGL','HIGW','HIGY','HIHK','HILB','HILC','HILD','HILF','HILI','HILL','HILM','HILO','HILP','HILS','HILT','HIND','HINE','HINO','HINS','HINT','HIRE','HIST','HITC','HIUT','HIVW','HIWY','HKEG','HKRY','HLDH','HLFM','HLME','HLPK','HLRI','HLWD','HM','HMDE','HME','HMST','HMVE','HNLC','HNMR','HNSO','HOAN','HOBA','HOBB','HOBO','HODA','HODG','HOF','HOIN','HOL','HOLA','HOLD','HOLE','HOLH','HOLI','HOLK','HOLL','HOLM','HOLN','HOLO','HOLP','HOLR','HOLS','HOLT','HOLU','HOLV','HOLW','HOLY','HOLZ','HOMA','HOMD','HOME','HOML','HOMM','HOMS','HOND','HONE','HONG','HONO','HOOP','HOOS','HOP','HOPK','HORC','HORI','HORN','HORS','HORT','HORX','HORZ','HOTC','HOUE','HOUF','HOUG','HOUH','HOWA','HOWC','HOWD','HOWE','HOWL','HOWR','HOWS','HRBN','HRG','HRIG','HRLL','HRRM','HRSE','HRTG','HRTI','HRTK','HRTL','HRTN','HRTO','HRTR','HRVY','HSKE','HSKY','HSMI','HSQV','HSTR','HTCH','HUBE','HUDS','HUFF','HUFY','HUGH','HULL','HUMB','HUME','HUML','HUMM','HUMS','HUNE','HUNG','HUNM','HUNT','HUPM','HURO','HURS','HURU','HUSA','HUSF','HUSK','HUSQ','HUSS','HUST','HUTC','HUTR','HUWA','HWKT','HWMC','HWRO','HYCA','HYDE','HYDY','HYLD','HYLN','HYLT','HYOS','HYSH','HYST','HYTK','HYTR','HYUN','IAME','IBEN','ICL','ICRP','IDEC','IDEL','IDLE','IHHI','IHTM','IJBD','IKA','IKAR','IMCO','IMPA','IMPB','IMPD','IMPE','IMPI','IND','INDA','INDE','INDI','INDM','INDN','INDP','INDU','INFI','INFY','INGE','INGL','INGR','INGS','INGT','INLA','INLI','INMA','INMC','INME','INMN','INNO','INOR','INPX','INRP','INSL','INTC','INTE','INTG','INTI','INTL','INTM','INTP','INTR','INTS','INTT','INVA','INVO','IOMO','IONI','IOWA','IPSC','IRBK','IRD','IRDG','ISEI','ISET','ISLA','ISO','ISU','ITAF','ITAI','ITAL','ITAS','ITAT','ITAV','ITLR','ITNL','ITOM','IVEC','JAC','JACB','JACC','JACK','JACL','JACO','JACS','JACT','JAEG','JAGU','JAHN','JAKL','JALL','JAMA','JAMB','JAMC','JAMI','JAMM','JANT','JARC','JASO','JAWA','JAY','JAYD','JAYK','JAYS','JAYW','JB','JBEN','JCBE','JDER','JDHS','JECR','JEEP','JEHM','JENE','JENN','JENS','JEP','JERA','JERR','JERS','JERW','JETM','JETS','JEWE','JFW','JHNS','JIAL','JIAN','JIEE','JIMA','JIMD','JIMG','JIMS','JIND','JINS','JJ','JJJ','JJNE','JJT','JJTM','JLGI','JLM','JLTL','JMCY','JMGL','JMS','JOBS','JOES','JOEW','JOHN','JOHO','JOHS','JOLI','JOMA','JONS','JOPL','JORG','JOSH','JOSO','JOUR','JOWE','JOYC','JPTR','JPUT','JRDN','JRMC','JROD','JSMH','JSWP','JTIL','JUDE','JUIL','JUNR','JW','JWBC','JWSS','JZRC','KAES','KAIS','KAJU','KAKI','KAL','KALL','KALY','KAM','KAMA','KAMI','KAMP','KANE','KANH','KANN','KANZ','KARA','KARD','KARI','KARO','KARR','KARS','KART','KASE','KASS','KAST','KATL','KATO','KAUF','KAWK','KAYD','KAYF','KAYO','KAYW','KAZU','KBAR','KBHC','KCCF','KDMA','KEAR','KELE','KELL','KELO','KELS','KEMP','KEN','KENA','KENC','KENM','KENN','KENO','KENS','KENT','KENW','KENY','KEPT','KERR','KESL','KEVC','KEYI','KEYO','KEYS','KGHY','KGMF','KIA','KIBB','KIDR','KIEF','KILG','KILL','KIMI','KINA','KINC','KIND','KINE','KINF','KINL','KINS','KINZ','KIOT','KIPC','KISM','KISS','KIT','KITK','KITM','KLAE','KLAS','KLCL','KLEI','KLI','KLIN','KLMK','KMAR','KMCU','KMGI','KMMC','KMNM','KMSR','KNBR','KNC','KNG','KNGH','KNGS','KNIG','KNLH','KNNW','KNOW','KNOX','KNTC','KNTI','KNXM','KODI','KOEH','KOEN','KOFF','KOHL','KOLB','KOMA','KOMC','KOME','KOMF','KOMP','KOMR','KONK','KONT','KOOL','KORY','KOSC','KOST','KOTR','KOUN','KOVA','KOZY','KPRC','KRAE','KRAU','KRDL','KRGO','KRIS','KROM','KROP','KROS','KROW','KRST','KRUZ','KSEA','KTM','KTMX','KUBO','KUHN','KURM','KURT','KUST','KUTK','KUTZ','KVCH','KW','KWDT','KWKT','KWMH','KWNS','KYMC','KYRV','LABE','LACC','LACH','LACR','LACY','LADA','LAFR','LAFY','LAGO','LAGU','LAKE','LAKL','LALL','LAMB','LAMO','LAN','LANA','LANC','LAND','LANE','LANG','LANH','LANL','LANM','LANP','LANR','LANS','LANT','LANU','LAOT','LARA','LARK','LARN','LARO','LARS','LARV','LASA','LASE','LASH','LASL','LAVE','LAWC','LAWN','LAWR','LAYO','LAYT','LAZE','LAZJ','LBAU','LBHR','LBOS','LBOY','LBT','LBTY','LCHG','LCIN','LCRT','LD','LDAZ','LDMS','LDMX','LDTC','LDTL','LEAD','LEAF','LEAR','LECH','LECT','LEDW','LEE','LEEB','LEEC','LEEN','LEER','LEES','LEIR','LEIS','LEIT','LEIU','LEKT','LELA','LELY','LEM','LEMC','LENT','LEON','LERY','LESA','LESC','LESR','LETO','LEVC','LEVI','LEWA','LEWI','LEXS','LEYL','LFET','LFTL','LFZA','LG','LGCH','LGLX','LGND','LHRN','LIBA','LIBE','LIBH','LIBY','LICH','LICO','LIEB','LIFM','LIGC','LIGH','LIGP','LIGT','LILA','LILC','LILL','LILN','LILZ','LINC','LIND','LINF','LINH','LINM','LINP','LINT','LINV','LINW','LIOL','LION','LIPP','LIPR','LIQU','LISL','LITC','LITD','LITK','LITP','LITS','LITT','LKWD','LLOD','LLOY','LLTR','LMC','LMLC','LMMC','LNCE','LNCI','LNCO','LNDN','LNDR','LNEW','LNGH','LNPD','LNRD','LNST','LNWF','LOAD','LOAK','LOCK','LOCO','LODA','LODC','LODE','LODZ','LOFT','LOGI','LOGN','LOLA','LOM','LOMC','LONA','LONB','LONC','LOND','LONE','LONF','LONG','LONH','LONL','LONN','LONR','LONT','LOOD','LOPR','LORA','LORK','LOTU','LOUD','LOVB','LOVE','LOWB','LOWE','LOWP','LRNG','LSKP','LSLN','LSUR','LTCH','LUBB','LUED','LUFK','LUGR','LUKY','LULL','LUND','LUNG','LUVI','LUXO','LUXU','LWLF','LYMA','LYNC','LYNH','LYNN','LYNR','MACA','MACC','MACD','MACG','MACK','MACL','MACO','MACR','MADD','MADM','MADR','MAEN','MAGA','MAGC','MAGI','MAGL','MAGN','MAGO','MAGT','MAHA','MAHI','MAHO','MAI','MAIC','MAIN','MAIR','MAJE','MAJO','MAJR','MAKV','MAL','MALA','MALE','MALH','MALI','MALL','MALN','MALO','MALR','MALS','MALY','MANA','MANC','MANE','MANG','MANI','MANK','MANM','MANN','MANO','MANT','MAPL','MAPO','MAQI','MARA','MARB','MARC','MARF','MARG','MARH','MARI','MARK','MARL','MARM','MARN','MARO','MARP','MARQ','MARR','MARS','MART','MARU','MARV','MARW','MASC','MASE','MASG','MASL','MASN','MASR','MASS','MAST','MASV','MASY','MATA','MATE','MATL','MATR','MAUL','MAUM','MAUR','MAV','MAVE','MAVI','MAVL','MAVN','MAXC','MAXE','MAXI','MAXL','MAXO','MAXP','MAYA','MAYB','MAYC','MAYF','MAYR','MAYS','MAZD','MBCC','MBCO','MBCP','MBEE','MBIE','MBIL','MBM','MBTR','MBWI','MCAF','MCBM','MCCA','MCCB','MCCK','MCCL','MCCM','MCCO','MCCR','MCCU','MCCY','MCFA','MCIN','MCKA','MCKT','MCKY','MCNA','MCNM','MCOL','MCOX','MCOY','MCQU','MCQV','MCRD','MCRR','MCYM','MDAM','MDLR','MDNA','MDS','MDST','MDTR','MEAD','MEAN','MEBT','MECH','MEDA','MEDF','MEDI','MEIT','MELA','MELG','MELM','MELO','MELR','MENS','MERB','MERC','MERH','MERI','MERK','MERM','MERR','MERT','MERW','MERY','MERZ','MESA','MESS','META','METE','METL','METO','METR','METV','METZ','MEYE','MEYR','MFAB','MG','MGM','MGNM','MGNO','MGOS','MGS','MHEB','MHMC','MICA','MICC','MICG','MIDA','MIDC','MIDD','MIDE','MIDI','MIDL','MIDM','MIDQ','MIDS','MIDT','MIDW','MIFU','MIKA','MIKR','MIL','MILA','MILC','MILE','MILL','MILR','MILT','MILW','MILY','MIMO','MIND','MINI','MINN','MIRA','MIST','MIT','MITC','MITS','MITT','MJCK','MJME','MJMT','MKEE','MKMH','MLBL','MLLM','MLLR','MLNG','MLRO','MLTI','MLTK','MLXC','MMCL','MMCO','MMMC','MNAC','MNAR','MNDI','MNLN','MNNI','MNRC','MNRK','MNRO','MNSN','MNTA','MNTE','MNTG','MOAL','MOBB','MOBC','MOBE','MOBF','MOBG','MOBH','MOBI','MOBJ','MOBK','MOBL','MOBN','MOBO','MOBP','MOBR','MOBS','MOBT','MOBU','MOBV','MOBW','MOBX','MOCA','MOCC','MOCR','MOCY','MODE','MODH','MODI','MODL','MODN','MODR','MODU','MOFF','MOGA','MOGU','MOHA','MOHO','MOJA','MOLL','MOLY','MOMO','MONA','MONB','MONC','MOND','MONG','MONH','MONI','MONN','MONO','MONR','MONS','MONT','MONU','MONV','MONW','MOOD','MOOR','MORD','MORE','MORG','MORI','MORM','MORN','MORR','MORS','MORT','MORU','MORW','MOSE','MOSK','MOSW','MOTA','MOTB','MOTE','MOTM','MOTN','MOTO','MOTR','MOTS','MOUA','MOUE','MOUM','MOUN','MOUT','MOWA','MOWE','MPC','MQPW','MRAU','MRCO','MRCT','MRCU','MRED','MRIN','MRIO','MRNE','MRQM','MRRA','MRS','MRTE','MRTI','MRTN','MRTZ','MSFI','MSI','MSTG','MSTW','MT','MTBE','MTCH','MTCI','MTD','MTMV','MTPA','MTPI','MTRA','MTRY','MTTI','MUDC','MUHL','MULE','MULL','MULQ','MULT','MUNC','MUNT','MURE','MURM','MURP','MURR','MURT','MUSG','MUST','MUVA','MVAU','MVEN','MWCH','MWGE','MWMC','MWST','MXAT','MYCO','MYFA','MYWA','MZ','MZMA','NABI','NABO','NACR','NAHE','NAMC','NAMO','NARD','NASA','NASH','NASM','NASU','NATL','NATW','NAVI','NAVJ','NBAY','NDMC','NEAL','NEBM','NECK','NECT','NEDL','NEGR','NEHO','NELL','NELN','NELS','NEOP','NEOS','NEPT','NERA','NERC','NEUF','NEVA','NEVD','NEVI','NEVL','NEVM','NEWC','NEWD','NEWE','NEWH','NEWI','NEWK','NEWL','NEWM','NEWN','NEWP','NEWS','NEWT','NFLD','NFLY','NHGT','NHRZ','NHYD','NIAG','NICE','NICH','NICK','NICW','NIMR','NISS','NOBI','NOBL','NOCO','NODE','NODI','NOEL','NOLE','NOMA','NOMN','NOMO','NORC','NORD','NORH','NORI','NORJ','NORM','NORN','NORO','NORR','NORS','NORT','NORU','NORV','NORW','NORX','NOTH','NOVA','NOVB','NRTS','NRTW','NRVR','NRWD','NRWN','NSU','NSUF','NUCN','NUEL','NULF','NUON','NUTT','NUWA','NUWE','NUWH','NVAE','NVTA','NWCT','NWMC','NWMR','OAKC','OAKL','OASI','OBER','OBRI','OCCH','OCIM','OCKE','OCMI','ODEL','ODGL','ODOM','ODSS','ODYS','OELR','OFFC','OFFI','OGLE','OHIO','OHTA','OKHT','OKLA','OKLH','OLAT','OLDS','OLDT','OLGE','OLIV','OLSO','OLYM','OLYP','OMAH','OMCH','OMCJ','OMEG','OMNI','OMST','ONAN','ONEI','ONOI','ONTR','ONYX','OPED','OPEL','OPEN','OPER','OPL','OPNR','OPTI','ORBI','ORCO','OREG','ORIG','ORIO','ORLA','ORTH','OSAG','OSBO','OSCA','OSHK','OSI','OSSA','OSTD','OTAS','OTLW','OTOS','OTPE','OTTE','OTWA','OUTD','OUTM','OVBT','OVEL','OVER','OVRL','OWAT','OWED','OWES','OWNA','OWNS','OZAR','OZBK','PACB','PACC','PACE','PACI','PACK','PACS','PADA','PADG','PAEN','PAGE','PAGS','PAIN','PAIS','PAIU','PAKH','PAKM','PALC','PALE','PALL','PALM','PALN','PALO','PALW','PAMA','PAMC','PAMR','PAMU','PANA','PAND','PANE','PANH','PANN','PANO','PANT','PANZ','PARC','PARD','PARE','PARH','PARI','PARK','PARL','PARM','PARO','PARP','PARR','PARS','PART','PARU','PARW','PARX','PASI','PASO','PASQ','PASS','PAST','PATH','PATZ','PAUG','PAUL','PBTI','PCM','PCTL','PDAA','PDRS','PDV','PEAB','PEAC','PEAK','PEAR','PECO','PECT','PEDA','PEDD','PEEK','PEEL','PEER','PEGA','PELI','PEMB','PEMC','PENC','PEND','PENI','PENN','PENS','PENT','PENU','PEQU','PERC','PERF','PERL','PERM','PERO','PERR','PERS','PETE','PETM','PETR','PETT','PEUG','PFAP','PFAU','PGAS','PGRM','PGSS','PHAA','PHEL','PHEP','PHII','PHIL','PHIM','PHLI','PHOE','PIAZ','PICK','PICW','PIED','PIER','PIKE','PILG','PINC','PINE','PINI','PINS','PINT','PIOE','PION','PIPE','PIPR','PIQU','PIRC','PITD','PITM','PITN','PITT','PITZ','PIXI','PJTM','PKLC','PLAC','PLAG','PLAI','PLAL','PLAM','PLAN','PLAS','PLAT','PLAY','PLEA','PLEM','PLES','PLMA','PLRN','PLTM','PLYC','PLYM','PNHL','PNNT','PNTA','PNZR','POCL','POIE','POIN','POIR','POLA','POLB','POLI','POLL','POLO','POLR','POLS','POND','PONE','PONI','PONT','PONY','POOL','POPC','POR','PORB','PORC','PORD','PORE','PORK','PORL','PORS','PORT','POWE','POWL','POWM','POWR','PRAE','PRAI','PRAM','PRAR','PRAT','PRCA','PRCW','PRDE','PREB','PREC','PREI','PREM','PREO','PRES','PREV','PREW','PRHT','PRIC','PRIJ','PRIM','PRIN','PRIO','PRIV','PRKA','PRLT','PRMC','PRMO','PRNE','PROG','PROL','PROM','PRON','PROP','PROT','PROW','PRST','PRTG','PRTN','PRTT','PRYE','PSCC','PTRB','PTRK','PTRT','PTV','PUCH','PUCK','PULD','PULL','PULP','PUMA','PUMM','PUZE','PWDY','PWTC','PWTR','PYLE','PYRA','QE','QING','QINJ','QLTY','QSAP','QUAK','QUAL','QUIC','QUIK','QUIN','QUTY','QVAL','RABB','RABJ','RACH','RACI','RACM','RADC','RADE','RAES','RAIB','RAIC','RAID','RAIN','RALL','RAMA','RAMB','RAMN','RAMP','RAMR','RAMS','RANA','RANC','RAND','RANE','RANG','RANH','RANL','RANS','RAPI','RAPS','RATC','RAVE','RAW','RAYC','RAYE','RAYG','RAYI','RAYM','RAYN','RBRC','RBYD','RCCM','RCHS','RCIN','RCKL','RCKN','RCLP','RCMH','RCON','RDER','RDGL','RDKG','RDLY','REA','READ','REAL','REAR','REBE','REBL','RECB','RECG','RECO','RECR','RECS','REDA','REDC','REDD','REDG','REDH','REDI','REDK','REDM','REDR','REDS','REED','REEG','REEL','REEV','REGE','REGI','REID','REIN','RELA','RELB','RELC','RELI','RELM','RELT','REMB','REMC','REMI','REMK','REMO','REMQ','RENA','RENT','REO','RETT','REVE','REVN','REVS','REX','REXH','REXM','REXN','REYN','RFCM','RGAA','RHEA','RHIN','RHNO','RICA','RICD','RICH','RICK','RICL','RICN','RICR','RIDE','RIDG','RIGH','RIIN','RILE','RIME','RIND','RING','RINK','RIPC','RITB','RITE','RITT','RITZ','RIVC','RIVE','RIVI','RIVN','RIVR','RIVS','RIVT','RIVU','RIVW','RKTA','RKWL','RLAC','RLST','RMWC','RNCE','RNKE','RNMT','RNSM','RNSO','ROAB','ROAC','ROAD','ROAE','ROAF','ROAG','ROAL','ROAM','ROAR','ROBB','ROBI','ROBM','ROBR','ROBT','ROCB','ROCE','ROCF','ROCH','ROCK','ROCM','ROCN','ROCO','ROCS','ROCT','ROEN','ROGE','ROGR','ROGU','ROK','ROKL','ROKN','ROKW','ROL','ROLC','ROLF','ROLH','ROLI','ROLL','ROLM','ROLP','ROLR','ROLS','ROLT','ROLY','ROMA','ROMI','RONC','RONS','ROOF','ROOS','ROOT','ROPE','RORA','RORU','ROSC','ROSE','ROSS','ROTE','ROTI','ROTO','ROUL','ROUS','ROV','ROWS','ROYA','ROYC','ROYE','ROYF','ROYG','ROYH','ROYL','ROYS','RPII','RPTR','RRAA','RRMA','RRMM','RRNR','RROV','RRSC','RSTB','RTRR','RUCH','RUCK','RUGG','RUII','RUMI','RUNA','RUPP','RUSE','RUSH','RUSO','RUSS','RUST','RUTM','RUTT','RVII','RVIS','RVKO','RVOK','RVTI','RWMI','RYAN','RYCS','RYDR','RYOB','RZRB','SAA','SABE','SABI','SABQ','SABR','SACH','SAFA','SAFE','SAFT','SAGE','SAHA','SAIC','SAIJ','SALB','SALE','SALI','SALM','SALV','SAMC','SAME','SAMP','SAMS','SAND','SANG','SANI','SANK','SANL','SANP','SANR','SANT','SARA','SARC','SATO','SATR','SATU','SAUB','SAVA','SAVN','SBRT','SBTT','SCAD','SCAG','SCAM','SCAN','SCAP','SCAT','SCEN','SCEP','SCHA','SCHD','SCHE','SCHF','SCHI','SCHK','SCHL','SCHM','SCHN','SCHR','SCHT','SCHU','SCHW','SCIO','SCIT','SCLR','SCMI','SCMM','SCMP','SCOA','SCOC','SCOE','SCOM','SCOR','SCOT','SCOU','SCRP','SCTB','SCTI','SCTK','SCTS','SCUL','SEAB','SEAC','SEAF','SEAG','SEAL','SEAM','SEAN','SEAR','SEAS','SEAT','SEAW','SECI','SECO','SECU','SECY','SEEM','SEID','SELB','SELM','SELO','SELR','SELY','SEMC','SEMN','SEMO','SENO','SEOV','SERA','SERR','SETR','SEWP','SEWR','SEXT','SFET','SFM','SHAC','SHAM','SHAN','SHAR','SHAS','SHAV','SHAW','SHBA','SHDO','SHEB','SHEL','SHEM','SHER','SHGO','SHIB','SHIL','SHIM','SHIP','SHIV','SHJZ','SHL','SHOM','SHOO','SHOP','SHOV','SHOW','SHRC','SHSY','SHTR','SHWI','SHWM','SIAT','SIEA','SIEB','SIEM','SIER','SIGA','SIGN','SILA','SILC','SILE','SILL','SILP','SILT','SILV','SIM','SIME','SIMN','SIMO','SIMP','SIMS','SIMT','SIMW','SIN','SING','SIRC','SIST','SISU','SITE','SIXP','SKAM','SKIK','SKIM','SKIP','SKIR','SKIT','SKMD','SKOD','SKPP','SKTM','SKYC','SKYH','SKYI','SKYJ','SKYL','SKYT','SLEL','SLOA','SLPE','SMAL','SMAR','SMBT','SMEA','SMIH','SMIL','SMIR','SMIT','SMLX','SMMO','SMOK','SMPI','SMRT','SMTC','SMTS','SMWD','SMYD','SNAK','SNAP','SNAT','SNBO','SNBR','SNBT','SNDP','SNDR','SNFL','SNLG','SNLT','SNOB','SNOC','SNOE','SNOJ','SNOW','SNRG','SNRZ','SNSA','SNTA','SNTE','SNTR','SNTT','SNUB','SNWB','SNWC','SNYD','SOCI','SOCT','SODE','SOIL','SOL','SOLE','SOLO','SOLS','SOND','SONI','SOON','SOPK','SOSL','SOTH','SOTW','SOUA','SOUD','SOUE','SOUH','SOUT','SOUW','SOVA','SOWI','SPAA','SPAC','SPAE','SPAH','SPAM','SPAN','SPAR','SPAT','SPBD','SPCE','SPCT','SPCY','SPEA','SPEC','SPED','SPEE','SPEG','SPEI','SPEK','SPEL','SPEM','SPEN','SPEP','SPET','SPHL','SPLT','SPLZ','SPMC','SPMN','SPNR','SPNT','SPOC','SPOK','SPOM','SPON','SPOR','SPOS','SPPI','SPPR','SPRA','SPRD','SPRE','SPRI','SPRM','SPRN','SPRO','SPRR','SPRS','SPRT','SPRY','SPTL','SPTM','SPTN','SPTR','SPWY','SPYD','SPYK','SQUI','SRCO','SSTL','STAA','STAC','STAD','STAF','STAG','STAL','STAM','STAN','STAO','STAP','STAR','STAS','STAT','STAV','STAW','STAX','STCC','STCO','STCR','STDP','STEA','STEC','STEE','STEG','STEM','STEO','STEP','STER','STET','STEU','STEW','STEY','STID','STIL','STLG','STLN','STLO','STLY','STMC','STMP','STNH','STOC','STOD','STOE','STOL','STON','STOP','STOT','STOU','STOW','STPH','STPK','STRA','STRB','STRC','STRD','STRE','STRG','STRH','STRI','STRK','STRL','STRM','STRN','STRR','STST','STTR','STTT','STU','STUA','STUZ','SUBA','SUBL','SUBT','SUEQ','SUFL','SUFW','SUGG','SULL','SUMI','SUMM','SUMT','SUN','SUNB','SUND','SUNE','SUNH','SUNI','SUNL','SUNM','SUNN','SUNO','SUNR','SUNS','SUNT','SUNV','SUNW','SUPE','SUPF','SUPI','SUPM','SUPR','SUPT','SURE','SURF','SURV','SUSQ','SUTP','SUVE','SUZI','SUZU','SVAC','SVCC','SVCH','SVTR','SWAE','SWAN','SWEE','SWEM','SWEP','SWGN','SWGR','SWIF','SWIM','SWIN','SWIS','SWIT','SWM','SWNG','SWNS','SWXP','SYCA','SYLV','SYRE','TACO','TACQ','TACR','TADN','TAGA','TAGE','TAHI','TAHO','TAIL','TAIZ','TAKA','TAKE','TALB','TALG','TALM','TALR','TAMA','TAMP','TAND','TANK','TANM','TANN','TANO','TARA','TARG','TART','TASP','TATR','TAUB','TAUN','TAWA','TAYD','TAYL','TAYR','TBC','TBCT','TCHA','TCI','TCIN','TCIP','TCRW','TEAR','TEBB','TEC','TECM','TECN','TECU','TEEH','TEEN','TEJA','TELS','TEMK','TEMP','TENA','TENN','TEPE','TERA','TERF','TERM','TERR','TERS','TERX','TESC','TESI','TETO','TETT','TEXA','TEXK','TEXL','TEXO','TEXS','TFLG','TG','TGRL','THAC','THAM','THAT','THBT','THEU','THGH','THIE','THII','THIL','THIM','THMP','THMS','THND','THNK','THOA','THOC','THOE','THOM','THON','THOP','THOR','THOS','THPN','THRC','THRE','THRM','THRU','THSE','THUL','THUN','TIAK','TIAR','TIBR','TIDE','TIDW','TIFF','TIGE','TILT','TIMB','TIME','TIMK','TIMP','TINK','TIOG','TIST','TITA','TITL','TITN','TJAA','TJJJ','TKNG','TLCC','TLMC','TLT','TLTM','TLTR','TMBL','TMBW','TMC','TMCC','TMCI','TMMI','TMTL','TMTR','TNKC','TNSC','TNTL','TODC','TODD','TOGO','TOHA','TOHO','TOKE','TOLO','TOMC','TOMO','TONC','TOPB','TOPC','TOPK','TOPP','TOPT','TORA','TORC','TORI','TORN','TORO','TORR','TOTA','TOTC','TOTE','TOTL','TOTM','TOUA','TOUR','TOWC','TOWD','TOWE','TOWL','TOWM','TOWN','TOWP','TOWR','TOYO','TOYP','TOYT','TPHT','TPLN','TQAA','TRAA','TRAB','TRAC','TRAD','TRAE','TRAF','TRAG','TRAH','TRAI','TRAJ','TRAK','TRAL','TRAM','TRAN','TRAO','TRAP','TRAQ','TRAR','TRAS','TRAU','TRAV','TRAW','TRAY','TRAZ','TRBA','TRBB','TRBC','TRBD','TRBE','TRBF','TRBL','TRBO','TRBR','TRBZ','TRCC','TRCF','TRCO','TRCP','TRCR','TRDD','TREA','TREC','TREK','TRET','TREX','TRFL','TRFR','TRHK','TRHM','TRHO','TRI','TRIA','TRIB','TRIG','TRIH','TRIK','TRIL','TRIM','TRIN','TRIP','TRIS','TRIT','TRIU','TRIV','TRIW','TRJN','TRKG','TRKM','TRLC','TRLE','TRLI','TRLK','TRLL','TRLM','TRLN','TRLO','TRLP','TRLR','TRMA','TRMB','TRMC','TRMI','TRMN','TRMP','TRMR','TRNS','TRNT','TROH','TROJ','TROM','TROP','TROQ','TROR','TROT','TROU','TROX','TROY','TRPE','TRPH','TRPR','TRPT','TRQN','TRQU','TRRD','TRRI','TRRR','TRRT','TRRY','TRSG','TRSM','TRSP','TRST','TRSU','TRSY','TRTC','TRTL','TRTN','TRTQ','TRTR','TRTT','TRUC','TRUE','TRUK','TRUM','TRUT','TRUW','TRVA','TRVC','TRVE','TRVL','TRVM','TRVO','TRVR','TRVS','TRWD','TRYB','TRYC','TSCC','TSSY','TSTL','TTII','TTIN','TTMC','TTMI','TTSI','TTTI','TTTR','TUBO','TUCE','TUCK','TUCR','TUFB','TUFC','TUFF','TUFN','TUFT','TUKA','TURN','TURT','TUTR','TVLC','TVR','TWEN','TWFC','TWIC','TWIG','TWIL','TWIN','TWIS','TWIT','TWKL','TWMI','TWN','TWRI','TWRT','TWST','TXMX','TXTT','TYAN','TYBE','TYCB','TYCO','TYEC','TYLE','TYLM','TYLR','TYSO','TZ','UAZ','UBUS','UD','UDMP','UHAU','ULAC','ULMC','ULTI','ULTM','ULTR','UMOG','UNCR','UNEX','UNGE','UNIA','UNIC','UNID','UNIE','UNIF','UNII','UNIL','UNIM','UNIO','UNIP','UNIR','UNIS','UNIT','UNIV','UNLI','UNMO','UNTD','UNVE','UNVT','URAL','URIL','USA','USAC','USAF','USAV','USCA','USCG','USCW','USEL','USMC','USN','USSM','USTS','UTAH','UTBC','UTE','UTEL','UTHM','UTIL','UTIM','UTOP','VACA','VACD','VACE','VACG','VACN','VACR','VACT','VADA','VADO','VAGA','VAL','VALA','VALC','VALI','VALK','VALL','VALY','VANA','VANB','VANC','VANG','VANM','VANO','VANP','VANR','VANS','VANT','VANV','VAQU','VATC','VAUX','VCAT','VCTY','VEAM','VEEN','VEGA','VEGL','VENC','VENG','VENM','VENT','VENU','VERA','VERI','VERM','VERN','VERS','VERT','VESE','VESP','VET','VHMC','VIBO','VICH','VICN','VICO','VICR','VICT','VIKI','VILL','VINC','VIND','VINT','VIRG','VIRI','VISC','VISQ','VIST','VITO','VIVA','VIVI','VKNG','VLCN','VLCT','VLLA','VM','VNDN','VNGM','VNHL','VNTC','VNTG','VNTO','VNTR','VNTU','VOGA','VOGU','VOLK','VOLO','VOLU','VOLV','VOUG','VREN','VRMO','VRSA','VSTA','VTEC','VTMT','VTNR','VULC','VW','VWTC','WABC','WACK','WADE','WAGC','WAGM','WAGN','WAGO','WAGT','WALA','WALD','WALE','WALH','WALK','WALL','WALM','WALR','WALT','WANA','WANC','WAND','WANE','WARD','WARE','WARH','WARI','WARM','WARO','WARR','WARS','WART','WARW','WASP','WAST','WASW','WATF','WATR','WATS','WATT','WAYC','WAYF','WAYM','WAYN','WAYP','WAYS','WCMS','WCTR','WDMZ','WEAV','WEBE','WECR','WEDG','WEEK','WEER','WEHL','WEIE','WELB','WELC','WELD','WELL','WEMA','WEND','WERG','WERN','WERS','WERT','WESC','WESD','WESE','WESG','WESH','WESI','WESL','WESM','WESN','WESR','WESS','WEST','WETR','WFMI','WHEE','WHEL','WHES','WHGM','WHHA','WHIA','WHIE','WHIP','WHIS','WHIT','WHIY','WHKA','WHKE','WHLE','WHMA','WHSP','WHTM','WHTN','WHTP','WHZR','WIBH','WICH','WICK','WICT','WIGA','WIGG','WIGW','WILA','WILC','WILD','WILF','WILG','WILK','WILL','WILM','WILO','WILR','WILS','WILW','WILX','WILY','WILZ','WINC','WIND','WINE','WING','WINI','WINL','WINN','WINP','WINS','WINT','WIPT','WISC','WISD','WISG','WISH','WISO','WITA','WITZ','WIZA','WLCH','WLDE','WLDT','WLKR','WLLS','WLTR','WLWE','WMEI','WNDH','WOLF','WOLM','WOLS','WOLV','WOND','WOOA','WOOC','WOOD','WOOM','WOON','WOOS','WORH','WORI','WORK','WORL','WORR','WORT','WPAR','WRAG','WRAN','WRGH','WRIG','WRIH','WRKH','WRLD','WRVI','WSBT','WSID','WSK','WSTI','WSTN','WSTR','WSTX','WTCI','WTKI','WTMI','WTMM','WTSN','WTTS','WTWI','WTXD','WTZR','WW','WWEK','WWMC','WWTH','WWTM','WWWH','WYDR','WYFR','WYLI','WYNN','WYNO','XCEL','XKEL','XLST','XMRK','XPFI','XPLO','XTRA','XTRM','XYZ','YACH','YADR','YAGE','YALE','YAMA','YAMP','YAMT','YANG','YANK','YANM','YARB','YARD','YARM','YAZO','YELL','YENC','YENK','YENT','YETT','YLN','YMCL','YORK','YORM','YOUG','YOUN','YSOB','YUCH','YUKO','YWAA','ZAPO','ZAPP','ZARC','ZCZY','ZELI','ZETA','ZETR','ZHEJ','ZHON','ZIEG','ZIEM','ZIL','ZIM','ZIMM','ZIMR','ZIPP','ZLMC','ZLMI','ZMCC','ZMMN','ZNEL','ZOBO','ZOLL','ZONG','ZUND','ZWIC'

		}},

		Tuple{n21:String='TYPOCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   '1','2','3','4','5','6','7','8','A','B','C','E','F','R','S','Y','Z'

		}},

		Tuple{n21:String='TYPCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'A','B','C','D','DROUTER','E','F','G','H','I','J','K','M','O','P','Q','R','S','V','Z'

		}},

		Tuple{n21:String='TYPACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'BBICYCL','BBICYCT','BSHOCKS','CBACK','CBODY','CCAMERA','CCASE','CDIGCAM','CDRYER','CEDITOR','CENLARG','CFILTER','CFLASH','CLENS','CLIGHTM','CMAGAZI','CMOTORD','CPROJEC','CRANGEF','CSCREEN','CTRIPOD','CVIEWFI','CWINDER','DBARCOD','DCABLE','DCASE','DCCSCAN','DCDROMD','DCIRCUI','DCOMPUT','DCONSOL','DCONTRO','DCPU','DCRT','DDIGIT','DDISK','DDOCSCN','DDOCSYS','DDPLCTR','DDRIVES','DELCDCT','DELCENC','DELCORG','DELCSPL','DEMACHI','DEPROMP','DEXTEND','DFAXMOD','DGRINDB','DHANDCO','DINTERF','DJOYST','DKEYBOA','DKEYPAD','DKEYPUN','DLAPTOP','DLIGHTP','DLINEFI','DMEMORY','DMLTPRS','DMODEM','DMODM','DMOUSE','DMULTIP','DPDASSI','DPIANO','DPOWERP','DPOWERS','DPRINTE','DPWRPRT','DREADER','DSERVER','DSFTWRE','DSPEAKE','DSPEECH','DSPEKRS','DSTAND','DTAPE','DTELETE','DTELETY','DTERMIN','DVOICER','DWORDPR','EACCHGS','EACCOIL','EADAPTO','EAIRBRS','EAIRFIL','EAIRHAN','EAIRWRN','EALARM','EAMMETE','EANALYZ','EANGLE','EAPNMON','EARCSMS','EATTENU','EAUDIOM','EAUGER','EAUTOPI','EBALANC','EBAROME','EBATCHG','EBINDER','EBIT','EBLADE','EBLOWER','EBOLTCU','EBRAKE','EBREAKE','EBRTANL','EBUGLIG','ECABLE','ECABLEL','ECALIBR','ECALIPE','ECARDIO','ECHAINS','ECHARGE','ECHISEL','ECHRONO','ECLIPPE','ECMIXER','ECOMPAC','ECOMPAS','ECOMPRE','ECONDEN','ECONTRO','ECONVEY','ECOUNTE','ECOUPLE','ECRPTOL','ECUTTER','EDEBOWL','EDEFIBR','EDEPTHF','EDETECT','EDIAGSC','EDIESET','EDOOROP','EDOPPLR','EDOSIME','EDRILL','EDRILLP','EDUMPT','EDWELLM','EEDGER','EEEGMCH','EEKGMCH','EENGINE','EENGRAV','EEQUALI','EEVAPOR','EEXPLOS','EFILE','EFILTER','EFINISH','EFIREEX','EFLASHL','EFRNRCM','EFUSE','EFUSSPL','EGAUGE','EGEIGER','EGENERA','EGPOSYS','EGRINDE','EGYROSC','EHAMMER','EHANDPI','EHANDTR','EHEDGEC','EHHRADI','EHOE','EHOIST','EHOLSTE','EHORSER','EINDICA','EINVERT','EJACK','EJOINTE','EKEY','EKEYMAK','ELABEQU','ELADDER','ELAMINA','ELASER','ELATHE','ELEAFBL','ELEVEL','ELIFEPR','ELIFT','ELKDTCT','ELMDEVI','ELOCK','ELOGSPL','ELORAN','EMEASUR','EMEDICA','EMEGOHM','EMETALD','EMETER','EMICROM','EMILLIN','EMITERB','EMOTOR','EMOWER','EMULTIM','ENAVIGA','ENEONSN','ENEWSRA','ENIBBLE','ENRVSTM','EOHMMET','EOSCILL','EOXIMET','EPARKME','EPIPETH','EPLANE','EPLANER','EPLIERS','EPLOW','EPOLLGT','EPOST','EPOWERP','EPOWERS','EPRESS','EPROBE','EPRRAKE','EPSTRPR','EPSWEEP','EPULLER','EPUMP','EPUNCH','EPYROME','ERADAR','ERAKE','ERATCHE','EREGULA','ERESPIR','ERESUSC','ERIVETG','EROLLER','EROUTER','ESANDBL','ESANDER','ESAW','ESCAFFO','ESCALES','ESCREWD','ESCREWG','ESCRUBB','ESEAGUN','ESEISMG','ESENSOR','ESEPARA','ESEWERC','ESEXTAN','ESHARPE','ESHEARS','ESHOVEL','ESHREDD','ESLICER','ESMOKED','ESNAKE','ESNOWBL','ESNOWPL','ESOCKET','ESODCUT','ESOLDER','ESONAR','ESPADER','ESPHYGM','ESPOTLI','ESPRAYE','ESPRAYG','ESPREAD','ESPRINK','ESTAPLE','ESTETHO','ESTROBE','ESTUDGU','ESWITCH','ETACHMT','ETAMPER','ETANK','ETAPEME','ETAPER','ETATTOO','ETEARGA','ETESTER','ETHEODO','ETHERMO','ETHERMS','ETHREAD','ETILLER','ETIMECL','ETIMER','ETIMING','ETONGS','ETONOME','ETOOLBO','ETORCH','ETRAFFI','ETRANSD','ETRANSF','ETRANSI','ETRANSP','ETRENCH','ETRIMME','ETROWEL','EULTRS','EVALVE','EVESCTO','EVIBRAT','EVISE','EVOLTME','EWATERB','EWATTME','EWEEDER','EWELDER','EWHEELB','EWINCH','EWINDRK','EWIREST','EWRENCH','EXRAY','EXTRMNT','FBED','FBENCH','FBOOKCA','FCABINE','FCHAIR','FCLOCK','FCOATRA','FCOUCH','FDESK','FLAMP','FNGTSTN','FTABLE','FVASE','FWASTEB','GARCADE','GELGAME','GLOTMAC','GPCSTIC','GPINBAL','GPOOLTA','GSLOTMA','GVRGLAS','HAIRCON','HAIRPUR','HBLENDE','HBTHTUB','HBUFFER','HCOFFEE','HCOMPAC','HDEHUMI','HDISHWA','HDISPOS','HDRYER','HFAN','HFDMXR','HFOODPR','HFREEZE','HFRYER','HFURNAC','HGASFIR','HGRILL','HHEATPU','HHNDMXR','HHOOD','HHOTTUB','HHUMIDI','HICEMAK','HICREMA','HIRON','HJUICER','HKNIFE','HMEATSL','HMNDOLN','HOPENER','HOVEN','HPLATE','HPOPCOR','HRANGE','HREFRIG','HSCISSO','HSEWING','HSHAMPO','HSILVER','HSOFTEN','HSPACEH','HSTEAMC','HTOASTE','HTOILET','HTRASHB','HTSTOVN','HVACATT','HVACUUM','HWASHER','HWATERH','HWOODST','HYGRTMC','IALIEN','IBADGE','ICREDEN','IDOGTAG','IDRIVER','ILICENS','IPASSPO','IPINCAR','ISMARTC','ISSCARD','JAIRTIC','JBIRTHC','JFSBOOK','JFSCOUP','JGIFTCE','JLICTAB','JLOTTER','JMTPASS','JPERMIT','JPHONEC','JPRESCR','JSIGN','JSTAMP','JSTICKE','JSUMMON','JTICKET','JTITLE','KBOOK','KBULLIO','KCARPET','KCOIN','KDOLL','KFIGURI','KMODEL','KPAINTI','KPLATE','KPRINT','KSCARDS','KVASE','LBIRD','LCATTLE','LCOLLAR','LDOG','LEMU','LEQUINE','LFELINE','LFERRET','LGOAT','LPIGEON','LRABBIT','LSHEEP','LSWINE','MACCORD','MAUTOHA','MBAGPIP','MBANJO','MBARITO','MBASS','MBASSOO','MBELLS','MBUGLE','MCASE','MCELLO','MCLARIN','MCORNET','MCYMBAL','MDRUM','MFLUTE','MGUITAR','MHARMON','MHARP','MHORN','MKEYBOA','MMANDOL','MMELLOP','MOBOE','MORGAN','MPIANO','MPICCOL','MRECORD','MSAXOPH','MSOUSAP','MSTAND','MSYNTHE','MTROMBO','MTRUMPE','MTUBA','MUKULEL','MVIOLA','MVIOLIN','MXYLOPH','OACCOUN','OADDING','OADDRES','OANSWER','OATMMAC','OBANKBA','OCAIDB','OCALCUL','OCART','OCASHRE','OCASTIN','OCHANGE','OCHECKW','OCONTAI','OCOPIER','ODIALER','ODICTAT','ODRAFTI','OENVMCH','OFAX','OFILECA','OFOLDER','OIMPRIN','OLABELE','OLANGUA','OLECTER','OMAILIN','OMOMACH','OMULTIP','OORDRMA','OPOSTAG','OPOSTIN','OSAFE','OSLIDER','OSTAMPM','OSTENCI','OSTENOT','OTABULA','OTAPEDI','OTELEPH','OTELREC','OTRANSC','OTYPESE','OTYPEWR','OVALIDA','OVENDIN','OVOICEW','OWATERC','PBCKPCK','PBRACEL','PCAPE','PCASE','PCHALIC','PCHDLST','PCHLDST','PCOAT','PCUFFLN','PDRYER','PEARRIN','PFUR','PGEMSTO','PHABRAC','PHANDCU','PHAT','PHEARIN','PHELMET','PJACKET','PLIGHTE','PLOCKET','PLUGGAG','PMASSAG','PMEDALL','PMORBOX','PMORURN','PNECKLA','PNGTSTC','PPIN','PPURSE','PRING','PSHAVER','PSTRLLR','PVEST','PWALLET','PWATCH','PWHEELC','RACTUAT','RAMPLIF','RANTENN','RATAPE','RCABLEC','RCABLEL','RCAMCOR','RCARTRI','RCASE','RCBRADI','RCDISC','RCDPLAY','RCDRECO','RCHANNE','RCOMBO','RCROSSO','RDELAY','RDESCRA','RDIGREC','RDIRECT','RDMMDEV','RDVCOMB','RDVRECO','RENHANC','REQUALI','RFMCONV','RHANDCO','RHEADSE','RINTERC','RJUKEBO','RKARAOK','RLGTMXR','RMICROP','RMONITO','RNEEDLE','RNOISER','RPAGER','RPASYST','RPHONOG','RPOWERB','RPOWERP','RPREAMP','RPROCES','RPROMPT','RRACK','RRADICD','RRADIO','RRADIOR','RRADIOT','RRADITA','RRANGEE','RRCBOAT','RRCCAR','RRCPLNE','RRCTRCK','RRECEIV','RREMOTE','RREVERB','RRTVREC','RSATDSH','RSCANNE','RSOUNDM','RSPEAKE','RSTAND','RSTEREO','RSTFPLT','RSWITCH','RTAPEDE','RTAPEPL','RTAPERE','RTELDVD','RTELEVI','RTELVCR','RTRANSC','RTRANSM','RTUNER','RTURNTA','RTVGAME','RVCONVE','RVCRWN','RVDISK','RVIDEOC','RVIDEOD','RVIDEOR','RVIDEOT','RVMULTI','RVOICEC','RVPRINT','RVTAPE','RWALKIE','RWEBTV','SBALL','SBBGUN','SBENCH','SBOW','SECYCLE','SFISHIN','SGOLFCA','SGOLFCL','SHOMGYM','SISKATE','SLANTER','SLASGUN','SLEGMAC','SPARACH','SRACK','SRACKET','SREEL','SROLBLD','SROWING','SRSKATE','SSADDLE','SSBOARD','SSCOOTE','SSCUBA','SSKATEB','SSKIMAC','SSKIS','SSLANTB','SSTOPWA','SSTPEXM','SSURFBO','SSWORD','STENT','STREADM','STREEST','TBIOLOG','TCORROS','TEPAHAZ','TEXPLOS','TFLALIQ','TFLASOL','TGGASES','TPOISON','TTORM','VBINOCU','VEYEGLA','VMICROS','VNGTVSG','VPERISC','VSCOPE','VVIEWER','WBAILER','WBIT','WBLOCK','WBLOWOU','WCATHEA','WCATWOR','WCOLLAR','WCUTTER','WDRAWWO','WDRILL','WDRILLU','WHYDRAH','WKELLYS','WKSWIPE','WMILL','WMPTANK','WPACKER','WPLPIG','WPUMPUN','WREAMER','WRHGUID','WROLLER','WSHOCK','WSPIDER','WSPINWR','WSSHAKE','WSTABIL','WSUB','WSWIVEL','WTONG','WTOOLJO','WVALVE','WVALVEC','WWASHOE','YLIQUOR','YPROPEL'

		}},

		Tuple{n21:String='SMTCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'ART ARM','ART BRST','ART BRSTS','ART EAR','ART ELBOW','ART EYE','ART FOOT','ART HAND','ART HIP','ART KNEE','ART L ARM','ART L BRST','ART L EAR','ART L ELB','ART L EYE','ART L FT','ART L HIP','ART L HND','ART L KNE','ART L LEG','ART L SHLD','ART LARYNX','ART LEG','ART R ARM','ART R BRST','ART R EAR','ART R ELB','ART R EYE','ART R FT','ART R HIP','ART R HND','ART R KNE','ART R LEG','ART R SHLD','ART SHLD','BALD','BLIND','BLND EYE','BLND L EYE','BLND R EYE','BRA LR ARM','BRA LR LEG','BRAC ARM','BRAC L ARM','BRAC L LEG','BRAC LEG','BRAC R ARM','BRAC R LEG','BRAC TEETH','BRACE BACK','BRACE NECK','CANE','CARD PACEM','CATA L EYE','CATA R EYE','CATARACT','CAUL EAR','CAUL L EAR','CAUL R EAR','CL LIP','CLEFT CHIN','CLEFT PAL','COLOST APP','CON LENSES','CRIP ARM','CRIP FGR','CRIP FOOT','CRIP HAND','CRIP L ARM','CRIP L FGR','CRIP L FT','CRIP L HND','CRIP L LEG','CRIP L TOE','CRIP LEG','CRIP R ARM','CRIP R FGR','CRIP R FT','CRIP R HND','CRIP R LEG','CRIP R TOE','CRIP TOE','CROSSEYED','CRUTCHES','DA ALCOHOL','DA AMPHETA','DA BARBITU','DA COCAINE','DA GLUE','DA HALLUCI','DA MARIJUA','DA NARCOTI','DA OTHER','DA PAINT','DA RITALIN','DA ROHYPNL','DEAF','DEAF EAR','DEAF L EAR','DEAF MUTE','DEAF R EAR','DENT LOW','DENT UP','DENT UP LO','DEV SEPTUM','DIMP CHEEK','DIMP CHIN','DIMP FACE','DIMP L CHK','DIMP R CHK','DISC ABDOM','DISC ANKL','DISC ARM','DISC BACK','DISC BRST','DISC BUTTK','DISC CALF','DISC CHEEK','DISC CHEST','DISC CHIN','DISC EAR','DISC ELBOW','DISC EYE','DISC F ARM','DISC FACE','DISC FGR','DISC FHD','DISC FOOT','DISC GROIN','DISC HAND','DISC HEAD','DISC HIP','DISC KNEE','DISC L ANK','DISC L ARM','DISC L BRS','DISC L BUT','DISC L CALF','DISC L CHK','DISC L EAR','DISC L ELB','DISC L EYE','DISC L FGR','DISC L FT','DISC L HIP','DISC L HND','DISC L LEG','DISC L LIP','DISC L TOE','DISC L WRS','DISC LEG','DISC LF ARM','DISC LIP','DISC LKNEE','DISC LSHLD','DISC LTHGH','DISC NECK','DISC NOSE','DISC PENIS','DISC R ANK','DISC R ARM','DISC R BRS','DISC R BUT','DISC R CALF','DISC R CHK','DISC R EAR','DISC R ELB','DISC R EYE','DISC R FGR','DISC R FT','DISC R HIP','DISC R HND','DISC R LEG','DISC R TOE','DISC R WRS','DISC RF ARM','DISC RKNEE','DISC RSHLD','DISC RTHGH','DISC SHLD','DISC THGH','DISC TOE','DISC U LIP','DISC UL ARM','DISC UR ARM','DISC WRIST','EAR TUBES','EXTR BRST','EXTR C NIP','EXTR C VRT','EXTR CBRST','EXTR FGR','EXTR L FGR','EXTR L NIP','EXTR L TOE','EXTR L TTH','EXTR L VRT','EXTR LBRST','EXTR NIP','EXTR R FGR','EXTR R NIP','EXTR R TOE','EXTR RBRST','EXTR TOE','EXTR TTH','EXTR U TTH','EXTR VRT','FRC ANKL','FRC ARM','FRC BACK','FRC CLAVIC','FRC ELBOW','FRC FGR','FRC FOOT','FRC HAND','FRC HIP','FRC JAW','FRC KNEE','FRC L ANKL','FRC L ARM','FRC L ELB','FRC L FGR','FRC L FOOT','FRC L HAND','FRC L HIP','FRC L KNEE','FRC L LEG','FRC L RIB','FRC L SHLD','FRC L TOE','FRC L WRST','FRC LCLAVI','FRC LEG','FRC LL ARM','FRC LL JAW','FRC LL LEG','FRC LPELVI','FRC LR ARM','FRC LR JAW','FRC LR LEG','FRC NECK','FRC NOSE','FRC PELVIS','FRC R ANKL','FRC R ARM','FRC R ELB','FRC R FGR','FRC R FOOT','FRC R HAND','FRC R HIP','FRC R KNEE','FRC R LEG','FRC R RIB','FRC R SHLD','FRC R TOE','FRC R WRST','FRC RCLAVI','FRC RIBS','FRC RPELVI','FRC SHLD','FRC SKULL','FRC SPINE','FRC STERN','FRC TOE','FRC UL ARM','FRC UL JAW','FRC UL LEG','FRC UR ARM','FRC UR JAW','FRC UR LEG','FRC WRIST','FRECKLES','GLASSES','GLAUCOMA','GOLD TOOTH','HAIR IMPL','HEAR AID','HFR ANKL','HFR ARM','HFR BACK','HFR CLAVIC','HFR ELBOW','HFR FGR','HFR FOOT','HFR HAND','HFR HIP','HFR JAW','HFR KNEE','HFR L ANKL','HFR L ARM','HFR L ELB','HFR L FGR','HFR L FOOT','HFR L HAND','HFR L HIP','HFR L KNEE','HFR L LEG','HFR L RIB','HFR L SHLD','HFR L TOE','HFR L WRST','HFR LCLAVI','HFR LEG','HFR LL ARM','HFR LL JAW','HFR LL LEG','HFR LPELVI','HFR LR ARM','HFR LR JAW','HFR LR LEG','HFR NECK','HFR NOSE','HFR PELVIS','HFR R ANKL','HFR R ARM','HFR R ELB','HFR R FGR','HFR R FOOT','HFR R HAND','HFR R HIP','HFR R KNEE','HFR R LEG','HFR R RIB','HFR R SHLD','HFR R TOE','HFR R WRST','HFR RCLAVI','HFR RIBS','HFR RPELVI','HFR SHLD','HFR SKULL','HFR SPINE','HFR STERN','HFR TOE','HFR UL ARM','HFR UL JAW','HFR UL LEG','HFR UR ARM','HFR UR JAW','HFR UR LEG','HFR WRIST','HUMPBACKED','IMPL PENIS','INTRA ROD','IUD','MC ACNE','MC ADD','MC ALCOHOL','MC ALLERGY','MC ALZHMRS','MC ARTHRTS','MC BEHAVIO','MC BLOOD','MC CANCER','MC DIABTIC','MC DOWNSYN','MC DRUGAB','MC EATDIS','MC HEART','MC KIDNEY','MC LIVER','MC NERVOUS','MC NRLGCAL','MC OTHER','MC PARPLGC','MC PASTPRE','MC PLMNARY','MC PREGNAN','MC QUADPLG','MC SKIN','MC TB','MC THYROID','MC TOURETE','MISS ADND','MISS APPNX','MISS ARM','MISS BRST','MISS BRSTS','MISS C VRT','MISS EAR','MISS EYE','MISS FGR','MISS FJT','MISS FOOT','MISS GALL','MISS HAND','MISS INTES','MISS KID','MISS L ARM','MISS L EAR','MISS L EYE','MISS L FGR','MISS L FJT','MISS L FT','MISS L HND','MISS L KID','MISS L LEG','MISS L TES','MISS L TOE','MISS L VRT','MISS LBRST','MISS LEG','MISS LLARM','MISS LLLEG','MISS LLUNG','MISS LOVAR','MISS LRARM','MISS LRLEG','MISS LRYNX','MISS LUNG','MISS NOSE','MISS OVARS','MISS OVARY','MISS PANCR','MISS PENIS','MISS PROST','MISS R ARM','MISS R EAR','MISS R EYE','MISS R FGR','MISS R FJT','MISS R FT','MISS R HND','MISS R KID','MISS R LEG','MISS R TES','MISS R TOE','MISS RBRST','MISS RLUNG','MISS ROVAR','MISS SPLEN','MISS STOMA','MISS TES','MISS THYRD','MISS TOE','MISS TONG','MISS TONSL','MISS UTRUS','MISS VRT','MOLE ABDOM','MOLE ANKL','MOLE ARM','MOLE BACK','MOLE BRST','MOLE BUTTK','MOLE CALF','MOLE CHEST','MOLE CHIN','MOLE CHK','MOLE EAR','MOLE ELBOW','MOLE EYE','MOLE F ARM','MOLE FACE','MOLE FGR','MOLE FHD','MOLE FOOT','MOLE GROIN','MOLE HAND','MOLE HEAD','MOLE HIP','MOLE KNEE','MOLE L ANK','MOLE L ARM','MOLE L BUT','MOLE L CALF','MOLE L CHK','MOLE L EAR','MOLE L ELB','MOLE L EYE','MOLE L FGR','MOLE L FT','MOLE L HIP','MOLE L HND','MOLE L KNE','MOLE L LEG','MOLE L LIP','MOLE L SHD','MOLE L THG','MOLE L TOE','MOLE L WRS','MOLE LBRST','MOLE LEG','MOLE LF ARM','MOLE LIP','MOLE NECK','MOLE NOSE','MOLE PENIS','MOLE R ANK','MOLE R ARM','MOLE R BUT','MOLE R CALF','MOLE R CHK','MOLE R EAR','MOLE R ELB','MOLE R EYE','MOLE R FGR','MOLE R FT','MOLE R HIP','MOLE R HND','MOLE R KNE','MOLE R LEG','MOLE R SHD','MOLE R THG','MOLE R TOE','MOLE R WRS','MOLE RBRST','MOLE RF ARM','MOLE SHLD','MOLE THGH','MOLE TOE','MOLE U LIP','MOLE UL ARM','MOLE UR ARM','MOLE WRS','MUTE','NM ANKL','NM ARM','NM BUTTK','NM CALF','NM ELBOW','NM FGR','NM FOOT','NM GROIN','NM HAND','NM HIP','NM KNEE','NM L ANKL','NM L ARM','NM L BUTTK','NM L CALF','NM L ELB','NM L FGR','NM L FOOT','NM L HIP','NM L HND','NM L KNE','NM L LEG','NM L SHLD','NM L THIGH','NM L TOE','NM L WRIST','NM LEG','NM LL ARM','NM LR ARM','NM PENIS','NM R ANKL','NM R ARM','NM R BUTTK','NM R CALF','NM R ELB','NM R FGR','NM R FOOT','NM R HIP','NM R HND','NM R KNE','NM R LEG','NM R SHLD','NM R THIGH','NM R TOE','NM R WRIST','NM SHLD','NM THIGH','NM TOE','NM UL ARM','NM UR ARM','NM WRIST','ORTH NAIL','ORTH PLATE','ORTH SCREW','POCKMARKS','PRCD ABDMN','PRCD BACK','PRCD EAR','PRCD EARS','PRCD EYE','PRCD GNTLS','PRCD L EAR','PRCD L EYE','PRCD L NIP','PRCD LIP','PRCD LLIP','PRCD NIPPL','PRCD NOSE','PRCD R EAR','PRCD R EYE','PRCD R NIP','PRCD TONGU','PRCD ULIP','PROT JAW','PROT L JAW','PROT U JAW','RTAT ABDM','RTAT ANKL','RTAT ARM','RTAT BACK','RTAT BRST','RTAT BUTTK','RTAT CALF','RTAT CHEEK','RTAT CHEST','RTAT CHIN','RTAT EAR','RTAT ELBOW','RTAT EYE','RTAT FACE','RTAT FARM','RTAT FHD','RTAT FLBOD','RTAT FNGR','RTAT FOOT','RTAT GROIN','RTAT HAND','RTAT HEAD','RTAT HIP','RTAT KNEE','RTAT L ARM','RTAT L CHK','RTAT L EAR','RTAT L ELB','RTAT L EYE','RTAT L FGR','RTAT L HIP','RTAT L HND','RTAT L LEG','RTAT L TOE','RTAT LANKL','RTAT LBRST','RTAT LBUTK','RTAT LCALF','RTAT LEG','RTAT LFARM','RTAT LFOOT','RTAT LIP','RTAT LKNEE','RTAT LSHLD','RTAT LTHGH','RTAT LWLIP','RTAT LWRS','RTAT NECK','RTAT NOSE','RTAT PENIS','RTAT R ARM','RTAT R CHK','RTAT R EAR','RTAT R ELB','RTAT R EYE','RTAT R FGR','RTAT R HIP','RTAT R HND','RTAT R LEG','RTAT R TOE','RTAT RANKL','RTAT RBRST','RTAT RBUTK','RTAT RCALF','RTAT RFARM','RTAT RFOOT','RTAT RKNEE','RTAT RSHLD','RTAT RTHGH','RTAT RWRS','RTAT SHLD','RTAT THGH','RTAT TOE','RTAT ULARM','RTAT UPLIP','RTAT URARM','RTAT WRS','SC ABDOM','SC ANKL','SC ARM','SC BACK','SC BREAST','SC BUTTK','SC CALF','SC CHEST','SC CHIN','SC CHK','SC EAR','SC ELBOW','SC EYE','SC F ARM','SC FACE','SC FGR','SC FHD','SC FOOT','SC GROIN','SC HAND','SC HEAD','SC HIP','SC KNEE','SC L ANKL','SC L ARM','SC L BRST','SC L BUTTK','SC L CALF','SC L CHK','SC L EAR','SC L ELB','SC L EYE','SC L FGR','SC L FT','SC L HIP','SC L HND','SC L KNEE','SC L LEG','SC L SHLD','SC L THGH','SC L TOE','SC L WRIST','SC LEG','SC LF ARM','SC LIP','SC LOW LIP','SC NECK','SC NOSE','SC PENIS','SC R ANKL','SC R ARM','SC R BRST','SC R BUTTK','SC R CALF','SC R CHK','SC R EAR','SC R ELB','SC R EYE','SC R FGR','SC R FT','SC R HIP','SC R HND','SC R KNEE','SC R LEG','SC R SHLD','SC R THGH','SC R TOE','SC R WRIST','SC RF ARM','SC SHLD','SC THGH','SC TOE','SC UL ARM','SC UP LIP','SC UR ARM','SC WRIST','SHRT L LEG','SHRT LEG','SHRT R LEG','SHUNT ART','SHUNT CERB','SKL PLATE','SLVR TOOTH','STAPLES','STUTTERS','TAT ABDOM','TAT ANKL','TAT ARM','TAT BACK','TAT BREAST','TAT BUTTK','TAT CALF','TAT CHEEK','TAT CHEST','TAT CHIN','TAT EAR','TAT ELBOW','TAT EYE','TAT FACE','TAT FARM','TAT FHD','TAT FLBODY','TAT FNGR','TAT FOOT','TAT GROIN','TAT HAND','TAT HEAD','TAT HIP','TAT KNEE','TAT L ANKL','TAT L ARM','TAT L BRST','TAT L BUTK','TAT L CALF','TAT L CHK','TAT L EAR','TAT L EYE','TAT L FGR','TAT L FOOT','TAT L HIP','TAT L HND','TAT L KNEE','TAT L LEG','TAT L SHLD','TAT L THGH','TAT L TOE','TAT L WRS','TAT LEG','TAT LELBOW','TAT LF ARM','TAT LIP','TAT LW LIP','TAT NECK','TAT NOSE','TAT PENIS','TAT R ANKL','TAT R ARM','TAT R BRST','TAT R BUTK','TAT R CALF','TAT R CHK','TAT R EAR','TAT R EYE','TAT R FGR','TAT R FOOT','TAT R HIP','TAT R HND','TAT R KNEE','TAT R LEG','TAT R SHLD','TAT R THGH','TAT R TOE','TAT R WRS','TAT RELBOW','TAT RF ARM','TAT SHLD','TAT THGH','TAT TOE','TAT UL ARM','TAT UP LIP','TAT UR ARM','TAT WRS','TD ACONVUL','TD ADEPRES','TD ANALGES','TD ANTBTCS','TD ANTINFL','TD BRNCHDL','TD CARDIAC','TD HYPNOTI','TD INSULIN','TD OTHER','TD RITALIN','TD TRANQUI','TRANSSXL','TRANSVST','TUBE L EAR','TUBE R EAR','VASC PROTH','WHEELCHAIR','WIRE SUTUR'

		}},

		Tuple{n21:String='RESCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AA','AB','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AX','AZ','BA','BB','BC','BD','BE','BF','BG','BH','BI','BJ','BK','BL','BM','BN','BO','BP','BQ','BR','BS','BT','BU','BV','BW','BX','BY','BZ','CB','CC','CD','CE','CF','CG','CH','CI','CJ','CL','CM','CP','CQ','CR','CS','CT','CU','CV','CW','CY','CZ','DA','DB','DC','DD','DF','DG','DH','DI','DJ','DK','DL','DM','DN','DO','DP','DR','DS','DT','DV','DW','EE','EK','EL','EN','EO','ER','ES','ET','EU','EY','EZ','FA','FC','FD','FG','FJ','FL','FN','FO','FP','FR','FS','FX','GA','GB','GC','GD','GE','GF','GG','GI','GJ','GK','GM','GN','GO','GP','GR','GS','GT','GU','GY','GZ','HA','HD','HE','HK','HL','HN','HO','HR','HS','HT','HU','IA','IB','IC','ID','IE','II','IL','IM','IN','IO','IQ','IR','IS','IT','IU','IW','IX','IY','JA','JE','JI','JL','JM','JN','JO','JR','JU','KA','KB','KC','KE','KH','KI','KK','KN','KO','KP','KT','KU','KW','KY','KZ','LA','LB','LC','LD','LE','LF','LH','LI','LL','LN','LO','LP','LS','LT','LU','LX','LY','MB','MC','MD','ME','MF','MG','MH','MI','MJ','MK','ML','MM','MN','MO','MP','MQ','MR','MS','MT','MU','MV','MW','MX','MY','MZ','NA','NB','NC','ND','NE','NF','NG','NH','NI','NJ','NK','NL','NM','NN','NO','NP','NQ','NR','NS','NT','NU','NV','NW','NX','NY','NZ','OA','OC','OF','OG','OH','OI','OK','OM','ON','OO','OR','OS','OT','PA','PB','PC','PD','PE','PF','PG','PI','PK','PL','PM','PN','PO','PQ','PR','PS','PT','PU','PV','PW','QA','QR','QU','RA','RB','RC','RE','RF','RG','RH','RI','RL','RR','RS','RU','RV','RW','RY','SA','SB','SC','SD','SE','SF','SG','SH','SI','SJ','SK','SL','SM','SN','SO','SP','SQ','SR','SS','SU','SV','SW','SY','SZ','TA','TB','TC','TD','TE','TF','TG','TH','TJ','TK','TL','TM','TN','TO','TP','TR','TS','TT','TU','TV','TW','TX','TY','TZ','UC','UG','UK','UM','UR','US','UT','UV','UY','UZ','VA','VB','VC','VI','VL','VT','VV','VY','VZ','WB','WD','WE','WF','WK','WL','WN','WS','WT','WV','WY','XX','YG','YO','YT','YU','YY','ZA','ZB','ZC','ZD','ZI','ZM','ZO','ZR'

		}},

		Tuple{n21:String='POBCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AA','AB','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AX','AZ','BA','BB','BC','BD','BE','BF','BG','BH','BI','BJ','BK','BL','BM','BN','BO','BP','BQ','BR','BS','BT','BU','BV','BW','BX','BY','BZ','CA','CB','CC','CD','CE','CF','CG','CH','CI','CJ','CL','CM','CO','CP','CQ','CR','CS','CT','CU','CV','CW','CY','CZ','DA','DB','DC','DD','DE','DF','DG','DH','DI','DJ','DK','DL','DM','DN','DO','DP','DR','DS','DT','DV','DW','EE','EK','EL','EN','EO','ER','ES','ET','EU','EY','EZ','FA','FC','FD','FG','FJ','FL','FN','FO','FP','FR','FS','FX','GA','GB','GC','GD','GE','GF','GG','GI','GJ','GK','GM','GN','GO','GP','GR','GS','GT','GU','GY','GZ','HD','HE','HI','HK','HL','HN','HO','HR','HS','HT','HU','IA','IB','IC','ID','IE','II','IL','IM','IN','IO','IQ','IR','IS','IT','IU','IW','IX','IY','JA','JE','JI','JL','JM','JN','JO','JR','JU','KB','KC','KE','KH','KI','KK','KN','KO','KP','KS','KT','KU','KW','KY','KZ','LA','LB','LC','LD','LE','LF','LH','LI','LL','LN','LO','LP','LS','LT','LU','LX','LY','MA','MB','MC','MD','ME','MF','MG','MH','MI','MJ','MK','ML','MM','MN','MO','MP','MQ','MR','MS','MT','MU','MV','MW','MX','MY','MZ','NA','NB','NC','ND','NE','NF','NG','NH','NI','NJ','NK','NL','NM','NN','NO','NP','NQ','NR','NS','NT','NU','NV','NW','NX','NY','NZ','OA','OC','OF','OG','OH','OI','OK','OM','ON','OO','OR','OS','OT','PA','PB','PC','PD','PE','PF','PG','PI','PK','PL','PM','PN','PO','PQ','PR','PS','PT','PU','PV','PW','QA','QR','QU','RA','RB','RC','RE','RF','RG','RH','RI','RL','RR','RS','RU','RV','RW','RY','SA','SB','SC','SD','SE','SF','SG','SH','SI','SJ','SK','SL','SM','SN','SO','SP','SQ','SR','SS','SU','SV','SW','SY','SZ','TA','TB','TC','TD','TE','TF','TG','TH','TJ','TK','TL','TM','TN','TO','TP','TR','TS','TT','TU','TV','TW','TX','TY','TZ','UC','UG','UK','UM','UR','US','UT','UV','UY','UZ','VA','VB','VC','VI','VL','VT','VV','VY','VZ','WA','WB','WD','WE','WF','WI','WK','WL','WN','WS','WT','WV','WY','XX','YG','YO','YT','YU','YY','ZA','ZB','ZC','ZD','ZI','ZM','ZO','ZR'

		}},

		Tuple{n21:String='OFFCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   '0101','0102','0103','0104','0105','0106','0199','0201','0299','0301','0302','0303','0399','0901','0902','0903','0904','0905','0906','0907','0908','0909','0910','0911','0912','0913','0999','1001','1002','1003','1004','1005','1006','1007','1008','1009','1010','1011','1020','1021','1099','1101','1102','1103','1104','1105','1106','1107','1108','1109','1110','1111','1112','1113','1114','1115','1116','1117','1118','1119','1120','1121','1122','1123','1198','1199','1201','1202','1203','1204','1205','1206','1207','1208','1209','1210','1211','1212','1299','1301','1302','1303','1304','1305','1306','1307','1308','1309','1310','1311','1312','1313','1314','1315','1316','1399','1401','1402','1403','1404','1499','1601','1602','1701','1702','2001','2002','2003','2004','2005','2006','2007','2008','2009','2099','2101','2102','2103','2104','2105','2199','2201','2202','2203','2204','2205','2206','2207','2299','2301','2302','2303','2304','2305','2306','2307','2308','2309','2310','2311','2312','2313','2314','2315','2316','2399','2401','2402','2403','2404','2405','2406','2407','2408','2409','2410','2411','2499','2501','2502','2503','2504','2505','2506','2507','2508','2509','2510','2511','2589','2599','2601','2602','2603','2604','2605','2606','2607','2608','2609','2699','2701','2702','2703','2704','2705','2799','2801','2802','2803','2804','2805','2899','2901','2902','2903','2904','2905','2906','2999','3501','3502','3503','3504','3505','3510','3511','3512','3513','3520','3521','3522','3523','3530','3531','3532','3533','3540','3541','3542','3543','3550','3560','3561','3562','3563','3564','3570','3571','3572','3573','3580','3581','3582','3583','3599','3601','3602','3603','3604','3605','3606','3607','3608','3609','3610','3611','3612','3613','3614','3615','3616','3617','3618','3619','3620','3621','3622','3699','3700','3701','3702','3703','3704','3705','3706','3707','3799','3801','3802','3803','3804','3805','3806','3807','3808','3809','3810','3811','3812','3899','3901','3902','3904','3905','3907','3908','3909','3910','3911','3912','3913','3914','3915','3916','3918','3919','3920','3921','3999','4001','4002','4003','4004','4005','4006','4007','4008','4009','4099','4101','4102','4103','4104','4199','4801','4802','4803','4804','4805','4806','4807','4808','4809','4810','4811','4812','4813','4899','4901','4902','4903','4904','4999','5001','5002','5003','5004','5005','5006','5007','5008','5009','5010','5011','5012','5013','5014','5015','5016','5099','5101','5102','5103','5104','5105','5106','5107','5108','5109','5110','5111','5112','5113','5199','5201','5202','5203','5204','5205','5206','5207','5208','5209','5210','5211','5212','5213','5214','5215','5216','5217','5299','5301','5302','5303','5304','5305','5306','5307','5309','5310','5311','5399','5401','5402','5403','5404','5499','5501','5502','5503','5510','5511','5512','5520','5521','5522','5599','5699','5701','5702','5703','5704','5705','5706','5707','5708','5799','5801','5802','5803','5899','5999','6099','6101','6102','6103','6199','6201','6202','6203','6204','6205','6299','6300','6401','6402','6403','6404','6405','6406','6407','6408','6409','6410','6499','7099','7199','7299','7399','8001','8003','8004','8005','8100','8101','8102'

		}},
	
		Tuple{n21:String='MAKCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AAC','AAD','AAI','AAK','AAL','AAM','AAR','AARCO','AAS','ABC','ABD','ABE','ABH','ABM','AC','ACA','ACC','ACH','ACI','ACK','ACL','ACO','ACP','ACS','ACT','ACU','ADA','ADC','ADE','ADL','ADS','ADV','AEC','AEE','AEI','AER','AES','AET','AFF','AFM','AGC','AGL','AGM','AGR','AGS','AGT','AGU','AGW','AHA','AIC','AIE','AII','AIK','AIL','AIM','AIN','AJD','AJO','AKK','AKT','ALA','ALB','ALC','ALD','ALE','ALF','ALL','ALM','ALN','ALP','ALS','ALW','ALX','ALY','AM','AMA','AMC','AMD','AMF','AMH','AMI','AMJ','AMM','AMN','AMP','AMR','AMS','AMT','AMU','AMW','ANC','AND','ANG','ANL','ANO','ANS','ANY','ANZ','AOA','AOC','AOG','APC','APD','APH','APL','APR','APT','ARA','ARB','ARC','ARE','ARF','ARG','ARH','ARI','ARJ','ARK','ARL','ARM','ARN','ARP','ARQ','ARR','ARS','ART','ARU','ARV','ARZ','AS','ASA','ASB','ASC','ASH','ASL','ASM','ASN','ASO','ASP','ASS','AST','AT','ATA','ATC','ATG','ATH','ATL','ATM','ATO','ATR','ATZ','AU','AUA','AUB','AUM','AUO','AUP','AUQ','AUR','AUT','AVC','AVI','AVT','AWA','AWC','AWI','AWS','AX','AXA','AYA','AYG','AYZ','AZA','AZB','AZC','AZI','BA','BAA','BAB','BAC','BAD','BAE','BAF','BAG','BAI','BAK','BAM','BAO','BAS','BAT','BAU','BAW','BAY','BBA','BBC','BBD','BBE','BBN','BCA','BCK','BDA','BDH','BDN','BEA','BEB','BEC','BED','BEE','BEF','BEG','BEI','BEJ','BEK','BEN','BEO','BEQ','BER','BEW','BFA','BFC','BFD','BFF','BG','BH','BHA','BHE','BHI','BHN','BHP','BHT','BII','BIJ','BIT','BIZ','BJA','BJH','BJM','BJO','BJT','BJW','BKG','BKL','BLC','BLD','BLG','BLS','BLU','BM','BMI','BMN','BNA','BND','BNE','BNL','BNM','BNP','BNZ','BOB','BOC','BOH','BOI','BOJ','BOO','BOR','BOS','BOT','BOU','BOX','BOZ','BRA','BRB','BRC','BRF','BRG','BRK','BRL','BRN','BRO','BRP','BRQ','BRT','BRV','BRW','BRX','BRY','BRZ','BSA','BSC','BSF','BSL','BSM','BSP','BSS','BSW','BTA','BTE','BTF','BTM','BTT','BUA','BUC','BUD','BUE','BUG','BUH','BUL','BUO','BUP','BUQ','BUR','BUS','BUT','BUU','BVZ','BW','BWA','BWI','BYC','BZ','BZA','BZD','BZI','CAA','CAC','CAD','CAE','CAF','CAG','CAI','CAL','CAN','CAP','CAR','CAS','CAT','CAU','CAV','CB','CBB','CBC','CBR','CCI','CCO','CDE','CDL','CDM','CEE','CEL','CEM','CES','CET','CFG','CFI','CFR','CGI','CH','CHA','CHB','CHC','CHD','CHE','CHF','CHI','CHK','CHL','CHM','CHN','CHO','CHR','CHS','CHT','CHU','CHW','CHY','CIA','CIE','CIL','CIM','CJA','CJM','CK','CKA','CKW','CLA','CLC','CLD','CLE','CLI','CLK','CLM','CLS','CLT','CLV','CMC','CMF','CMG','CML','CMM','CMR','CMS','CMT','CN','CNC','CNM','CNW','CO','COA','COB','COC','COD','COE','COF','COG','COI','COL','CON','COO','COP','COQ','COS','COT','COV','COW','COX','COY','COZ','CPI','CPK','CPL','CPN','CPT','CQ','CRA','CRE','CRG','CRI','CRM','CRO','CRT','CRU','CRV','CRW','CSB','CSC','CSD','CSF','CSG','CSL','CSP','CSS','CTA','CTC','CTD','CTL','CTR','CTY','CVA','CVR','CWC','CWL','CYS','CZR','CZU','DA','DAA','DAB','DAC','DAD','DAE','DAI','DAK','DAL','DAP','DAR','DAU','DAW','DAX','DAY','DBA','DBS','DCI','DCR','DDE','DEA','DEB','DEC','DEE','DEF','DEG','DEH','DEI','DEK','DEL','DEM','DEN','DEO','DER','DES','DET','DEV','DEX','DEZ','DFC','DIA','DII','DIK','DIN','DIO','DIR','DIS','DIT','DIW','DIX','DK','DKA','DKC','DKI','DLK','DMA','DMO','DMR','DMW','DMX','DND','DNR','DOD','DOK','DOM','DON','DOR','DOS','DOU','DP','DPH','DPM','DRE','DRO','DRU','DRV','DS','DSA','DSC','DSM','DSP','DT','DTC','DTN','DTS','DUC','DUO','DUT','DV','DVL','DVO','DVT','DW','DWA','DWM','DWO','DWP','DYN','EAB','EAE','EAG','EAM','EAR','EAS','EAT','EBM','EBP','ECE','ECL','ECM','ECP','ECR','ECV','ECY','EDM','EDR','EDY','EEA','EFC','EFF','EGL','EGW','EIG','EIN','ELB','ELC','ELE','ELF','ELL','ELP','ELR','ELS','ELY','EM','EMA','EMC','EME','EMF','EMI','EMK','EMP','EN','ENA','ENC','ENF','ENI','ER','ERI','ERL','ERM','ERQ','ERR','ESC','ESE','ESP','ESR','ESX','ETA','ETI','ETL','ETN','ETR','ETU','ETW','EUK','EUM','EUR','EVB','EWB','EXA','EXC','EXE','EXL','EXP','EXR','EXT','FAA','FAB','FAC','FAD','FAE','FAG','FAI','FAJ','FAL','FAM','FAO','FAR','FAS','FAV','FAW','FBA','FBC','FBM','FBN','FBR','FBW','FCL','FCW','FD','FDA','FDL','FDO','FEC','FEE','FEG','FEH','FEI','FEL','FEO','FER','FET','FEU','FFC','FFP','FFV','FGN','FHQ','FI','FIA','FID','FIF','FII','FIM','FIN','FIO','FIP','FIR','FJW','FKA','FLA','FLE','FLG','FLK','FLO','FLR','FLS','FME','FMG','FMJ','FN','FNB','FNH','FNM','FNZ','FOA','FOE','FOI','FOR','FOS','FOX','FOZ','FPT','FRB','FRG','FRI','FRL','FRM','FRN','FRO','FRR','FRT','FRZ','FSM','FSO','FST','FSU','FTB','FTL','FTN','FTP','FTR','FUA','FUL','FUN','FW','FWF','FYR','FZK','GAA','GAB','GAC','GAD','GAE','GAG','GAH','GAN','GAR','GAS','GAT','GAV','GAZ','GBK','GCI','GCL','GCR','GE','GEA','GEC','GEL','GEM','GEN','GEO','GES','GEV','GFC','GFD','GH','GHA','GHM','GIA','GIC','GIL','GIM','GJV','GLA','GLC','GLE','GLI','GLL','GLN','GLX','GLZ','GMA','GMB','GMC','GMM','GMO','GNC','GND','GNO','GOA','GOL','GON','GOR','GRA','GRB','GRC','GRE','GRF','GRG','GRH','GRI','GRL','GRN','GRO','GRP','GRR','GRS','GRT','GRU','GSC','GSE','GSF','GSL','GUC','GUI','GUN','GUR','GUS','GUT','GUW','GUZ','GVL','GW','GWG','GWL','GYM','GZA','HAA','HAB','HAF','HAH','HAI','HAJ','HAL','HAM','HAN','HAO','HAP','HAQ','HAR','HAS','HAT','HAU','HAW','HBG','HCR','HCS','HDD','HDH','HDS','HEA','HEC','HEE','HEG','HEJ','HEM','HEN','HER','HES','HET','HEW','HEY','HEZ','HGW','HH','HHE','HHU','HIB','HIG','HIH','HIP','HIS','HJI','HJJ','HKE','HKI','HKR','HLD','HLL','HLM','HLY','HNI','HNM','HNV','HOA','HOB','HOD','HOF','HOH','HOL','HON','HOS','HOT','HPP','HR','HRC','HRF','HRR','HRT','HS','HSK','HSO','HSP','HTN','HU','HUB','HUG','HUM','HUN','HUS','HV','HWA','HWK','HWP','HY','HYD','HYS','IAB','IAC','IAG','IAI','IAL','IAP','IAR','IBA','IBE','ICE','IDE','IDS','IFA','IGA','IGC','IGD','IGL','IJ','ILJ','ILL','IMB','IMC','IME','IMI','IMP','INA','INC','ING','INH','INO','INR','INS','INT','INV','INY','IOR','IRP','IS','ISA','ISH','ISI','ISL','ISR','IT','ITC','ITD','ITG','ITH','ITM','IW','IZH','JA','JAB','JAE','JAG','JAM','JAN','JAR','JBS','JCH','JCM','JEI','JEN','JFT','JGA','JGT','JHA','JIE','JJC','JKI','JKS','JLD','JMO','JMZ','JNN','JOA','JOH','JON','JOT','JPE','JPF','JPN','JRE','JRW','JSA','JSN','JSS','JTC','JUK','JUS','JWL','KAM','KAP','KAS','KAW','KAZ','KCA','KDF','KDU','KEB','KEC','KEL','KEN','KER','KES','KEY','KFF','KGS','KHN','KHR','KIB','KIE','KIL','KIM','KIR','KJO','KK','KKB','KKC','KKS','KLB','KLG','KLR','KN','KNI','KNR','KO','KOA','KOB','KOD','KOH','KOI','KOK','KOL','KOM','KOO','KOR','KR','KRA','KRB','KRD','KRE','KRI','KRK','KSA','KSI','KSN','KTC','KTG','KTI','KUS','KZL','LA','LAA','LAB','LAC','LAD','LAF','LAM','LAN','LAO','LAP','LAR','LAS','LAT','LAW','LAZ','LB','LBA','LBC','LBI','LBR','LBU','LCN','LCW','LDA','LDY','LEB','LEC','LED','LEE','LEF','LEG','LEH','LEI','LEJ','LEK','LEL','LEM','LEN','LEO','LEP','LEQ','LER','LET','LEU','LEV','LEW','LEX','LEY','LEZ','LFA','LFB','LFS','LGB','LHV','LIA','LIB','LID','LIG','LIM','LIN','LIO','LIP','LIR','LIT','LJA','LJG','LJU','LKE','LLA','LMF','LMI','LMS','LMT','LND','LOB','LOE','LOI','LON','LOR','LOS','LOV','LOW','LOY','LRE','LRN','LRW','LSA','LSC','LSM','LSR','LSS','LST','LT','LTG','LU','LUC','LUE','LUG','LUN','LUR','LUT','LUX','LUZ','LWR','LWT','LYM','LZH','LZL','MAB','MAC','MAD','MAE','MAF','MAG','MAH','MAJ','MAK','MAM','MAN','MAO','MAP','MAR','MAS','MAT','MAU','MAV','MAW','MAX','MAY','MBA','MBB','MBC','MBL','MBR','MCC','MCG','MCH','MCI','MCL','MCM','MCT','MDA','MDF','MDI','MDL','MDM','MDZ','ME','MEA','MEB','MEC','MED','MEE','MEF','MEI','MER','MET','MEU','MEV','MEY','MFA','MGL','MGM','MGN','MGT','MGV','MH','MHG','MHN','MHU','MIA','MIB','MIC','MID','MIE','MIF','MIG','MIH','MII','MIL','MIM','MIR','MIS','MIX','MKA','MKB','MKI','MKS','MKX','MLE','MLT','MM','MMA','MMC','MML','MND','MNG','MNI','MNN','MNS','MNT','MOA','MOB','MOC','MOG','MOM','MON','MOO','MOP','MOR','MOS','MOT','MOV','MOW','MPA','MPC','MRA','MRC','MRE','MRF','MRG','MRI','MRK','MRL','MRM','MRR','MRS','MRX','MS','MSA','MSC','MSI','MSK','MSN','MSP','MSQ','MSS','MT','MTA','MTC','MTH','MTM','MTN','MTR','MTS','MTT','MUC','MUE','MUK','MUL','MVC','MVI','MXW','MYD','MYR','MYS','MZA','MZW','NAA','NAG','NAN','NAS','NAV','NCI','NCM','NCP','NE','NEA','NEB','NEC','NEE','NEF','NEI','NEJ','NEL','NEM','NEN','NEP','NES','NEW','NFA','NHK','NHM','NIT','NIV','NJD','NJK','NMC','NMP','NMR','NOB','NOD','NOH','NOI','NOL','NOM','NON','NOO','NOS','NOT','NOU','NOV','NOW','NOY','NQQ','NRC','NRL','NSC','NSP','NTK','NUM','NVA','NVL','NVS','NW','NWT','NYC','OAC','OAK','OAL','OBE','OBI','OBR','ODC','ODI','OG','OGA','OKC','OLP','OLY','OM','OMC','OME','ONA','OO','OOW','ORB','ORD','ORI','ORM','ORN','ORT','OSC','OSG','OSP','OST','OTE','OTY','OVO','OWA','OWN','OYE','PAA','PAC','PAD','PAF','PAG','PAH','PAI','PAK','PAL','PAM','PAO','PAQ','PAR','PAS','PAW','PAZ','PBY','PCE','PCH','PCI','PCS','PDA','PDI','PEC','PED','PEI','PEL','PEN','PEO','PER','PES','PG','PGI','PGW','PHE','PHR','PIC','PIF','PIK','PIM','PJA','PKI','PKP','PKR','PLA','PLM','PLY','PMC','PMD','PME','PMF','PMR','PN','PNA','PNC','PND','PNY','PO','POC','POD','POF','POH','POI','POM','PON','POS','POT','POW','POX','POY','PPI','PRD','PRE','PRF','PRG','PRL','PRM','PRN','PRO','PRR','PRT','PRZ','PSG','PTF','PUD','PUP','PW','PWA','PZK','QAK','QUA','QUD','RAB','RAC','RAD','RAF','RAM','RAN','RAP','RAR','RAS','RAT','RAV','RAY','RBC','RBF','RBI','RBL','RBR','RBY','RC','RCK','RDK','REA','REC','REE','REI','REJ','REL','REM','REP','RET','REU','REV','REX','RFM','RFY','RGA','RGE','RGI','RGR','RHB','RHI','RHO','RIA','RIC','RID','RIG','RIL','RIO','RJB','RLI','RMA','RMC','RMH','RMM','RMN','RMO','RMP','RMS','RMT','RND','ROB','ROD','ROE','ROF','ROG','ROH','ROI','ROJ','ROK','ROM','RON','ROP','ROR','ROS','ROU','ROV','ROW','ROY','ROZ','RPA','RPB','RPC','RRA','RRC','RRI','RRN','RRT','RSE','RSF','RST','RTA','RTS','RUB','RUP','RUR','RUU','RVL','RWS','RXO','RYA','RYE','RYN','RZI','RZO','SAA','SAB','SAC','SAD','SAE','SAF','SAG','SAH','SAI','SAK','SAM','SAN','SAO','SAP','SAQ','SAR','SAS','SAV','SAX','SAY','SBA','SBI','SBU','SCE','SCF','SCH','SCI','SCK','SCL','SCM','SCN','SCP','SCQ','SCR','SCT','SCU','SCY','SD','SDA','SDG','SDI','SDR','SE','SED','SEJ','SEL','SEM','SEN','SEP','SEQ','SER','SES','SET','SF','SFA','SFF','SFH','SFM','SGA','SGD','SGM','SGR','SGS','SGU','SGW','SHA','SHB','SHC','SHD','SHE','SHF','SHG','SHI','SHK','SHM','SHN','SHP','SHU','SHV','SIA','SIC','SIE','SIG','SII','SIL','SIM','SIN','SIR','SIS','SIT','SIV','SJE','SK','SKB','SKI','SKN','SKO','SKS','SKY','SLA','SLB','SLC','SLF','SLH','SLK','SLM','SLR','SLV','SMA','SMC','SMF','SMG','SMI','SMK','SMM','SMN','SMO','SMP','SMS','SMT','SMZ','SNA','SNB','SND','SNI','SNL','SNM','SNN','SNP','SNT','SNV','SOC','SOD','SOI','SOK','SOL','SON','SOO','SOP','SOS','SOT','SP','SPB','SPC','SPD','SPE','SPF','SPG','SPH','SPI','SPL','SPM','SPO','SPP','SPQ','SPR','SPS','SPW','SPX','SQ','SQB','SR','SRA','SRC','SRD','SRE','SRF','SRI','SRM','SRN','SRQ','SRS','SRV','SSC','SSE','SSG','SSK','SSP','SSS','SSU','ST','STA','STB','STD','STE','STF','STG','STH','STI','STJ','STL','STM','STN','STO','STQ','STR','STT','STU','STV','STW','STX','STY','STZ','SUD','SUI','SUN','SUO','SUP','SUR','SUV','SVI','SVS','SVT','SW','SWD','SWF','SWH','SWL','SWP','SWS','SX','SYC','SYL','SYM','SYR','SYS','SZ','TAC','TAI','TAL','TAP','TAS','TAT','TAW','TBB','TBR','TBS','TCA','TDE','TDI','TDS','TEI','TEN','TEU','TEX','TFG','TGC','TGE','TGG','TGM','TGO','TH','THA','THE','THH','THM','THR','THY','TIC','TII','TIN','TIP','TIS','TIW','TKA','TKK','TLA','TLN','TLR','TLT','TMC','TMP','TNI','TNW','TOB','TOC','TOF','TOI','TOJ','TOL','TOM','TON','TOP','TOR','TOW','TPE','TRA','TRC','TRD','TRE','TRF','TRJ','TRL','TRO','TRQ','TRR','TRS','TRT','TRV','TRW','TRX','TRY','TS','TSA','TSC','TSD','TSE','TSL','TSR','TTI','TTN','TTU','TUA','TUE','TW','TWP','TWR','TY','TYR','UAC','UAE','UBE','UC','UGA','UGB','ULA','ULT','ULY','UMX','UNA','UNC','UNI','UNN','UNS','UNU','UNV','UPD','URE','URG','URI','URK','US','USA','USC','USF','USG','USL','USO','USP','UST','UTI','UWK','UZI','UZU','VAI','VAL','VAM','VAN','VAO','VAR','VAS','VCI','VCL','VCN','VCU','VEA','VEB','VEI','VER','VET','VGA','VII','VIK','VIL','VIO','VIP','VKT','VL','VLC','VLK','VLN','VMH','VNA','VNC','VNT','VOE','VOI','VOL','VOR','VRA','VRM','VRN','VSP','VTO','VTR','VUC','VUR','VVC','WAC','WAE','WAF','WAG','WAL','WAM','WAN','WAO','WAS','WAT','WAU','WBA','WBN','WD','WDM','WE','WEA','WEE','WEF','WEG','WEH','WEI','WEK','WEL','WEM','WEN','WEO','WER','WES','WEV','WFR','WG','WHE','WHI','WHP','WHQ','WHT','WI','WIC','WID','WIF','WII','WIL','WIN','WIP','WIR','WIS','WIT','WIY','WJJ','WKN','WKS','WLC','WLD','WLK','WLM','WLT','WNC','WNK','WNT','WOD','WOE','WOF','WOO','WOR','WRL','WS','WSN','WST','WT','WTP','WTW','WTY','WUR','WW','WWF','WYA','XLC','XPL','XPR','XSD','YA','YAO','YG','YJS','YLZ','YOK','YOR','YOV','YSS','ZAA','ZAB','ZAM','ZAN','ZAP','ZAR','ZAS','ZAV','ZAY','ZB','ZEB','ZEH','ZEL','ZEP','ZLU','ZMW','ZOI','ZOL','ZOU','ZTT','ZUL','ZVI','ZZM'

		}},
	
		Tuple{n21:String='LSTACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AB','AK','AL','AR','AZ','BC','CA','CD','CO','CT','DC','DE','EN','FL','GA','GM','HI','IA','IC','ID','IL','IN','IT','KS','KY','LA','MA','MB','MD','ME','MI','MN','MO','MS','MT','MX','NB','NC','ND','NF','NH','NJ','NK','NM','NS','NT','NV','NY','OH','OK','ON','OR','PA','PE','PQ','PR','RI','SC','SD','SN','TN','TX','US','UT','VA','VI','VT','WA','WI','WV','WY','YT'

		}},
	
		Tuple{n21:String='LISCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AA','AB','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM','AN','AO','AP','AQ','AR','AS','AT','AU','AV','AX','AZ','BA','BB','BC','BD','BE','BF','BG','BH','BI','BJ','BK','BL','BM','BN','BO','BP','BQ','BR','BS','BT','BU','BV','BW','BX','BY','BZ','CA','CB','CC','CD','CE','CF','CG','CH','CI','CJ','CL','CM','CO','CP','CQ','CR','CS','CT','CU','CV','CW','CY','CZ','DA','DB','DC','DD','DE','DF','DG','DH','DI','DJ','DK','DL','DM','DN','DO','DP','DR','DS','DT','DV','DW','EE','EK','EL','EN','EO','ER','ES','ET','EU','EY','EZ','FA','FC','FD','FG','FJ','FL','FN','FO','FP','FR','FS','FX','GA','GB','GC','GD','GE','GF','GG','GI','GJ','GK','GM','GN','GO','GP','GR','GS','GT','GU','GY','GZ','HD','HE','HI','HK','HL','HN','HO','HR','HS','HT','HU','IA','IB','IC','ID','IE','II','IL','IM','IN','IO','IQ','IR','IS','IT','IU','IW','IX','IY','JA','JE','JI','JL','JM','JN','JO','JR','JU','KB','KC','KE','KH','KI','KK','KN','KO','KP','KS','KT','KU','KW','KY','KZ','LA','LB','LC','LD','LE','LF','LH','LI','LL','LN','LO','LP','LS','LT','LU','LX','LY','MA','MB','MC','MD','ME','MF','MG','MH','MI','MJ','MK','ML','MM','MN','MO','MP','MQ','MR','MS','MT','MU','MV','MW','MX','MY','MZ','NA','NB','NC','ND','NE','NF','NG','NH','NI','NJ','NK','NL','NM','NN','NO','NP','NQ','NR','NS','NT','NU','NV','NW','NX','NY','NZ','OA','OC','OF','OG','OH','OI','OK','OM','ON','OO','OR','OS','OT','PA','PB','PC','PD','PE','PF','PG','PI','PK','PL','PM','PN','PO','PQ','PR','PS','PT','PU','PV','PW','QA','QR','QU','RA','RB','RC','RE','RF','RG','RH','RI','RL','RR','RS','RU','RV','RW','RY','SA','SB','SC','SD','SE','SF','SG','SH','SI','SJ','SK','SL','SM','SN','SO','SP','SQ','SR','SS','SU','SV','SW','SY','SZ','TA','TB','TC','TD','TE','TF','TG','TH','TJ','TK','TL','TM','TN','TO','TP','TR','TS','TT','TU','TV','TW','TX','TY','TZ','UC','UG','UK','UM','UR','US','UT','UV','UY','UZ','VA','VB','VC','VI','VL','VT','VV','VY','VZ','WA','WB','WD','WE','WF','WI','WK','WL','WN','WS','WT','WV','WY','XX','YG','YO','YT','YU','YY','ZA','ZB','ZC','ZD','ZI','ZM','ZO','ZR'

		}},

		Tuple{n21:String='IMTCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'B','F','I','M','S','V'

		}},
	
		Tuple{n21:String='EXLCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   '01','02','03','04','05','1','2','3','4','5','A','B','C','D','E'

		}},
	
		Tuple{n21:String='ECRCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
	   'A','B','C','D','E','F','G','H'
	
		}},
	
		Tuple{n21:String='CATCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
   'AB','AC','AD','AE','AG','AI','AL','AN','AP','AS','AT','AU','BA','BB','BC','BE','BF','BH','BK','BL','BM','BO','BQ','BS','BU','BW','BX','CA','CB','CC','CE','CF','CI','CJ','CK','CL','CM','CN','CO','CP','CR','CS','CT','CU','CV','CW','CX','CY','CZ','DA','DF','DH','DK','DL','DO','DR','DT','DU','DV','EN','FA','FB','FC','FD','FE','FF','FG','FI','FK','FL','FM','FN','FO','FP','FS','FU','FW','FX','FZ','GA','GC','GE','GL','GR','GT','GW','GY','HA','HB','HC','HD','HE','HG','HH','HI','HL','HM','HO','HR','HU','HV','HW','HY','HZ','IS','KE','LA','LD','LF','LG','LL','LN','LQ','LR','LS','LT','LV','LW','MA','MI','MN','MR','MW','OB','OD','PA','PB','PD','PF','PH','PL','PO','PP','PT','PU','RA','RB','RC','RD','RE','RF','RI','RK','RM','RO','RP','RQ','RR','RS','RT','RW','SB','SC','SD','SE','SF','SG','SH','SI','SJ','SK','SL','SN','SO','SP','SQ','SR','SS','ST','SV','SX','SY','SZ','TA','TB','TD','TG','TH','TI','TK','TL','TM','TN','TP','TQ','TS','TT','TU','TX','TZ','VB','VG','VL','VP','VR','VS','WD','WE','WF','WH','WI','WL','WN','WR','WS'

		}},
	
		Tuple{n21:String='BTMACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
	   'AAA','AAB','AALI','AAPX','AARD','AATM','AATS','AAWL','AAWS','ABBO','ABC','ABCC','ABCH','ABCO','ABER','ABFI','ABIA','ABTM','ABTR','ACAE','ACCU','ACE','ACEC','ACKN','ACME','ACRO','ACTD','ACTE','ACTO','ADA','ADDI','ADMI','ADMS','ADMT','ADSP','ADVA','AEAG','AELI','AERG','AERI','AGDC','AGRO','AGSY','AGTR','AIRE','AIRF','AIRI','AIRM','AIRP','AIRS','AJAX','AJIN','AJTR','ALAB','ALAD','ALAI','ALAR','ALBE','ALCA','ALCO','ALFB','ALFO','ALJO','ALL','ALLB','ALLC','ALLD','ALLI','ALLK','ALLM','ALLN','ALLO','ALLP','ALLR','ALLT','ALLU','ALLW','ALMC','ALMD','ALME','ALMI','ALMN','ALNM','ALOH','ALPF','ALTC','ALTE','ALUC','ALUM','ALUT','ALYT','AM','AMBA','AMC','AMCM','AMCO','AME','AMEA','AMEB','AMEC','AMED','AMEE','AMEH','AMEI','AMEM','AMEP','AMES','AMET','AMFA','AMHL','AMPC','AMRD','AMRI','AMT','AMTC','AMTS','ANAL','ANCH','ANDE','ANDH','ANDI','ANDM','ANDR','ANDS','ANGE','ANTH','ANTO','AOKT','AONE','APAC','APAE','APAH','APEC','APEX','APLE','APOL','APPA','APPL','AQCR','AQUA','AQUT','ARAB','ARCA','ARCO','ARCT','AREC','ARGS','ARIC','ARII','ARMA','ARMC','ARMH','ARMO','ARMR','ARMT','ARND','ARNT','AROM','AROS','ARRC','ARRM','ARRT','ARRW','ARSN','ARTA','ARTG','ARTH','ARTX','ASBY','ASHD','ASHT','ASI','ASM','ASMT','ASPE','ASPL','ASPT','ASTR','ATHE','ATLA','ATLC','ATLD','ATLN','ATSP','ATTC','ATWO','AUBN','AURO','AUTH','AUTI','AUTM','AVA','AVAC','AVAO','AVCO','AVGN','AVIO','AWAY','AXLE','AYRW','AZAL','AZMF','AZTC','AZTE','AZTX','BABC','BACC','BADG','BAIL','BAKE','BAKI','BALD','BALE','BALI','BALL','BALT','BAME','BAMH','BAND','BANH','BANK','BANN','BARA','BARC','BARE','BARH','BARI','BARK','BARL','BARN','BARO','BART','BASS','BATA','BATM','BAUG','BAY','BBCB','BBCH','BBEE','BBTM','BCMW','BEAC','BEAI','BEAL','BEAN','BEAT','BEAV','BEBO','BEC','BECK','BEDE','BEDX','BEEA','BEEC','BEEE','BEEG','BEEM','BEET','BELA','BELE','BELF','BELH','BELL','BELN','BELP','BELR','BELS','BELT','BELV','BENL','BENS','BERH','BERM','BERT','BETE','BETH','BETT','BFOS','BHNK','BIBB','BIEW','BIGB','BIGH','BIGI','BIGT','BIGV','BILE','BILK','BILL','BILR','BILT','BINK','BINS','BIOT','BIRE','BIRM','BJAA','BJCT','BJEN','BJMC','BJMS','BKDN','BKHM','BLAB','BLAC','BLAE','BLAH','BLAI','BLAK','BLAR','BLAS','BLAW','BLAZ','BLGA','BLIN','BLIT','BLIX','BLKE','BLMT','BLOM','BLOO','BLRG','BLST','BLTR','BLUB','BLUE','BLUG','BLUJ','BMBM','BMMF','BMTR','BNHR','BNST','BOAN','BOAR','BOB','BOBC','BOBK','BOBM','BOCK','BOCS','BOER','BOIS','BOLA','BOLG','BOMA','BOMB','BOMG','BONA','BONC','BONE','BONI','BOON','BORC','BORF','BOTL','BOUL','BOWE','BOWI','BOWM','BOWN','BOWS','BOXR','BOYD','BOYR','BRAC','BRAD','BRAF','BRAN','BRAU','BRAV','BRAW','BRAY','BRCO','BRCT','BRCV','BRDK','BREI','BREN','BRET','BREW','BREZ','BRIE','BRIG','BRIH','BRIO','BRIT','BRKW','BRMR','BRND','BROA','BROB','BROD','BROE','BROH','BROK','BROO','BROR','BROT','BROU','BROW','BROY','BRRO','BRTE','BRTI','BRTO','BRTR','BRUN','BRWD','BSB','BTEC','BUCC','BUCI','BUCK','BUCM','BUCN','BUCO','BUCS','BUDC','BUDD','BUDG','BUDR','BUDS','BUHL','BUIL','BULK','BULL','BULM','BUNT','BUNY','BURC','BURE','BURK','BURL','BURN','BURR','BUSH','BUTE','BUTL','BVCR','BWAY','BWHO','BYER','BYMW','BYRM','BYSN','CACA','CACR','CACV','CADE','CALC','CALD','CALF','CALH','CALI','CALK','CALL','CALN','CALS','CALT','CALU','CALY','CAMA','CAMB','CAMC','CAMD','CAME','CAMF','CAMI','CAML','CAMM','CAMO','CAMP','CAMR','CAMS','CAMT','CAMU','CAMV','CAMY','CAND','CANE','CANG','CANS','CANT','CAPA','CAPC','CAPE','CAPH','CAPI','CAPL','CAPM','CAPT','CARA','CARB','CARC','CARD','CARE','CARF','CARG','CARH','CARI','CARK','CARL','CARM','CARN','CARO','CARR','CARS','CART','CARW','CARY','CASA','CASH','CASR','CAST','CATA','CATI','CATO','CAUL','CAVA','CAVC','CAVE','CAVL','CBCM','CBRA','CBTL','CBUT','CCDI','CCMF','CCTI','CEEZ','CEIQ','CENA','CENI','CENR','CENU','CERT','CEVA','CFBT','CFCH','CGMT','CGXP','CHAC','CHAE','CHAG','CHAH','CHAL','CHAM','CHAR','CHAT','CHEE','CHEN','CHEO','CHEP','CHER','CHES','CHET','CHEX','CHFB','CHIC','CHIE','CHII','CHIL','CHIM','CHIP','CHIS','CHKE','CHKG','CHLG','CHMP','CHNO','CHPL','CHRI','CHRS','CHRV','CHTH','CHTM','CHUK','CHYI','CICC','CIMC','CIMR','CIRC','CIRD','CIRH','CIRK','CIRM','CIRV','CITA','CITY','CIWE','CLAA','CLAB','CLAM','CLAN','CLAR','CLAS','CLAT','CLAX','CLAY','CLAZ','CLCO','CLEG','CLEM','CLIF','CLIH','CLIN','CLIP','CLMB','CLON','CLOU','CLSS','CLST','CLUM','CLVA','CLVR','CMBL','CMCI','CMCO','CMEO','CMFB','CMIL','CMOR','CMPF','CMPS','CMPT','CMSU','CMWC','CNLS','CNMI','CNRD','CNRY','CNST','CNTL','CNTR','CNWD','COAC','COAH','COAM','COAS','COBR','COBU','COCF','CODY','COLE','COLF','COLG','COLO','COLP','COLS','COLT','COLU','COMA','COMC','COME','COMI','COML','COMM','COMN','COMO','COMP','COMR','COMY','CONC','CONE','CONG','CONH','CONI','CONL','CONM','CONP','CONR','CONT','CONV','CONW','CONX','CONZ','COOE','COOK','COON','COOS','COPC','COPP','CORG','CORN','CORO','CORR','CORS','CORT','CORV','CORY','COT','COTT','COUA','COUB','COUI','COUN','COUR','COVE','COWM','COWY','COXS','COYN','COYO','COZA','CPNK','CPTC','CPTN','CPTV','CRAF','CRAM','CRAW','CRCN','CRCO','CREE','CREO','CREQ','CRET','CRFI','CRGK','CRGO','CRGP','CRI','CRIC','CRIM','CRIT','CRKG','CRLY','CRMT','CRNP','CROE','CROH','CROI','CRON','CROR','CROT','CROW','CRRN','CRST','CRUI','CRUM','CRVM','CRWE','CRYS','CSMC','CSMM','CSTL','CSTM','CSTW','CTEC','CTRC','CTRI','CTSI','CUAP','CUAS','CUKE','CUKH','CULL','CULP','CUMB','CURR','CURT','CUSA','CUSB','CUSC','CUSE','CUSF','CUSI','CUSL','CUSM','CUSO','CUST','CVLO','CVWE','CWCF','CWTR','CYCK','DACO','DAFF','DAIR','DAKO','DALI','DALT','DALW','DAMO','DANA','DANB','DAND','DANT','DANZ','DARB','DARC','DARG','DART','DARV','DAVC','DAVD','DAVE','DAVN','DAVO','DAWE','DAWS','DAYS','DBDL','DCCS','DCNT','DCTR','DD','DDFB','DDTI','DEAN','DECA','DEER','DEGE','DEIC','DEKC','DELA','DELH','DELM','DELN','DELP','DELR','DELS','DELT','DELU','DELX','DEMC','DEMM','DEMP','DENC','DENE','DENN','DERE','DERH','DESA','DESG','DESI','DESP','DEST','DETE','DETH','DETI','DEVI','DEVL','DEVN','DEWE','DEWL','DIAB','DIAC','DIAD','DIAG','DIAM','DIAO','DIAS','DICH','DICK','DICO','DIDI','DILL','DILO','DILY','DITC','DITR','DIVE','DIVO','DIXE','DIXI','DLPE','DM','DMHC','DMI','DMVE','DODD','DODE','DOEP','DOLA','DOLI','DONA','DONH','DONL','DONM','DONS','DONU','DOO','DOOL','DOON','DORI','DORS','DOUB','DOUD','DOUE','DOUG','DOUJ','DOWE','DOWH','DPWC','DRAG','DRAK','DRDN','DREA','DRES','DRGL','DRIE','DRIF','DRIV','DRML','DROP','DRSN','DRYD','DSSC','DSWS','DTCH','DTRL','DTRV','DUAE','DUAL','DUDE','DUGA','DUGO','DUKE','DUNB','DUNH','DUNR','DUPA','DUPX','DURB','DURC','DURE','DURO','DUTC','DUTE','DUTT','DWNS','DWTE','DYNC','DYNW','EADU','EAGB','EAGC','EAGE','EAGL','EALO','EARI','EASE','EASM','EAST','EASU','EASW','EASY','EATN','EATR','EBON','ECMY','ECNO','ECOF','ECSA','EDEY','EDWA','EEZY','EHMC','EIDA','EIGH','ELCA','ELCO','ELCT','ELDC','ELDE','ELDO','ELGI','ELIT','ELJA','ELKA','ELKH','ELLI','ELLS','EMBA','EMBB','EMCO','EMER','EMPI','EMPR','ENER','ENGL','ENRT','ENSE','ENTR','ENVA','EQPR','ERCE','EREK','ERIE','ERIN','ERMC','ESCA','ESCO','ESCT','ESQU','ESSI','ESSK','ESTE','ETNY','ETXL','EVAN','EVAP','EVAS','EVEN','EVER','EVIN','EVLT','EXCE','EXCL','EXEC','EXEZ','EXIS','EXPL','EXTL','EXTO','EZAC','EZCK','EZHA','EZLD','EZUT','EZZY','FAAL','FABC','FACT','FAIH','FAIM','FALM','FALN','FARW','FAWN','FAYE','FECH','FEDE','FELD','FELL','FELP','FERE','FERT','FETE','FEYF','FHMC','FIAC','FIBI','FIEA','FIED','FIEL','FIEM','FIES','FIFE','FIGU','FILK','FINN','FIRB','FIRS','FIRT','FISC','FIVE','FIVK','FLAG','FLAI','FLAM','FLAS','FLBR','FLE','FLEA','FLEE','FLEI','FLEM','FLEN','FLIN','FLMG','FLMR','FLNG','FLOA','FLOD','FLOE','FLOI','FLOR','FLOT','FLOW','FLYL','FMSH','FOLA','FOML','FONA','FONT','FOOT','FOR','FORE','FORF','FORG','FORH','FORI','FORL','FORN','FORR','FORS','FORT','FORU','FOSJ','FOST','FOTX','FOUN','FOUR','FOUS','FOUT','FOUW','FOWN','FRAC','FRAI','FRAK','FRCS','FREA','FREE','FREN','FRES','FRHH','FRIE','FROL','FRON','FROS','FRRV','FRUE','FRYE','FSLD','FSTL','FTWD','FULL','FULT','FUNL','FUNT','FUQU','FUTU','GAAC','GABR','GADA','GALA','GALB','GALI','GALT','GARD','GARH','GARO','GARP','GARS','GARY','GATE','GATO','GATP','GCMC','GDAN','GECI','GEEB','GEEC','GEER','GEHL','GELT','GEM','GEMI','GEMT','GEN','GENA','GENC','GENE','GENF','GENG','GENH','GENM','GENT','GEOT','GERA','GERR','GFHT','GFTR','GHIE','GHMI','GIAA','GIAT','GIBL','GIBR','GIDD','GILD','GILM','GILS','GIND','GINR','GIRA','GIVE','GLAD','GLAT','GLCG','GLEB','GLEC','GLEH','GLEL','GLEN','GLFI','GLID','GLIT','GLND','GLNL','GLOB','GLOM','GLOS','GLOV','GLRV','GLSS','GLST','GLWO','GMRE','GNMI','GNSH','GNWF','GOCO','GOEB','GOFF','GOGA','GOGE','GOLA','GOLD','GOLE','GOLK','GOLL','GOLM','GOLN','GONA','GONU','GOOD','GOOS','GOOY','GORB','GORE','GORM','GPRX','GRAB','GRAF','GRAM','GRAV','GREA','GREE','GREG','GREI','GREL','GREN','GRER','GRIZ','GRLK','GRNE','GRNH','GROE','GRSO','GRUM','GSCR','GSEN','GUER','GUID','GULF','GUTH','GWM','GYEL','HACK','HADL','HADX','HAIR','HALC','HALE','HALL','HALN','HALR','HAMB','HAMI','HAML','HAMP','HAMR','HANK','HANO','HAPY','HARB','HARC','HARD','HARF','HARG','HARH','HARI','HARK','HARL','HARM','HARR','HART','HARW','HAUA','HAUI','HAUL','HAUR','HAUT','HAWK','HAWN','HAWT','HAYE','HAYN','HBTC','HDSN','HEAR','HECK','HECO','HEDW','HEIL','HEIT','HELM','HELR','HENE','HENN','HENS','HERB','HERC','HERI','HERO','HERR','HERT','HERZ','HESS','HETG','HEWI','HFTD','HHTC','HI','HIAA','HIBD','HIBT','HICH','HICS','HIDE','HIGA','HIGE','HIGH','HIGK','HIGL','HIGW','HIGY','HIHK','HILB','HILC','HILD','HILF','HILI','HILM','HILO','HILP','HILS','HILT','HIRE','HIST','HITC','HIUT','HIWY','HKEG','HKRY','HLFM','HLPK','HLRI','HLWD','HM','HMDE','HME','HMST','HNLC','HNSO','HOAN','HOBB','HOBO','HODG','HOIN','HOL','HOLE','HOLH','HOLI','HOLL','HOLM','HOLN','HOLO','HOLR','HOLS','HOLT','HOLU','HOLV','HOLW','HOLY','HOLZ','HOMA','HOME','HOMM','HOMS','HONO','HOOP','HOOS','HOP','HOPK','HORI','HORN','HORT','HOUE','HOUF','HOUH','HOWA','HOWD','HOWE','HOWL','HRBN','HRLL','HRRM','HRSE','HRTG','HRTK','HRTL','HRTN','HRTO','HRVY','HSKY','HSMI','HUGH','HULL','HUMS','HUNE','HUNG','HUNM','HURO','HURS','HUSS','HUST','HUTC','HUTR','HWKT','HWMC','HYDE','HYLD','HYLN','HYLT','HYSH','HYST','HYTK','HYTR','IBEN','ICL','IDEC','IDEL','IDLE','IHTM','IJBD','IMCO','IMPA','IMPD','IMPI','INDA','INDE','INDM','INDN','INDU','INGE','INLA','INLI','INMN','INRP','INSL','INTC','INTE','INTG','INTI','INTL','INTM','INTP','INTR','INTS','INTT','INVA','IONI','IPSC','IRBK','IRD','IRDG','ISEI','ITLR','JAC','JACK','JACL','JACS','JACT','JAHN','JALL','JAMA','JAMC','JAMI','JANT','JARC','JASO','JAY','JAYD','JAYK','JAYW','JBEN','JDHS','JECR','JENE','JENN','JERA','JERR','JERS','JERW','JETS','JEWE','JFW','JHNS','JIMA','JIMD','JIMG','JIMS','JIND','JJ','JJJ','JJNE','JJT','JJTM','JLM','JLTL','JMGL','JOBS','JOES','JOEW','JOHN','JOHO','JOHS','JOPL','JORG','JOSH','JOYC','JRMC','JROD','JSMH','JTIL','JUDE','JUNR','JW','JWBC','JWSS','KAL','KALL','KALY','KAMA','KAMP','KANE','KANH','KANZ','KARA','KARD','KARI','KARO','KARR','KARS','KART','KASE','KASS','KAYD','KAYF','KAYO','KAYW','KBAR','KBHC','KEAR','KELE','KELL','KELS','KEMP','KEN','KENC','KENN','KENO','KENT','KENW','KEPT','KERR','KESL','KEYI','KEYO','KEYS','KGHY','KGMF','KIDR','KIEF','KILG','KILL','KINA','KINC','KIND','KINE','KINF','KINS','KIPC','KISM','KIT','KITM','KLAE','KLAS','KLI','KLIN','KLMK','KMAR','KMGI','KMMC','KNC','KNG','KNGH','KNGS','KNLH','KNOW','KNOX','KNTI','KODI','KOFF','KOMC','KOMF','KOMP','KONK','KONT','KORY','KOST','KOTR','KOUN','KOZY','KPRC','KRAE','KRGO','KRIS','KROP','KROS','KROW','KRST','KURM','KUST','KUTZ','KWMH','KWNS','KYRV','LABE','LACR','LACY','LAKE','LAKL','LAN','LANA','LAND','LANE','LANH','LANL','LANM','LANP','LANS','LANT','LAOT','LARA','LARK','LARO','LARS','LASA','LASL','LAWC','LAWN','LAWR','LAYT','LAZJ','LBAU','LBOS','LBT','LBTY','LCRT','LD','LDMS','LDMX','LDTC','LDTL','LEAD','LECH','LEDW','LEE','LEEC','LEEN','LEER','LEES','LEIR','LEIT','LEIU','LELA','LEMC','LENT','LERY','LESR','LEVC','LEWA','LFET','LFTL','LG','LGCH','LGND','LHRN','LIBA','LIBE','LIBH','LIBY','LICH','LICO','LIEB','LIGH','LIGT','LILC','LILZ','LIND','LINF','LINP','LINT','LINV','LINW','LIQU','LISL','LITC','LITD','LITP','LITS','LITT','LKWD','LLOD','LLTR','LMC','LMMC','LNCE','LNCO','LNEW','LNGH','LNRD','LNST','LNWF','LOAD','LOAK','LOCK','LODC','LODE','LODZ','LOGN','LONA','LONB','LONE','LONF','LONH','LONN','LONR','LONT','LOPR','LORK','LOVB','LOWB','LOWE','LOWP','LRNG','LSLN','LSUR','LTCH','LUBB','LUED','LUFK','LUGR','LUND','LUNG','LUVI','LUXO','LUXU','LWLF','LYNC','LYNH','LYNN','MACA','MACC','MACD','MACG','MACL','MACO','MADD','MADR','MAEN','MAGC','MAGI','MAGL','MAGN','MAGO','MAGT','MAHO','MAI','MAIN','MAIR','MAJE','MAJO','MAJR','MAKV','MALH','MALI','MALL','MALO','MANA','MANG','MANK','MANM','MANN','MANO','MANT','MAPL','MARA','MARB','MARF','MARG','MARH','MARI','MARK','MARL','MARN','MARO','MARP','MARQ','MARR','MARS','MART','MARV','MARW','MASC','MASG','MASL','MASR','MASS','MAST','MASV','MATE','MATL','MAUM','MAUR','MAVE','MAXC','MAXE','MAYA','MAYC','MAYF','MBCP','MBIE','MBIL','MCBM','MCCA','MCCB','MCCK','MCCL','MCCM','MCCO','MCCR','MCCY','MCFA','MCKA','MCKT','MCNA','MCNM','MCOL','MCOX','MCOY','MCQU','MCQV','MCRD','MDAM','MDLR','MDST','MDTR','MEAD','MEBT','MECH','MEDA','MEDF','MEDI','MELG','MELO','MENS','MERB','MERH','MERI','MERM','MERR','MERT','MERW','MESA','META','METO','METV','METZ','MFAB','MGM','MGNO','MGOS','MGS','MHEB','MHMC','MICA','MICG','MIDA','MIDD','MIDE','MIDI','MIDL','MIDQ','MIDS','MIDT','MIDW','MIL','MILA','MILC','MILE','MILL','MILT','MILY','MIND','MIT','MITC','MITT','MJCK','MJMT','MLBL','MLLM','MLLR','MLTK','MMMC','MNDI','MNLN','MNRC','MNRO','MNTE','MNTG','MOAL','MOBB','MOBC','MOBF','MOBG','MOBH','MOBJ','MOBK','MOBL','MOBN','MOBO','MOBP','MOBR','MOBS','MOBT','MOBU','MOBV','MOBW','MOBX','MOCA','MOCC','MODH','MODI','MODL','MODN','MODR','MODU','MOHA','MOHO','MOLL','MONB','MONC','MONH','MONI','MONN','MONO','MONS','MONU','MONV','MONW','MOOD','MORI','MORM','MORN','MORS','MORT','MOSE','MOTA','MOTE','MOTR','MOUA','MOUE','MOUM','MOUN','MPC','MRAU','MRED','MRIN','MRIO','MRNE','MRQM','MRRA','MRTI','MRTN','MRTZ','MSI','MSTW','MTCI','MTMV','MTPA','MTRA','MTRY','MTTI','MULE','MULT','MUNC','MURT','MUSG','MUVA','MVEN','MWMC','MWST','MXAT','MYCO','MYWA','NABO','NAMC','NAMO','NASA','NASM','NASU','NATL','NATW','NAVJ','NBAY','NEAL','NEBM','NECT','NEDL','NEHO','NELL','NELN','NELS','NEOS','NEPT','NERC','NEUF','NEVA','NEVD','NEVI','NEVL','NEWC','NEWD','NEWE','NEWH','NEWK','NEWM','NEWN','NEWP','NEWS','NEWT','NHYD','NIAG','NICE','NICK','NICW','NIMR','NOBI','NOBL','NOCO','NODE','NODI','NOEL','NOLE','NOMA','NOMN','NORC','NORD','NORI','NORJ','NORN','NORO','NORR','NORS','NORU','NORV','NORW','NORX','NOTH','NOVA','NRTW','NRVR','NRWD','NRWN','NUCN','NUEL','NULF','NUTT','NUWA','NUWE','NUWH','NWCT','NWMC','OAKC','OASI','OBER','OBRI','OCIM','OCMI','ODOM','ODYS','OELR','OFFC','OFFI','OHIO','OKHT','OKLA','OKLH','OLDT','OLGE','OLSO','OMAH','OMCH','OMCJ','ONEI','ONOI','ONYX','OPNR','OPTI','ORBI','ORCO','OREG','ORIO','ORLA','OSAG','OSBO','OSTD','OTLW','OTTE','OUTD','OVBT','OVEL','OVRL','OWES','OWNA','OWNS','OZAR','PACB','PACC','PACI','PACS','PAGE','PAIN','PAIU','PAKH','PAKM','PALC','PALE','PALM','PALN','PALO','PALW','PAMC','PAMR','PAMU','PANA','PANO','PARC','PARD','PARE','PARH','PARK','PARL','PARM','PARP','PARR','PARS','PARU','PARW','PARX','PASI','PAST','PATH','PAUL','PBTI','PCTL','PDAA','PEAB','PEAK','PECT','PEEK','PELI','PEMB','PEMC','PENC','PEND','PENI','PENN','PENS','PENU','PEQU','PERC','PERF','PERL','PERM','PERO','PERR','PETE','PFAU','PGAS','PGRM','PHAA','PHEL','PHEP','PHII','PHIL','PHIM','PHOE','PICK','PICW','PIED','PIER','PIKE','PILG','PINE','PINS','PIOE','PION','PIPE','PITM','PITZ','PIXI','PJTM','PLAC','PLAG','PLAI','PLAL','PLAM','PLAS','PLAT','PLEA','PLEM','PLES','PLMA','PLTM','PNHL','PNNT','POIE','POLA','POLL','POLR','POND','PONE','POOL','POR','PORD','PORE','PORK','PORT','POWE','PRAM','PRAR','PRAT','PREB','PREC','PREI','PREM','PRES','PREV','PREW','PRHT','PRIC','PRIN','PRIO','PRIV','PRKA','PRLT','PRMC','PROG','PROL','PRON','PROT','PROW','PRST','PRTG','PRTN','PRTT','PTRK','PTRT','PUCK','PULL','PUMA','PUZE','PWTC','PWTR','PYLE','PYRA','QE','QLTY','QUAK','QUAL','QUIC','QUIK','QUTY','RACH','RACM','RADC','RADE','RAES','RAIB','RAIC','RAIN','RALL','RAMA','RAMN','RAMP','RAMR','RANA','RANC','RAND','RANE','RANH','RAPI','RAPS','RATC','RAVE','RAW','RAYC','RAYI','RAYM','RAYN','RBYD','RCHS','RCIN','RCKN','RCLP','RCON','RDGL','RDKG','REA','READ','REAL','REBE','REBL','RECB','RECG','RECS','REDA','REDD','REDG','REDM','REDR','REDS','REED','REEG','REEL','REEV','REGE','REGI','REID','REIN','RELB','RELC','RELI','RELM','RELT','REMB','REMC','REMI','REMK','REMQ','RENT','RETT','REVE','REXM','REYN','RFCM','RGAA','RHEA','RHNO','RICD','RICH','RICK','RICL','RICN','RIDE','RIDG','RIGH','RIIN','RIME','RING','RINK','RIPC','RITB','RITE','RITT','RITZ','RIVE','RIVN','RIVR','RIVS','RIVT','RIVU','RIVW','RLAC','RLST','RMWC','RNCE','RNKE','ROAC','ROAE','ROAF','ROAG','ROAL','ROAM','ROBB','ROBI','ROBR','ROBT','ROCB','ROCE','ROCK','ROCM','ROCN','ROCS','ROCT','ROGE','ROGR','ROGU','ROKW','ROLC','ROLH','ROLI','ROLM','ROLP','ROLR','ROLS','ROMA','RONC','RONS','ROOF','ROOS','RORA','ROSC','ROSE','ROSS','ROTI','ROTO','ROUL','ROUS','ROV','ROYA','ROYC','ROYF','ROYH','ROYL','ROYS','RRAA','RRMA','RRNR','RSTB','RTRR','RUCH','RUII','RUNA','RUSE','RUSH','RUSO','RUSS','RUST','RVIS','RVKO','RVOK','RVTI','RWMI','RYAN','RYDR','RZRB','SABQ','SAFA','SAFE','SAGE','SAHA','SAIC','SAIJ','SALE','SALI','SALV','SAMP','SAMS','SAND','SANI','SANK','SANL','SANP','SANR','SARC','SATU','SAUB','SAVA','SAVN','SBRT','SBTT','SCAD','SCAP','SCEN','SCEP','SCHA','SCHD','SCHE','SCHF','SCHI','SCHK','SCHL','SCHM','SCHN','SCHR','SCHT','SCHU','SCHW','SCIT','SCMP','SCOC','SCOM','SCOR','SCTB','SCTI','SCUL','SEAB','SEAC','SEAL','SEAM','SEAR','SEAS','SEAW','SECO','SECU','SEEM','SEID','SELB','SELM','SELO','SELR','SELY','SEMC','SEMN','SENO','SEOV','SERR','SEWR','SHAC','SHAM','SHAR','SHAS','SHAW','SHBA','SHDO','SHEL','SHEM','SHER','SHIB','SHIL','SHIM','SHIP','SHIV','SHOM','SHOO','SHOP','SHOW','SHSY','SHTR','SHWM','SIEA','SIEB','SIEM','SIER','SIGA','SIGN','SILC','SILE','SILL','SILV','SIME','SIMN','SIMO','SIMT','SIMW','SING','SIST','SISU','SIXP','SKAM','SKIK','SKIM','SKIP','SKIT','SKMD','SKPP','SKYC','SKYH','SKYI','SKYL','SLOA','SLPE','SMAR','SMIH','SMIR','SMOK','SMPI','SMTC','SMTS','SMWD','SMYD','SNAT','SNBO','SNBR','SNBT','SNDP','SNFL','SNLT','SNOB','SNOE','SNRG','SNRZ','SNTA','SNTR','SNTT','SNUB','SNWB','SNWC','SNYD','SOCI','SOCT','SODE','SOL','SOLS','SOND','SOON','SOPK','SOSL','SOTH','SOUD','SOUE','SOUH','SOUT','SOUW','SPAC','SPAE','SPAH','SPAT','SPCE','SPCT','SPEA','SPEE','SPEL','SPEM','SPEN','SPEP','SPHL','SPLT','SPMN','SPOC','SPOK','SPOM','SPON','SPOS','SPPR','SPRA','SPRI','SPRM','SPRN','SPRO','SPRR','SPRS','SPTL','SPTM','SPTR','SQUI','SSTL','STAA','STAC','STAD','STAF','STAG','STAL','STAM','STAN','STAP','STAS','STAV','STAW','STAX','STCC','STCR','STEA','STEC','STEE','STEG','STEM','STEO','STEP','STET','STEU','STID','STIL','STLN','STLO','STMC','STOC','STOD','STOL','STON','STOP','STOT','STOU','STPH','STRB','STRC','STRD','STRE','STRH','STRI','STRK','STRL','STTT','STUA','SUBL','SUBT','SUGG','SUMT','SUNH','SUNI','SUNL','SUNM','SUNN','SUNO','SUNR','SUNS','SUNT','SUNV','SUNW','SUPI','SUPM','SUPR','SURE','SURF','SUSQ','SVCH','SVTR','SWAE','SWAN','SWEM','SWGN','SWIS','SWNG','SWNS','SWXP','SYCA','SYLV','TACO','TACR','TADN','TAGA','TAHI','TAIL','TALB','TALM','TAND','TANK','TANM','TANN','TANO','TARA','TARG','TART','TASP','TAUB','TAWA','TAYL','TBC','TBCT','TCI','TCRW','TEAR','TEC','TEEH','TEEN','TEJA','TELS','TEMK','TENN','TEPE','TERA','TERF','TERS','TESC','TETO','TEXA','TEXK','TEXL','TEXS','TFLG','TGRL','THAT','THBT','THEU','THGH','THIE','THII','THIL','THIM','THMP','THOA','THOC','THOE','THOM','THON','THOR','THRC','THRE','THRM','THRU','THUN','TIAK','TIAR','TIBR','TIDE','TIDW','TIFF','TIGE','TILT','TIMB','TIME','TIMK','TIMP','TINK','TIST','TITA','TITL','TJJJ','TKNG','TLMC','TLT','TLTM','TLTR','TMBL','TMBW','TMCI','TMMI','TMTL','TMTR','TNSC','TNTL','TODC','TODD','TOGO','TOHO','TOKE','TONC','TOPB','TOPC','TOPK','TOPP','TOPT','TORC','TORI','TOTA','TOTC','TOTE','TOTM','TOUA','TOUR','TOWC','TOWD','TOWL','TOWN','TOWP','TOWR','TOYO','TPHT','TPLN','TQAA','TRAA','TRAC','TRAD','TRAE','TRAF','TRAG','TRAH','TRAI','TRAJ','TRAK','TRAL','TRAM','TRAN','TRAO','TRAP','TRAQ','TRAR','TRAS','TRAU','TRAW','TRAY','TRAZ','TRBA','TRBB','TRBC','TRBD','TRBE','TRBF','TRBL','TRBO','TRCC','TRCF','TRCO','TRCP','TREA','TREC','TREK','TRET','TREX','TRFR','TRHM','TRI','TRIA','TRIB','TRIG','TRIL','TRIM','TRIN','TRIP','TRIS','TRIT','TRIV','TRIW','TRKG','TRKM','TRLC','TRLE','TRLI','TRLK','TRLL','TRLM','TRLN','TRLO','TRLP','TRLR','TRMB','TRMC','TRMI','TRMR','TRNS','TRNT','TROH','TROJ','TROM','TROP','TROQ','TROT','TROU','TROX','TROY','TRPH','TRPR','TRQU','TRRI','TRRR','TRRT','TRRY','TRSG','TRSM','TRST','TRSU','TRSY','TRTC','TRTL','TRTN','TRTR','TRTT','TRUC','TRUE','TRUT','TRVC','TRVE','TRVL','TRVO','TRVR','TRVS','TRWD','TSTL','TTMC','TTMI','TTSI','TTTI','TTTR','TUBO','TUCE','TUCR','TUFB','TUFC','TUFF','TUFN','TUFT','TUKA','TWEN','TWFC','TWIC','TWIG','TWIL','TWIN','TWIT','TWMI','TWRT','TXTT','TYBE','TYCB','TYLE','TYSO','UHAU','ULTI','ULTR','UNEX','UNIA','UNID','UNIE','UNII','UNIL','UNIM','UNIO','UNIR','UNIS','UNIT','UNIV','UNVE','UNVT','URIL','USAC','USAV','USCW','USTS','UTBC','UTE','UTHM','UTIL','UTOP','VACA','VACD','VACG','VACT','VADA','VADO','VAGA','VALA','VALC','VALL','VALY','VANA','VANB','VANC','VANO','VANP','VANR','VANS','VAQU','VCAT','VEGA','VENC','VENT','VERN','VERT','VESE','VET','VHMC','VICH','VICO','VICR','VIKI','VIND','VINT','VIRG','VIRI','VISC','VISQ','VIST','VITO','VIVI','VLLA','VM','VNGM','VNTC','VNTG','VNTU','VOLU','VOUG','VRMO','VRSA','VSTA','VTNR','VULC','VW','VWTC','WADE','WAGC','WAGM','WAGO','WAGT','WALE','WALH','WALK','WALL','WALM','WALR','WANA','WANC','WAND','WANE','WARD','WARH','WARI','WARM','WARR','WAST','WATR','WATS','WATT','WAYF','WAYM','WAYP','WAYS','WCMS','WDMZ','WEAV','WEBE','WECR','WEDG','WEEK','WEER','WEHL','WEIE','WELB','WELC','WELD','WELL','WEMA','WERG','WERN','WERT','WESC','WESD','WESE','WESH','WESI','WESL','WESM','WESN','WESR','WESS','WEST','WFMI','WHEL','WHES','WHHA','WHIA','WHIE','WHIT','WHIY','WHKA','WHLE','WHSP','WICH','WICK','WICT','WIGA','WILA','WILC','WILD','WILK','WILM','WILO','WILR','WILW','WILX','WILY','WILZ','WINE','WING','WINI','WINN','WINP','WINS','WINT','WISC','WISD','WISG','WISH','WISO','WITA','WIZA','WLDE','WLDT','WLTR','WLWE','WMEI','WOLF','WOLM','WOLV','WOND','WOOA','WOOM','WOON','WOOS','WORH','WORK','WORL','WORR','WPAR','WRAG','WRAN','WRIG','WRIH','WRLD','WSBT','WSID','WSTI','WSTX','WTCI','WTKI','WTMI','WTTS','WTWI','WTZR','WW','WWEK','WWTH','WWTM','WWWH','WYDR','WYFR','WYLI','WYNN','WYNO','XCEL','XLST','XPLO','XTRA','XYZ','YACH','YADR','YAGE','YAMP','YANG','YARB','YAZO','YELL','YENT','YORK','YOUN','YSOB','YUCH','YUKO','YWAA','ZIEG','ZIEM','ZIMM','ZIPP','ZMMN','ZOLL'
	
		}},
		Tuple{n21:String='BRACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{

   'AAVH','ACGC','AIRT','ALAC','ALAN','ALTK','AMCM','AMHL','AMLF','AOKT','AQUB','ARCT','ARGG','ARNL','ARTX','ASEC','AVNT','BAMC','BAYM','BEEI','BEIL','BERE','BGCH','BIBK','BIGB','BIGF','BIMT','BLIZ','BLMT','BLRT','BMEQ','BMMM','BMPC','BMPR','BMW','BODZ','BOER','BRAY','BRGV','BRMR','BRRN','BRSW','BRWD','BSEA','BUIC','BULR','BWCT','BYRD','BYSN','CANV','CAT','CATC','CERF','CFHG','CHEV','CHMI','CHMT','CHRC','CHRM','CHUB','CHUC','CIRR','CLIT','CLND','CLOV','CLSS','CMFB','CMMS','CNCG','COT','CPIU','CRCO','CRFI','CRLS','CRRV','CRSN','CRUG','CRWN','CRYO','CSTM','CTRC','CTTM','CUBT','CVCO','CWJT','CWTE','DANC','DATS','DAZN','DELK','DESP','DETR','DETT','DEXT','DMBT','DMFT','DNPR','DPWC','DROP','DSPD','DTIN','DUPN','DWTE','DXIE','DYEC','DYST','EATO','EBUS','ECHE','ECOH','EGLR','EHWA','ELGI','ELKR','ELOM','ELWN','EMAX','ENGN','ENMC','EONE','EPCC','EQPR','ESKA','ETXL','EVIN','EVNI','EVSI','EVTX','EXCN','EXTR','EZDU','FARY','FATC','FISK','FLGS','FORD','FRIN','FRRA','FRRS','FWTI','FXBB','GALE','GENU','GGMA','GLCG','GLDV','GLRD','GLUT','GMC','GOAT','GOEV','GRAY','HABN','HARB','HETG','HFTY','HGRV','HIGC','HIVW','HLME','HMCC','HOND','HRIG','HSTR','IKAR','INFY','INPX','INTG','INTL','ISU','ITNL','JACB','JAKL','JHWE','JIAL','JIEE','JLGI','JOPR','JOTO','JPME','JPUT','JRDN','JZRC','KAWK','KAZU','KCCF','KEVC','KIEK','KINL','KINZ','KIOT','KNBR','KNLH','KNXM','KRUZ','KTMX','KVCH','LACC','LCIN','LDMX','LEEB','LEHM','LENT','LESA','LGK','LGLX','LIPP','LNDN','LNGH','LOGI','LOMC','LONC','LOUD','LYCO','MADS','MAEN','MAXP','MCCU','MCYM','MEYR','MICW','MIMI','MIN','MKEE','MLNG','MMCO','MPHY','MQPW','MRCM','MRCT','MRNI','MROB','MTRG','MTTI','MTUA','MWCH','MYTE','NABI','NERA','NEVI','NFLY','NHGT','NHRZ','NISS','NOVB','NULF','NVAE','NWEC','OCCH','ODEL','OLDS','OLYP','OMC','OMCD','OMCJ','OMCP','OMNI','ONAN','OPTI','OSCO','PADC','PADG','PARA','PART','PATF','PENN','PERK','PFAP','PGRM','PLEN','PLMI','PNTA','POPC','PPN','PRAE','PRCW','PRDE','PROP','PULD','PULP','QINJ','QSAP','QVAL','RANG','RCCM','REDC','REMO','RENA','RHNO','RIVC','RKTA','RNMT','RNSM','RNSP','ROAR','ROYG','RRSC','RTRR','RUCK','SABB','SCOE','SCTA','SCTC','SEAR','SECI','SEMO','SHAK','SHAN','SHGO','SHWI','SKTM','SKYJ','SMEA','SMMO','SMRT','SMTS','SNAK','SNLG','SOPK','SPLZ','SPMC','SPYK','STLE','STPK','STST','STTR','STWS','SUMI','SUZI','SVAC','SVCC','SVCH','SWIF','TAIZ','TCRW','TDVL','TECM','TETT','THER','THND','THOC','THUL','TIX','TLCC','TNKC','TOTL','TRDE','TRMN','TRTQ','TRUW','TTIN','TTRN','TWND','TWRI','TXMX','TYLM','UBUS','UMOG','UNMM','UNMO','UNVT','VACN','VEEN','VENG','VNTC','VOLO','VOLP','VTEC','WACH','WAMA','WARD','WARN','WEBK','WEGC','WHKE','WHTN','WIBH','WILF','WIZA','WLCH','WLKR','WSTN','WTMM','WTXD','XKEL','YAMA','YAMT','YANM','ZAPP','ZELI','ZETR','ZHEJ','ZLMC','ZLMI','ZONG'
			
		}},
		Tuple{n21:String='BMACodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{
		'AAA','AAI','AAK','AAL','AAN','AAV','AAY','ABM','ABW','ACB','ACF','ACH','ACL','ACM','ACT','ACW','ADD','ADK','ADL','ADO','AEC','AEG','AEQ','AER','AFC','AFD','AFF','AFG','AGB','AGC','AGH','AGR','AHE','AHN','AHQ','AIL','AIW','AKD','AKG','AKR','AKZ','ALD','ALL','ALS','ALT','ALX','ALZ','AMF','AMQ','AMS','AMX','ANF','ANG','ANP','ANT','AOD','AOL','APB','APG','APH','API','APL','AQC','ARI','ARJ','ARK','ARR','ARV','ARW','ARZ','ASG','ASH','ASK','ASM','ASP','ASR','AST','ATJ','ATL','ATM','ATQ','ATZ','AVA','AVB','AVC','AVI','AVN','AVP','AVY','AWB','AWL','AXC','AXE','AXT','AYR','AZA','AZZ','BAH','BAM','BAQ','BAR','BAS','BBK','BBQ','BBU','BCB','BCC','BCF','BCF1','BCM','BCP','BCT','BCZ','BDB','BDG','BEB','BEC','BEH','BEJ','BEM','BER','BEZ','BFF','BFG','BFI','BFP','BHD','BHS','BIA','BID','BIQ','BJC','BKH','BKT','BL1','BL2','BL3','BL4','BL5','BLB','BLP','BLS','BLY','BMH','BMR','BNB','BNE','BNL','BNM','BNR','BNS','BNT','BNU','BNV','BNZ','BOO','BOT','BPC','BRA','BRB','BRC','BRCV','BRD','BRO','BRR','BRS','BRU','BRW','BSD','BSM','BSV','BTD','BTE','BTR','BUG','BUJ','BUU','BVD','BVM','BWB','BWC','BWH','BWR','BWV','BWY','BWZ','BXE','BXJ','BYN','BZA','BZI','CAB','CAL','CAR','CAT','CAU','CBA','CBC','CBM','CBT','CBW','CBZ','CCA','CCB','CCC','CCD','CCF','CCH','CCK','CCM','CCN','CCNE','CCR','CCT','CCU','CCV','CCX','CCY','CDC','CDR','CEB','CED','CEE','CEH','CEM','CFD','CFS','CFT','CFY','CFZ','CGF','CGH','CGL','CGM','CHE','CHJ','CHK','CHM','CHT','CIK','CJC','CJK','CJM','CJR','CKB','CKL','CKP','CLA','CLD','CLK','CLM','CLZ','CMA','CMN','CMO','CMP','CNE','CNH','CNO','CNP','CNT','COB','COJ','CON','COO','COT','COY','CP2','CPG','CPS','CQK','CQU','CRJ','CRL','CRO','CRS','CRT','CRW','CSB','CST','CTC','CTL','CTY','CTZ','CUA','CUB','CUC','CUE','CUO','CUP','CUS','CUY','CVB','CVO','CWJ','CWX','CXN','CXR','CYG','CYV','CZB','DAA','DAQ','DAW','DBJ','DBW','DCB','DCF','DCH','DCI','DCJ','DCZ','DDQ','DDX','DED','DEL','DEM','DES','DEV','DFG','DFL','DFM','DFP','DFV','DID','DLI','DLK','DLN','DLZ','DMB','DMC','DMH','DMN','DMP','DMR','DNC','DNU','DNX','DOR','DPD','DQU','DRE','DRM','DRU','DSC','DSN','DST','DTN','DUR','DUS','DUT','DUW','DUX','DUY','DVD','DVN','DWD','DWE','DWE2','DXA','DXD','DXE','DXF','DXM','DYB','DYE','EAK','EBA','EBK','EBV','ECB','ECX','EFJ','EGG','EGM','EHT','EKW','ELB','ELD','ELE','ELG','ELH','ELX','EMD','EMH','EMO','ENB','ENN','EPB','ERF','ERY','ESK','ESM','ESN','ETC','ETF','ETK','ETW','ETY','EVN','EWC','EWV','EXH','EXT','EXU','EXV','EZR','FAA','FAB','FAN','FAV','FBB','FBC','FBE','FBF','FBG','FBK','FBN','FBQ','FBT','FCL','FCN','FCP','FCS','FDX','FEA','FFG','FFL','FGB','FGD','FGE','FGQ','FHS','FIA','FIN','FIW','FLB','FLD','FLI','FLQ','FLZ','FMC','FMS','FMY','FNQ','FPK','FPY','FRI','FRK','FRV','FSC','FSF','FSH','FSJ','FSM','FSO','FUR','FWM','FWN','FWZ','GAB','GAE','GAG','GAL','GAT','GAW','GAZ','GBC','GBF','GBM','GBN','GBP','GBW','GCV','GDV','GDY','GEB','GEN','GEN1','GGA','GGB','GHE','GIG','GLA','GLF','GLS','GLX','GMA','GME','GOF','GPC','GPD','GPE','GPG','GPL','GPP','GPW','GPZ','GRJ','GSD','GSF','GSW','GSY','GTX','GUF','GUM','GWC','GWD','HAB','HAF','HAL','HAN','HAO','HAT','HAZ','HBG','HBU','HBW','HBY','HCB','HDH','HER','HEW','HFB','HGG','HGZ','HIF','HII','HIN','HIP','HKN','HKW','HLK','HLR','HMC','HMD','HMJ','HMW','HND','HNK','HNS','HOG','HOI','HPL','HPY','HSB','HSI','HSL','HSP','HST','HSX','HTB','HUB','HUL','HUP','HUR','HUS','HUU','HUX','HVC','HVM','HWE','HYD','HZL','IAS','IAZ','IDZ','IGN','ILZ','INO','INZ','ITC','JAB','JAJ','JAY','JBC','JBE','JBL','JBN','JBX','JCE','JCL','JCM','JCY','JDB','JDJ','JEA','JEB','JET','JFG','JHR','JIB','JIS','JJJ','JJK','JNB','JNC','JRH','JRS','JRY','JSB','JSC','JTA','JTB','JTC','JVS','KAB','KAJ','KAN','KAW','KAX','KAY','KAZ','KBM','KBT','KBW','KCK','KEN','KFB','KFD','KFL','KGR','KKC','KKF','KLA','KLI','KLO','KME','KMP','KNC','KNG','KOO','KPB','KRA','KRC','KRG','KRU','KST','KVA','KVH','KWE','KYZ','LAE','LAR','LAY','LAZ','LBC','LBD','LBL','LBO','LBV','LCB','LCN','LCR','LCX','LEJ','LEL','LES','LFP','LGK','LHR','LII','LLT','LMA','LMK','LML','LMM','LNC','LNM','LNS','LPB','LPM','LPR','LSX','LTB','LTF','LTT','LUG','LUN','LUX','LWN','LYN','MAC','MAD','MAG','MAK','MAU','MAX','MAZ','MB2','MBC','MBD','MBE','MBG','MBJ','MBK','MBP','MBV','MC2','MCC','MCD','MCH','MCS','MCX','MCZ','MDT','MDZ','MEY','MEZ','MFG','MFJ','MFL','MFN','MFP','MFS','MFS1','MGE','MGI','MGK','MGM','MGW','MGZ','MHA','MHP','MHV','MIB','MIJ','MIS','MISC','MIZ','MJC','MJI','MJK','MKC','MKE','MKH','MKS','MMB','MML','MMM','MMN','MMP','MMS','MMY','MNB','MNJ','MNL','MNN','MNT','MNX','MNZ','MOD','MOH','MOK','MOM','MOS','MOU','MOV','MOZ','MPB','MPD','MPH','MPM','MQW','MRB','MRE','MRG','MRH','MRJ','MRK','MRR','MRX','MRY','MSC','MSZ','MTC','MTM','MTW','MTZ','MVH','MVI','MVR','MWE','MWK','MXJ','MXU','MYD','MYW','NAB','NAD','NAP','NBA','NBC','NBO','NBS','NBZ','NCZ','NDC','NDZ','NEG','NER','NEW','NFZ','NHZ','NIS','NJZ','NMC','NMF','NMR','NMS','NMZ','NNA','NOR','NPC','NPR','NTL','NUM','NVY','NVZ','NWD','NWN','NYZ','OBI','OBR','OCB','OFF','OFS','OHZ','OKZ','OMB','OMM','ORC','ORZ','OSB','OTC','OYI','PAC','PAP','PAX','PAZ','PCG','PCH','PCM','PCW','PDC','PDL','PEA','PER','PEV','PFD','PFS','PGI','PGR','PGS','PHB','PHU','PHV','PHX','PIO','PIR','PKA','PKD','PKM','PLC','PLD','PLE','PLF','PLR','PME','PMR','PNS','PNT','PNY','POV','PPB','PPE','PPJ','PPN','PPY','PQC','PRG','PRN','PRO','PRX','PSD','PSL','PTJ','PVT','PWB','PWL','PWN','PWR','PWS','PXM','PYB','PYH','QDQ','QLS','QNK','QSR','QZT','RA1','RAL','RAN','RAS','RBD','RBM','RCB','RCH','RCT','RCY','RDA','RDJ','REG','REN','RFD','RFG','RFO','RFR','RGF','RGH','RGI','RGL','RGM','RGN','RGP','RHE','RHT','RHY','RIF','RIV','RIZ','RJA','RJS','RKO','RLS','RLY','RNF','RNG','RNK','RQA','RQE','RRB','RRH','RRS','RSB','RSD','RSE','RTN','RTR','RUF','RVF','RVG','RVJ','RVK','RVP','RVR','RXN','RXO','RYY','RZD','RZJ','RZT','SAB','SAG','SAL','SAN','SAV','SAW','SAZ','SB2','SBC','SBI','SBM','SBQ','SBT','SBW','SBY','SCC','SCF','SCN','SCN1','SCO','SCP','SCR','SCS','SCT','SCZ','SDA','SDB','SDD','SDJ','SDZ','SEA','SEC','SEE','SEI','SEJ','SEK','SEN','SER','SES','SEV','SEZ','SFI','SFQ','SFS','SGA','SGN','SGP','SGZ','SHA','SHU','SIC','SIJ','SIN','SIT','SIZ','SJC','SJN','SJR','SKB','SKJ','SKM','SLB','SLC','SLE','SLK','SLP','SLS','SLV','SMD','SMK','SMT','SNA','SNF','SNT','SNX','SOE','SOM','SOP','SP3','SPA','SPE','SPR','SPT','SPU','SPX','SRC','SRF','SRK','SRN','SRS','SRW','SSB','SSM','SSR','SST','SSU','STA','STE','STF','STM','STN','STR','SUE','SUN','SUR','SUT','SVU','SWE','SWL','SWM','SWT','SWX','SXE','SXJ','SXL','SXO','SXV','SYB','SYK','SYL','SYX','SZA','SZG','SZX','TAA','TAH','TAJ','TAY','TAZ','TBA','TBB','TBH','TBI','TCB','TCT','TCZ','TDA','TDC','TDP','TDS','TEJ','TER','TGF','TGO','THB','THD','THE','TIG','TII','TIK','TIX','TKB','TKF','TLE','TLY','TMC','TMD','TMH','TML','TMO','TMR','TMS','TN1','TNA','TNR','TNV','TNZ','TOR','TOU','TOY','TPC','TPI','TPL','TPP','TRA','TRI','TRJ','TRR','TRS','TRT','TRV','TSA','TSB','TSP','TSW','TTP','TTS','TTS2','TUF','TUR','TXZ','TYA','TYR','TYS','TZM','UBM','UDC','UMC','UNF','USA','USH','USJ','UTZ','VAB','VAG','VAM','VAZ','VBC','VCL','VIC','VKB','VKP','VKX','VLS','VLT','VNB','VNG','VOY','VSM','VTZ','VVN','VVV','VXP','VXX','VYN','WAC','WAG','WAJ','WAZ','WB2','WBB','WBC','WBD','WCH','WCW','WDB','WDC','WDN','WDS','WDT','WEB','WEL','WEM','WEN','WES','WET','WFF','WFP','WFX','WGN','WHB','WHO','WHT','WII','WIJ','WIL','WIN','WJI','WJW','WKG','WKM','WKY','WLB','WLR','WLT','WLZ','WMB','WMP','WMQ','WNB','WNP','WNR','WNZ','WOL','WPC','WPP','WPQ','WRA','WRN','WRS','WSE','WSF','WSH','WSP','WST','WSW','WSZ','WTE','WTU','WVZ','WXH','WYK','WYM','WYR','WYZ','WZR','XAA','XAG','XAM','XAN','XBD','XBQ','XBW','XCA','XCI','XCM','XCS','XDC','XDY','XEC','XEP','XET','XFE','XFR','XHC','XKA','XKB','XKX','XLD','XLM','XLR','XLY','XMA','XMG','XMP','XMR','XNA','XNP','XOE','XPK','XRR','XSA','XSB','XSF','XSW','XTB','XTC','XTG','XTL','XUE','XUS','XVA','XWC','XYM','XYV','XYX','YAM','YAMA','YAR','YAT','YHN','YOC','YSI','YUK','ZAS','ZBI','ZCB','ZED','ZEF','ZEP','ZEX','ZFS','ZHA','ZHW','ZJX','ZKA','ZLJ','ZLT','ZMR','ZNA','ZPT','ZWO','ZYR','ZZA','ZZG','ZZM','ZZN'
		}},
		Tuple{n21:String='ImmigrationClassOfAdmissionCategoryCodeSimpleType',n21namespace:String=niem21_im_URI,literals:Sequence(String)=Sequence{'SI8'}},
		Tuple{n21:String='InternationalStateCodeSimpleType',n21namespace:String=niem21_fips_10_4_URI,literals:Sequence(String)=Sequence{
			'TU27','UK35','EN10','UK58','GG20','BG25','BG22','ID27','GG05','UK09','BE06','MK05',
			'LI07', 'KU01', 'RPG4', 'BG36', 'BG70', 'UK24', 'MKA7', 'UG65', 'BG67', 'GG58', 'RSCI', 'MKB9', 'BG50', 'MK09', 'UK16', 'GG37', 'RP32', 'MK38', 'PF99', 'BG29', 'GG44', 'BY02', 'MK31', 'MK82', 'VM48', 'MK07', 'DA06', 'MU05', 'UK37', 'BG39', 'UK66', 'GG55', 'BE03', 'BA02', 'UK73', 'UG21', 'BA11', 'UK10', 'UK39', 'UK63', 'NL12', 'KN08', 'UK40', 'UG78', 'TC07', 'SW11', 'UK30', 'BKBD', 'BG61', 'CH27', 'BG44', 'MK66', 'CE04', 'CE27', 'UK72', 'TC02', 'KU06', 'AL16', 'PG0Z', 'BG33', 'GG14', 'BG31', 'MK91', 'SA09', 'SW01', 'MKB2', 'GG38', 'TC05', 'CE28', 'AL22', 'BG48', 'AL08', 'AN01', 'BG78', 'BA12', 'GG46', 'CI13', 'UG52', 'UK07', 'BA03', 'TU18', 'UK26', 'BG57', 'RPG6', 'UK54', 'CE24', 'MK50', 'MK63', 'SW13', 'UK69', 'MG22', 'DA04', 'MK65', 'SW04', 'EI26', 'EC21', 'UK79', 'BG30', 'BG64', 'BG23', 'GG59', 'BG01', 'RP24', 'MK88', 'UK23', 'UG72', 'CE19', 'UK46', 'CE26', 'PF0Z', 'GG63', 'UK78', 'MK76', 'BG63', 'DA05', 'UK97', 'BG05', 'CE10', 'UK25', 'CE21', 'MKB4', 'MKA6', 'BG52', 'TC03', 'GG28', 'GG29', 'GG56', 'BG38', 'BA09', 'UG22', 'MK57', 'RP63', 'GG15', 'NH14', 'BG73', 'GG32', 'GG53', 'BG66', 'CE07', 'AL02', 'BG24', 'BG58', 'AL05', 'UK34', 'MK94', 'CE16', 'RS18', 'DA16', 'MKC5', 'GG13', 'BG41', 'CE25', 'AO10', 'MKB5', 'AL15', 'UG25', 'MH02', 'UK04', 'BG77', 'UG69', 'RS36', 'AL27', 'CE09', 'UK43', 'AL14', 'MK99', 'CD11', 'GG57', 'BG51', 'MK70', 'UK70', 'UG47', 'BG69', 'DA11', 'BG32', 'CE17', 'GG01', 'WS01', 'SU48', 'GG09', 'UG30', 'CE12', 'MKA1', 'YI01', 'UK18', 'GG64', 'UK57', 'BG72', 'MK23', 'BG71', 'UK03', 'CB07', 'MK13', 'BA01', 'MKB8', 'UK95', 'BE04', 'UG38', 'WZ05', 'GG07', 'MK16', 'GG36', 'EN16', 'UK61', 'AL21', 'UK06', 'TC06', 'RSJA', 'GG23', 'UK45', 'GG26', 'BG45', 'PA20', 'BG79', 'UK15', 'UG23', 'UK67', 'UG05', 'SW17', 'GG50', 'GG47', 'UG87', 'RP65', 'BG54', 'BG35', 'UK38', 'MK64', 'BA06', 'UG24', 'GG48', 'BG46', 'BA14', 'GG06', 'DA02', 'GG25', 'YI02', 'AL17', 'DA12', 'NI19', 'DA03', 'UK76', 'UK31', 'UK27', 'BG26', 'BG43', 'BE01', 'MK81', 'TC04', 'AL03', 'MK56', 'DA01', 'MK17', 'AL07', 'MK67', 'MK48', 'UG12', 'AL19', 'DA15', 'UK44', 'UK55', 'BG12', 'TS10', 'UK56', 'UG56', 'GG08', 'EN17', 'GG41', 'KU03', 'GG17', 'UK41', 'BG65', 'UK59', 'MK89', 'GG22', 'BA10', 'UK14', 'BG28', 'DA09', 'UK21', 'MK45', 'GG42', 'GG03', 'UG08', 'TC01', 'GG11', 'GG34', 'TU67', 'MK42', 'CT02', 'MK61', 'VM07', 'UK68', 'BG60', 'AL04', 'MK34', 'CD04', 'UG77', 'BG75', 'GG19', 'GG62', 'GG49', 'MK55', 'MK14', 'EI07', 'MN02', 'MK93', 'VM56', 'BG37', 'GG16', 'BA13', 'BG13', 'BA08', 'MKA8', 'MK75', 'UK62', 'UG45', 'MN01', 'CE15', 'MH03', 'UK65', 'UK71', 'CE02', 'MK49', 'MKC4', 'AL12', 'BG53', 'DA07', 'GG45', 'BG40', 'AL10', 'MK58', 'AL01', 'RS26', 'MK02', 'NL13', 'MK96', 'AL13', 'UG26', 'MK39', 'BG47', 'NI38', 'CE01', 'CE18', 'GG30', 'CE06', 'NI33', 'GG33', 'AL18', 'CE23', 'GG18', 'TU01', 'CA06', 'GG52', 'MK15', 'BG56', 'BG27', 'CE11', 'UK42', 'NL14', 'AL11', 'PA03', 'CF03', 'GG10', 'BG76', 'MK74', 'EN06', 'UK20', 'RS39', 'DA10', 'MK95', 'PA18', 'CI09', 'NI06', 'MK37', 'DA08', 'GG60', 'BG15', 'MK21', 'GG21', 'BE12', 'UK75', 'UG70', 'BG34', 'KN14', 'UK94', 'BE05', 'VM22', 'GG35', 'AL28', 'EN15', 'UG18', 'AL09', 'BG04', 'BG74', 'BE08', 'GG31', 'UK28', 'BG59', 'MN03', 'BA05', 'MK26', 'EN09', 'DA13', 'CE03', 'BE07', 'LI06', 'BG42', 'NL08', 'UK53', 'PA21', 'UK60', 'MG05', 'BE10', 'AL26', 'CE20', 'SA03', 'MK03', 'AL06', 'AL23', 'UG60', 'TU36', 'GG40', 'BG62', 'MK24', 'GG54', 'BG68', 'GG39', 'BE09', 'BG49', 'RP66', 'GG24', 'UK77', 'MK73', 'LI03', 'DA14', 'KS08', 'UK05', 'MKB1', 'GG27', 'CE14', 'MK71', 'UG20', 'UK22', 'UG39', 'UK74', 'MK10', 'MK54', 'BG55', 'AL20', 'UK33', 'UK02', 'MK68', 'GG61', 'RS74', 'MK27', 'GG12', 'GG43', 'CD10'				
			}},
		Tuple{n21:String='PersonMedicalConditionStatusCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI,literals:Sequence(String)=Sequence{
			'I17',
			'Hansen&apos;s disease'
			}},
		Tuple{n21:String='BenefitDocumentCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI,literals:Sequence(String)=Sequence{
			'I17',
			'I290A', 'I601', 'I515', 'I817', 'I129PP', 'G641', 'I191', 'I181', 'FTA', 'I865', 'MOTIC', 'I698', 'MOTIJ', 'N644', 'I212', 'I190', 'Certificate of Declaration of Intention', 'I539', 'I772', 'I690', 'I508', 'I193', 'N407', 'I752', 'N643', 'I694', 'I730', 'I90', 'I700', 'LVI89', 'I824', 'N300', 'I407', 'I805', 'I90A', 'I290C', 'I589', 'I506', 'I256A', 'I290B', 'I140', 'Permanent Residency Card', 'N402', 'N470', 'I765', 'I290M', 'I695', 'I129L', 'I130O', 'EOIR29', 'N565', 'I526', 'I687', 'I130S', 'I192', 'I129HF', 'EOIR26', 'N400', 'Certificate of Repatriation', 'N405', 'CRI89', 'I821', 'I290BA', 'I129LF', 'I129H', 'I290BP', 'I485', 'I126', 'I129F', 'N600', 'Employment Authorization', 'I600', 'I290AA', 'I102', 'N455', 'I914', 'I129B', 'I512', 'I600A', 'I129BF', 'I538', 'N458', 'I129', 'N577', 'I724', 'I352', 'IAP66', 'I290AP', 'Travel Document', 'I131', 'I246', 'I539O', 'I130', 'I526O', 'I570', 'I612', 'N580', 'OS155A', 'N604', 'N410', 'N315', 'I129S', 'I360'
			}},
		Tuple{n21:String='CountryAlpha2CodeSimpleType',n21namespace:String=niem21_iso_3166_URI,literals:Sequence(String)=Sequence{'AN'}},
		Tuple{n21:String='CurrencyCodeSimpleType',n21namespace:String=niem21_iso_4217_URI,literals:Sequence(String)=Sequence{
			'ZWD','XFO','BEF','ATS','YUM',
			'AFA', 'AOR', 'ZMK', 'TMM', 'SKK', 'ZAL', 'EEK', 'FRF', 'MTL', 'SIT', 'GRD', 'MGF', 'ESP', 'SDD', 'MZM', 'PTE', 'TPE', 'ZRN', 'NLG', 'ECV', 'ITL', 'GHC', 'LUF', 'AZM', 'IEP', 'TRL', 'GWP', 'TJR', 'ROL', 'ADP', 'RUR', 'AON', 'CYP', 'BGL', 'SRG', 'FIM', 'DEM', 'ECS', 'VEB'			
			}},
		Tuple{n21:String='LanguageCodeSimpleType',n21namespace:String=niem21_iso_639_3_URI,literals:Sequence(String)=Sequence{
			'ckj','nky','tlz','dkl','sdi',
			'xst', 'sdd', 'krg', 'mzf', 'mwd', 'flm', 'kxg', 'cnm', 'krq', 'bkb', 'ztc', 'bjd', 'eur', 'elp', 'tlw', 'bii', 'hva', 'bcx', 'tot', 'gmo', 'tmx', 'slb', 'ibi', 'nlr', 'kzh', 'cru', 'sgl', 'yos', 'itu', 'rae', 'btb', 'nbf', 'tzt', 'ubm', 'blu', 'kob', 'skl', 'tzb', 'stc', 'pgy', 'bvs', 'kds', 'myt', 'mhv', 'tnf', 'ccq', 'djl', 'tnj', 'lod', 'tgg', 'ckk', 'tzc', 'amd', 'pob', 'dap', 'xmi', 'miv', 'azr', 'drh', 'wre', 'tie', 'hrr', 'cti', 'mja', 'cit', 'nxj', 'mvc', 'bsz', 'boc', 'szk', 'mob', 'aiz', 'bqe', 'ttx', 'ggh', 'jap', 'mly', 'ypl', 'tzz', 'ppr', 'quj', 'izi', 'tle', 'eni', 'pun', 'cbm', 'daf', 'paj', 'mdo', 'cjr', 'bke', 'mol', 'gbc', 'hsf', 'gen', 'sic', 'baz', 'nln', 'kdv', 'suh', 'nbx', 'yen', 'pec', 'fiz', 'mvj', 'ymj', 'mst', 'ope', 'ywm', 'ilw', 'ybd', 'pcr', 'vlr', 'sca', 'ahe', 'quu', 'dyk', 'cke', 'tze', 'wiw', 'tzu', 'arf', 'occ', 'wgw', 'mbg', 'wit', 'knh', 'rmr', 'rjb', 'bhk', 'poj', 'yib', 'suu', 'ixi', 'ppv', 'ccx', 'pen', 'mqd', 'ayx', 'ypw', 'eml', 'qut', 'mnt', 'lnt', 'yio', 'chs', 'ckf', 'sul', 'nfg', 'ixj', 'ccy', 'dat', 'yym', 'unp', 'ckw', 'akn', 'rws', 'mms', 'noo', 'bnh', 'dha', 'kgh', 'kpp', 'nfk', 'nhs', 'gav', 'poa', 'tkk', 'sum', 'atf', 'agp', 'cki', 'pou', 'aex', 'ckd', 'jar', 'srj', 'aay', 'xuf', 'byu', 'bjq', 'yma', 'acc', 'bgh', 'meg', 'nhj', 'mof', 'pbz', 'plm', 'ork', 'tzs', 'cmk', 'bwv', 'bsd', 'myq', 'yiy', 'bxt', 'lmt', 'mld', 'drw', 'cka', 'xah', 'suf', 'mtz', 'mpf', 'gio', 'xkm', 'vmo', 'qxi', 'jai', 'ggr', 'yus', 'ckc', 'muw', 'ogn', 'vky', 'cun', 'xsk', 'mgx'			
			}},
		Tuple{n21:String='DocumentCategoryCodeSimpleType',n21namespace:String=niem21_itis_URI,literals:Sequence(String)=Sequence{
			'Crew&apos;s effects declaration',
			'Forwarder&apos;s certificate of transport',
			'Forwarder&apos;s advice to exporter',
			'Forwarder&apos;s advice to import agent',
			'Forwarder&apos;s bill of lading',
			'Forwarder&apos;s certificate of receipt',
			'Forwarder&apos;s invoice',
			'Forwarder&apos;s warehouse receipt',
			'Mate&apos;s receipt',
			'Ship&apos;s stores declaration',
			'Shipper&apos;s letter of instructions (air)'}
			},
			/*
		Tuple{n21:String='DocumentCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,literals:Sequence(String)=Sequence{
			'Crew&apos;s effects declaration',
			'Forwarder&apos;s certificate of transport',
			'Forwarder&apos;s advice to exporter',
			'Forwarder&apos;s advice to import agent',
			'Forwarder&apos;s bill of lading',
			'Forwarder&apos;s certificate of receipt',
			'Forwarder&apos;s invoice',
			'Forwarder&apos;s warehouse receipt',
			'Mate&apos;s receipt',
			'Ship&apos;s stores declaration',
			'Shipper&apos;s letter of instructions (air)'}
			},
				*/		
			
		Tuple{n21:String='MarriageStatusCodeSimpleType',n21namespace:String=niem21_nonauth_URI,literals:Sequence(String)=Sequence{'divorced'}},
		Tuple{n21:String='PersonUnionStatusCodeSimpleType',n21namespace:String=niem21_nc_URI,literals:Sequence(String)=Sequence{'divorced'}},
		Tuple{n21:String='AlcoholTestCategoryCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'102'}},
		Tuple{n21:String='AlcoholTestResultCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'101'}},
		Tuple{n21:String='CrashJunctionRelationCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'108','114','112','102','101','107'}},
		Tuple{n21:String='CrashMannerCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'104','101','102','103','0'}},
		Tuple{n21:String='CrashSchoolBusRelatedCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'102'}},
		Tuple{n21:String='DriverContributingCircumstancesCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'00'}},
		Tuple{n21:String='DrivingRestrictionCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'AA'}},
		Tuple{n21:String='DrugTestCategoryCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'103'}},
		Tuple{n21:String='EventSequenceCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'101'}},
		Tuple{n21:String='HitAndRunCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'103'}},
		Tuple{n21:String='IntersectionCategoryCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'999','103'}},
		Tuple{n21:String='NonMotoristActionBeforeCrashCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'62','102','70','107','106','104','101'}},
		Tuple{n21:String='NonMotoristLocationCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'105','102','108','12','104'}},
		Tuple{n21:String='OccupantProtectionSystemUseCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'5'}},
		Tuple{n21:String='RoadwayIntersectionTrafficControlCategoryCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'102','108','105'}},
		Tuple{n21:String='VehicleContributingCircumstancesCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI,literals:Sequence(String)=Sequence{'87','80'}},
		Tuple{n21:String='PropertyLossCodeSimpleType',n21namespace:String=niem21_ucr_URI,literals:Sequence(String)=Sequence{'1','8','4','2','3','5','6','7'}},
		Tuple{n21:String='PropertyLossCodeSimpleType',n21namespace:String=niem21_fbi_URI,literals:Sequence(String)=Sequence{'1','8','4','2','3','5','6','7'}},
		Tuple{n21:String='MassCodeSimpleType',n21namespace:String=niem21_unece_URI,literals:Sequence(String)=Sequence{'Mg'}},
		Tuple{n21:String='USStateCodeSimpleType',n21namespace:String=niem21_usps_URI,literals:Sequence(String)=Sequence{'AL'}},
		Tuple{n21:String='DocumentIntelligenceCategoryCodeSimpleType',n21namespace:String=niem21_dod_jcs_pub2_0_URI,literals:Sequence(String)=Sequence{'TECHINT','HUMINT','CI','IMINT','MASINT','OSINT','SIGINT'}},
		Tuple{n21:String='PhysicalFeatureSubClassCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,literals:Sequence(String)=Sequence{'HEADBND'}},
		Tuple{n21:String='PSCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,literals:Sequence(String)=Sequence{'HEADBND'}},
		
		Tuple{n21:String='InspectionResolutionCodeSimpleType',n21namespace:String=niem21_cbrncl_URI,literals:Sequence(String)=Sequence{'Alarm or Fault - Unknown Cause','Alarm or Fault - Test'}},
		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,literals:Sequence(String)=Sequence{'K','F','C'}},
		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_unece_URI,literals:Sequence(String)=Sequence{'K','F','C'}},
//				Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_unece_URI	},
		
		Tuple{n21:String='GNDAOrgCodeSimpleType',n21namespace:String=niem21_cbrncl_URI,literals:Sequence(String)=Sequence{'BP'}}
	
};
	
property type21to3Remove:Sequence(Tuple(n21:String,n21namespace:String)) = Sequence{
	
		//Tuple{n21:String='OrganizationFacilityAssociationType',n21namespace:String=niem21_nc_URI},
		//		Tuple{n21:String='AlienDependentType',n21namespace:String=niem21_im_URI,n3:String='SEVISPersonDependentAssociationType'},
		
//		Tuple{n21:String='DocumentCategoryCodeType',n21namespace:String=niem21_it_URI},
//		Tuple{n21:String='DocumentCategoryCodeSimpleType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='AlienDependentType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='TimeMeasureType',n21namespace:String=niem21_nc_URI},
//		Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ComputerType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='IncidentCategoryCodeType',n21namespace:String=niem21_lasd_URI},
		Tuple{n21:String='IncidentCategoryCodeSimpleType',n21namespace:String=niem21_lasd_URI},
		Tuple{n21:String='DNACollectionStatusCodeType',n21namespace:String=niem21_lasd_URI},
		Tuple{n21:String='DNACollectionStatusCodeSimpleType',n21namespace:String=niem21_lasd_URI},
		Tuple{n21:String='DocumentStatusClassificationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DatumCodeType',n21namespace:String=niem21_nga_URI},
		Tuple{n21:String='DatumCodeSimpleType',n21namespace:String=niem21_nga_URI},
		Tuple{n21:String='QualityValidityCategoryCodeType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='QualityValidityCategoryCodeSimpleType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameTransliterationCodeType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameTransliterationCodeSimpleType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameScriptCodeType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameScriptCodeSimpleType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameFormCategoryCodeType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='ProperNameFormCategoryCodeSimpleType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='TYPArticleCategoryCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='LightingCodeSimpleType',n21namespace:String=niem21_itis_URI},
		Tuple{n21:String='LightingCodeType',n21namespace:String=niem21_itis_URI},
		Tuple{n21:String='FingerprintSetType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FingerprintSetAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonFingerprintSetType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ImmediateFamilyAssociationType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='TelecommunicationDeviceType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='GuardianAssociationType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AuthorityFigureAssociationType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PXSCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PXSCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='POSCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='POSCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PCSCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PCSCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AdoptedChildAssociationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ReligionCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ReligionCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MarriageStatusType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DateAccuracyIndicatorCodeSimpleType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='FPCPatternCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='NuclideCategoryCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='NuclideCategoryCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='InspectionActivityCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='InspectionActivityCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='AlarmDescriptionCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='AlarmDescriptionCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadSourceKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadSourceKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PositiveIntegerListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PositiveIntegerType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='CountryNumericCodeType',n21namespace:String=niem21_iso_3166_URI},
		Tuple{n21:String='CountryNumericCodeSimpleType',n21namespace:String=niem21_iso_3166_URI},
		Tuple{n21:String='SFICodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='SFICodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='ISRCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ISRCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IMPCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IMPCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DMMCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DMMCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerprintPatternCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FingerprintPatternCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DCHRemovableAppliancesCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DCHRemovableAppliancesCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DateAccuracyIndicatorCodeType',n21namespace:String=niem21_twpdes_URI},
		Tuple{n21:String='PassportAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ParameterSetPairType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TOTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadAlarmLightCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadEncounterDeviceCalibrationType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='DataFormatCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='NuclideEstimatedShieldingType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='DetectionEventDeviceDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='NuclideIdentificationType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='ALSCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadDoseUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PhotopeakNuclideType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='CSPCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ItemDispositionStatusCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='LocationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='GrossCountDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ContentRecordType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DetectionEventAlarmDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PersonAssociationCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='IrisImageCaptureType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CrashDrivingRestrictionType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ClassOfAdmissionCategoryCodeType',n21namespace:String=niem21_scr_URI},

		Tuple{n21:String='TariffCategoryCodeSimpleType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='DCHGeneralCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='CrashVehicleLegalSpeedCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='EncounterDeviceProbeKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='TYPDescriptionCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='PersonAssociationCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FingerprintImpressionCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CompressionCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadDoseUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SIGCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SHCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadAbsorbedDoseRateUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadAlarmKindCodeType',n21namespace:String=niem21_cbrncl_URI},

		Tuple{n21:String='SpectrumChannelDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ActivityAugmentationType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ChargeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FEFCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IdentificationType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='PASCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='MinutiaeReadingSystemType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PaymentType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='PersonNameType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		//Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		
		Tuple{n21:String='SignatureImageVectorType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadlDoseMeasureType',n21namespace:String=niem21_cbrn_URI},

//		Tuple{n21:String='RoadwayLightingCodeType',n21namespace:String=niem21_itis_URI},
//		Tuple{n21:String='TransactionDomainType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TransactionDomainType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerprintFeaturesMinutiaeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='NuclideCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadExposureUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='WeatherConditionsCodeType',n21namespace:String=niem21_itis_URI},
		Tuple{n21:String='VehicleType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonMedicalConditionAugmentationType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='WarrantType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CrashLocationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DetectionEventKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RoadwayBikewayCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='RadAlarmKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='MedicalConditionType',n21namespace:String=niem21_scr_URI},

		Tuple{n21:String='ImageCaptureAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CSPCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ClassOfAdmissionCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FingerprintAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='TemplateRankedNuclideType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='BiometricType',n21namespace:String=niem21_scr_URI},
		//Tuple{n21:String='AlienDependentType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='SRMCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IndicatorCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='EncounterDeviceLocationType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SupportLevelCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ParentCodeType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FamilyAssociationType',n21namespace:String=niem21_scr_URI},

		Tuple{n21:String='NonMotoristConditionCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='NISTStandardMinutiaeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFImageType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='NonNegativeIntegerListSimpleType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PersonType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverConditionCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='BearingOffsetMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ImmigrationStatusAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CommercialVehicleAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ImageType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DeportationDepartProofType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MarriageAssociationType',n21namespace:String=niem21_im_URI},

		Tuple{n21:String='CalibrationNuclideType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='IRTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='GCACodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ItemHoldingType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='CSICodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingMaterialCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='FingerprintImpressionType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScreeningDocumentPhotoAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MeasuredItemType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ORIAgencyCodeSimpleType',n21namespace:String=niem21_fbi_URI},

		Tuple{n21:String='NonMotoristConditionCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='AlienStudentType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='TransactionType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PassportType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonEmploymentAssociationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MinutiaeFingerPatternType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='OrganizationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='OccupationCodeType',n21namespace:String=niem21_census_URI},
		Tuple{n21:String='OccupationCodeSimpleType',n21namespace:String=niem21_census_URI},
		Tuple{n21:String='DeviceRelationshipKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FileSetMemberType',n21namespace:String=niem21_cbrn_URI},

		Tuple{n21:String='RadAbsorbedDoseMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SAPCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DriverConditionCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
//		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_ut_offender_URI},
		Tuple{n21:String='SRTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DetectionEventAnalysisResultsType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='KitType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='RadExposureRateMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PHRCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='EncounterDeviceHealthStatusCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='VelocityMeasureType',n21namespace:String=niem21_cbrn_URI},

		Tuple{n21:String='CitizenPersonType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='UnderrideOverrideCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='TSRCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaseDispositionDecisionCategoryCodeType',n21namespace:String=niem21_ut_offender_URI},
		Tuple{n21:String='RadAbsorbedDoseRateUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SFPCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='NonNegativeIntegerListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ImmigrationStatusType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='PersonParentChildAssociationType',n21namespace:String=niem21_im_URI},

		Tuple{n21:String='ProgramType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='GUNColorFinishCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='SXSCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBRNEncounterDeviceType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadExposureMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='IMTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerprintAnnotationDetailType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ThreeDimensionalGeographicCoordinateType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='LocationCategoryType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='BTYCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IdAcquisitionMethodCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},

		Tuple{n21:String='RelativePositionType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='EncounterDeviceHealthStatusCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='DeviceRelationshipStatusCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='IRTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SecurityCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SpectrumKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SLCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DecimalListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='DCHStatusCodeSimpleType',n21namespace:String=niem21_fbi_URI},
//		Tuple{n21:String='OffenseCodeType',n21namespace:String=niem21_ut_offender_URI},
		Tuple{n21:String='MeasureMetadataType',n21namespace:String=niem21_nc_URI},
		
		Tuple{n21:String='PersonAssociationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='NonLinearityCorrectionType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RoadwayDelineatorPresenceCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='CrashDrivingRestrictionAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='TransactionCharacterSetDirectoryType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AddressType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ReligionCodeType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='EnergyCalibrationAdjustCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PersonParentChildAssociationAugmentationType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RadEncounterDeviceModeCodeType',n21namespace:String=niem21_cbrncl_URI},
		
		Tuple{n21:String='BiometricClassificationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='NuclideActivityMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='UnderrideOverrideCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='ReferralType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingFunctionColorCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='TransportContractDocumentCodeType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='PersonType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='DCHRestorationCariesCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DetectionEventCategoryCodeType',n21namespace:String=niem21_cbrncl_URI},
		
		Tuple{n21:String='OrganizationLocationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ORIGovernmentLevelCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='RadAbsorbedDoseUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='ParameterSetListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='CalibrationKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SecuritiesType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='GCACodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BTYCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='TrainType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='EncounterDeviceCategoryCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='GeographicCoordinatesType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='OrganizationDocumentCountType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DCHStatusCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='LocationCategoryCodeSimpleType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='RadExposureRateUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='TYPArticleCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='MaritalStatusCodeSimpleType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='PersonPhysicalMarkingType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DCHRestorationCariesCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='FamilyAssociationCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='BiometricImageCategoryCodeType',n21namespace:String=niem21_scr_URI},
		
//		Tuple{n21:String='RoadwayLightingCodeSimpleType',n21namespace:String=niem21_itis_URI},
		Tuple{n21:String='PersonPhysicalMarkingAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='SHCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AlgorithmType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='FPCFingerCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DeviceDeviceRelationshipType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='NuclideActivityUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='MarriageAssociationAugmentationType',n21namespace:String=niem21_im_URI},
		
		Tuple{n21:String='OFRCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CrashInjuryAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DetectionEventAssessmentType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PersonToothType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FEFCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaseDispositionDecisionCategoryCodeSimpleType',n21namespace:String=niem21_ut_offender_URI},
		Tuple{n21:String='PASCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CrashInjuryType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DataQualityCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PhotopeakDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VODCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ICTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ProcessedSpectrumImageType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='CalibrationKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='DCHOtherCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='RoadwaySideRoadLanesNumberCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='MinutiaRidgeCountType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PersonType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='LocationType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='CoordinatesMethodCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FPCPatternCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='OFRCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CountryAlpha3CodeSimpleType',n21namespace:String=niem21_iso_3166_URI},
		Tuple{n21:String='OrganizationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FERCodeType',n21namespace:String=niem21_ansi_nist_URI},
		
		Tuple{n21:String='DataFormatCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadExposureRateUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='ORIAgencyCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='EncounterDeviceVersionType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='MarriageAssociationAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ChannelDataListModeCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='MeasureAugmentationType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ConveyanceIDReferenceType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VODCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SiteLocationType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SECCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RoadwayBikewayCodeType',n21namespace:String=niem21_mmucc_2_URI},
		
		Tuple{n21:String='EncounterDeviceCategoryCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='MILCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ToothType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingMaterialCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='DriverLicenseAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='TSRCodeType',n21namespace:String=niem21_ansi_nist_URI},
		//Tuple{n21:String='CapabilityType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='IncidentType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='AdditionalDocumentIssuingPlaceType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='TYPDescriptionCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='ReligionCodeSimpleType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='ChannelDataListModeCodeType',n21namespace:String=niem21_cbrncl_URI},
		
		Tuple{n21:String='CitizenshipType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DeviceParameterType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='AlienExchangeVisitorAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='SupervisionType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ParameterSetType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SFPCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadEncounterDeviceProcessedDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PersonNameType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RadDoseRateMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='FacilityOperationalStatusCodeType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='TransactionImageResolutionType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AlarmAcknowledgementCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='IMTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		
		Tuple{n21:String='TMZCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ChildCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FaceImage3DPoseAngleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ProcessedSpectrumDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='GeographicElevationMeasureType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='RoadwayMainlineLanesNumberCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='BinarySubjectCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FingerprintCoordinateType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScreeningDocumentPhotoType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FPCFingerCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='RadEnergyUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		
		Tuple{n21:String='DisciplinaryActionType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RelativeLocationType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FacilityOrganizationAssociationType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='RadFWHMUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='TransportContractDocumentCodeSimpleType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_fbi_URI},
//		Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_ansi_nist_URI},
// FPCCodeType, FingerPositionCodeType
		Tuple{n21:String='DoubleListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='OccupationCategoryCodeSimpleType',n21namespace:String=niem21_census_URI},
		Tuple{n21:String='ProtectionOrderAugmentationType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='StatusType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingFunctionColorCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		
		Tuple{n21:String='RadEncounterDeviceModeCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='CSNCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
//		Tuple{n21:String='OffenseCodeSimpleType',n21namespace:String=niem21_ut_offender_URI},
//		Tuple{n21:String='OffenseCodeSimpleType',n21namespace:String=niem21_mn_off},

		Tuple{n21:String='ArrestType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ApplicationNameType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='CrashDriverLicenseAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DetectionEventAnalyzedMeasurementDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='EncounterDeviceStatusType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='GUNColorFinishCodeType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DCHGeneralCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='FingerprintImageQualityType',n21namespace:String=niem21_ansi_nist_URI},
		
		Tuple{n21:String='PersonLocationDetailsType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='FingerprintFeaturesFeedbackType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScanningResolutionCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ImmigrationArrestType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='DetectionEventKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='IdentificationConfidenceType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ConfigStatusKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SpouseRoleCodeType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienExchangeVisitorType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='DocumentType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='FIDCodeType',n21namespace:String=niem21_ansi_nist_URI},
		
		Tuple{n21:String='FacilityType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ICTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IOCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CrashDriverLicensePermitType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='RadCountRateUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='TemplateRankingDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PPLCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AlienFamilyType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='ORIGovernmentLevelCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='DCHOtherCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		Tuple{n21:String='RadCountRateUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FacilityOperationalStatusCodeSimpleType',n21namespace:String=niem21_it_URI},
		
		Tuple{n21:String='IOCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='TariffCategoryCodeType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='DeviceRelationshipStatusCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RTCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AlarmAcknowledgementCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FIDCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PersonMedicalConditionType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='FMTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PPLCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MinutiaPositionType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='MeasureType',n21namespace:String=niem21_it_URI},
		
		Tuple{n21:String='EncounterDeviceProbeType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='MaritalStatusCodeType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='DoubleUncType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='FMTCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SpouseRoleCodeSimpleType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RadExposureUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadDoseRateUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='CommercialVehicleType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ChildType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FacilityAugmentationType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ItemType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='TransactionContentSummaryType',n21namespace:String=niem21_ansi_nist_URI},
		//Tuple{n21:String='TemperatureUnitCodeType',n21namespace:String=niem21_it_URI},
		
		Tuple{n21:String='InjuryAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='IndicatorCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ItemDispositionStatusCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SAPCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CoordinatesMethodCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='ALSCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SignatureImageType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='EmploymentType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RoadwaySideRoadLanesNumberCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='ElectronicAddressType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DatumCodeSimpleType',n21namespace:String=niem21_nga_URI},
		Tuple{n21:String='SpectrumDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='BooleanListType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ConveyanceType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='TemperatureMeasureType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='FERCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PropertyType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertyType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PositiveIntegerListSimpleType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SLCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='JurisdictionType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ElectronicAddressClassificationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='OccupationCategoryCodeType',n21namespace:String=niem21_census_URI},
		Tuple{n21:String='RadCountRateMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadAlarmLightCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FingerprintPalmImagePositionType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='EncounterDeviceConfigurationType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='CountryAlpha3CodeType',n21namespace:String=niem21_iso_3166_URI},
		
		Tuple{n21:String='MTCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='TOTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ConveyanceType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='EnergyCalibrationAdjustCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SECCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CSNCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DoubleListSimpleType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PPCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='VolumeMeasureType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='SecurityCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='BiometricCoordinateType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PPCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PropertyAugmentationType',n21namespace:String=niem21_j_URI},
		
		Tuple{n21:String='DeviceRelationshipKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='BinarySubjectCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadDoseRateUnitsCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PalmprintImageType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='NuclideActivityUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RecordType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DetentionAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='NuclideCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='PropertyDispositionType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ActivityType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PhysicalMarkingCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScreeningIdentificationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='RadEncounterDeviceRawDataType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='MTCCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DataFileMetadataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadFWHMUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='ChildCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MinutiaeFingerPositionType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SIGCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RoadwayMainlineLanesNumberCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='PersonAssociationAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='InjuryType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='SRMCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageCaptureType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DetectionEventType',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='AlienEnforcementEncounterType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='CrashDriverLicensePermitAugmentationType',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='BiometricType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='RadEnergyUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='DetectionEventCategoryCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='DeviceQualityControlType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='DataQualityCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SignatureImageVectorRepresentationType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='OdometerReadingMeasureType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='MarriageAssociationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CrashVehicleLegalSpeedCodeSimpleType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='SpatialOrientationMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PersonMarriageType',n21namespace:String=niem21_im_URI},
		
		Tuple{n21:String='SupportLevelCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonNameCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ContactInformationType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='BooleanListSimpleType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TMZCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='TelephoneNumberType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='RadEncounterDeviceOperatingCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='BiometricSourceType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='RoadwayDelineatorPresenceCodeType',n21namespace:String=niem21_mmucc_2_URI},
		Tuple{n21:String='RadEncounterMeasurementType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='BiometricStatusType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='BiometricAugmentationType',n21namespace:String=niem21_scr_URI},
		
		Tuple{n21:String='ProcessedGrossCountDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='FingerprintType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='SXSCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='PersonNameCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CountDoseDataType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ConfigStatusKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='FingerprintPatternType',n21namespace:String=niem21_ansi_nist_URI},
		//Tuple{n21:String='IdentityAssociationAugmentationType',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='NonImmigrantStatusType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='WeatherConditionsCodeSimpleType',n21namespace:String=niem21_itis_URI},
		Tuple{n21:String='FingerprintCaptureTechniqueType',n21namespace:String=niem21_scr_URI},
		
		Tuple{n21:String='ElectronicAddressCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FileSetType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='CSICodeSimpleType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='RadAbsorbedDoseUnitsCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='RadEncounterDeviceOperatingCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='EngineDisplacementMeasureType',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AlgorithmVersionType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SRTCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FamilyAssociationCategoryCodeType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ParentCodeSimpleType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RadAbsorbedDoseRateMeasureType',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='PHRCodeSimpleType',n21namespace:String=niem21_fbi_URI},
		
		Tuple{n21:String='FamilyAssociationAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='AddressType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='LocationCategoryCodeType',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='FingerprintImageNISTQualityType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IdAcquisitionMethodCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='SpectrumKindCodeSimpleType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='MILCodeType',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='JudicialOfficialType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='EncounterDeviceProbeKindCodeType',n21namespace:String=niem21_cbrncl_URI},
		Tuple{n21:String='OrganizationLocationAugmentationType',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DatumCodeType',n21namespace:String=niem21_nga_URI},
		Tuple{n21:String='PersonNameType',n21namespace:String=niem21_im_URI},
		
		Tuple{n21:String='DocumentType',n21namespace:String=niem21_j_URI}
};


property type21to3WithNamespace:Sequence(Tuple(n21:String,n21namespace:String,n3namespace:String)) = Sequence{
		Tuple{n21:String='CapabilityType',n21namespace:String=niem21_intel_URI,n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='DNALocusType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_ansi_nist_URI	},
//		Tuple{n21:String='DocumentStatusClassificationType',n21namespace:String=niem21_scr_URI,n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonNameCategoryCodeSimpleType',n21namespace:String=niem21_nonauth_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='PersonNameCategoryCodeType',n21namespace:String=niem21_nonauth_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ImagePoseCodeSimpleType',n21namespace:String=niem21_nonauth_URI,n3namespace:String=niem21_ut_offender_URI	},
		Tuple{n21:String='ImagePoseCodeType',n21namespace:String=niem21_nonauth_URI,n3namespace:String=niem21_ut_offender_URI	},
//		Tuple{n21:String='OffenseCodeSimpleType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
//		Tuple{n21:String='OffenseCodeType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='OffenseCodeSimpleType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='OffenseCodeType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='OffenseLevelCodeSimpleType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='OffenseLevelCodeType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='StatuteCategoryCodeSimpleType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='StatuteCategoryCodeType',n21namespace:String=niem21_mn_off_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='ConveyanceRegistrationStatusType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ActivityFacilityAssociationType',n21namespace:String=niem21_j_URI,n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='ConveyancePartType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='EngineDisplacementUnitCodeSimpleType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='EngineDisplacementUnitCodeType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='EngineType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='IntoxicationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemLienAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ExplosiveType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemRegistrationAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
//		Tuple{n21:String='OccupationCategoryCodeType',n21namespace:String=niem21_census_URI,n3namespace:String=niem21_scr_URI	},
//		Tuple{n21:String='OccupationCategoryCodeSimpleType',n21namespace:String=niem21_census_URI,n3namespace:String=niem21_scr_URI	},
		Tuple{n21:String='AggravatedAssaultHomicideFactorsCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
//		Tuple{n21:String='VictimCategoryCodeType',n21namespace:String=niem21_census_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='VictimCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='VictimCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ResidentCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ResidentCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='PropertyCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='PropertyCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='PropertyLossCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='PropertyLossCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='MultipleArresteeSegmentsCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='MultipleArresteeSegmentsCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='MethodOfEntryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='MethodOfEntryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='MethodOfAccessCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ndex_URI	},
		Tuple{n21:String='MethodOfAccessCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ndex_URI	},
		Tuple{n21:String='LocationCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='LocationCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='LEOKAOfficerAssignmentCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='LEOKAOfficerAssignmentCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='LEOKAActivityCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='LEOKAActivityCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='JustifiableHomicideFactorsCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='JustifiableHomicideFactorsCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='InjuryCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='InjuryCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IncidentFactorCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IncidentFactorCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IncidentExceptionalClearanceCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IncidentExceptionalClearanceCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		//Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_fbi_URI	},
		//Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_fbi_URI	},
		Tuple{n21:String='IncidentBiasMotivationCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IncidentBiasMotivationCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ForceCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ForceCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='EthnicityCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='EthnicityCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='DrugMeasurementCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='DrugMeasurementCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='CriminalActivityCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='CriminalActivityCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='DrugCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='DrugCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ArresteeWeaponCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ArresteeWeaponCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ArrestCategoryCodeType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='ArrestCategoryCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='DocumentAssociationType',n21namespace:String=niem21_scr_URI,n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='ManifestType',n21namespace:String=niem21_scr_URI,n3namespace:String=niem21_nc_URI	},
//		Tuple{n21:String='CaseDispositionDecisionCategoryCodeSimpleType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
//		Tuple{n21:String='CaseDispositionDecisionCategoryCodeType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='MilitaryDischargeCategoryCodeSimpleType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='MilitaryDischargeCategoryCodeType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='PleaCategoryCodeSimpleType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='PleaCategoryCodeType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='SupervisionLevelCodeSimpleType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='SupervisionLevelCodeType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='SupervisionRestrictionCodeSimpleType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='SupervisionRestrictionCodeType',n21namespace:String=niem21_ut_offender_URI,n3namespace:String=niem21_nonauth_URI	},
		Tuple{n21:String='AggravatedAssaultHomicideFactorsCodeSimpleType',n21namespace:String=niem21_fbi_URI,n3namespace:String=niem21_ucr_URI	},
		Tuple{n21:String='IdentificationRangeType',n21namespace:String=niem21_ansi_nist_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemTitleAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemTitleReplacementAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemTitleType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemRegistrationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingRestrictionType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicensePermitType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseBaseType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='FirearmType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='JewelryType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='LesseeType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='LessorType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='LienHolderType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='LienType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='TitleStatusType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBranderType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBrandType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleEmissionInspectionType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleInspectionType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleSafetyInspectionType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='JewelryStoneType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceRegistrationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
//		Tuple{n21:String='PersonNameCategoryCodeSimpleType',n21namespace:String=niem21_scr_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleEmissionInspectionType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		//Tuple{n21:String='PersonNameCategoryCodeType',n21namespace:String=niem21_scr_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ClothingType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceEngineAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyancePartAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseAssociationType',n21namespace:String=niem21_nc_URI,n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='ContainerISO6346CodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ContainerISO6346CodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ContainerKindCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ContainerKindCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ConveyanceRelationshipKindCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ConveyanceRelationshipKindCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DocumentCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DocumentCategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DutyTaxFeeCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DutyTaxFeeCategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DutyTaxPaymentMethodCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='DutyTaxPaymentMethodCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ExaminationPlaceCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ExaminationPlaceCategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationActivityCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationActivityCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationFunctionCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationFunctionCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationKindCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='LocationKindCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='MeasureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='MeasureUnitCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='PackagingFormCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='PackagingFormCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ProcessingEstablishmentIDCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ProcessingEstablishmentIDCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='RoleOfPartyCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='RoleOfPartyCategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='SealIntactStatusCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='SealIntactStatusCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='SealVerificationStatusCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='SealVerificationStatusCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ShapeCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ShapeCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='StatusCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='StatusCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
//		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_nonauth_URI	},
//		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_ut_offender_URI	},
		Tuple{n21:String='TemperatureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_unece_URI	},
		Tuple{n21:String='TemperatureUnitCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_unece_URI	},
		
		Tuple{n21:String='TransportMeansCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='TransportMeansCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='UNECECategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='UNECECategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='VolumeMeasureUnitCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='VolumeMeasureUnitCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ApportionmentQualifierCategoryCodeType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	},
		Tuple{n21:String='ApportionmentQualifierCategoryCodeSimpleType',n21namespace:String=niem21_it_URI,n3namespace:String=niem21_itis_URI	}
};


property type21to3:Sequence(Tuple(n21:String,n21namespace:String,n3:String)) = Sequence{
//		Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI},

		Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
//		Tuple{n21:String='AlienDependentType',n21namespace:String=niem21_im_URI,n3:String='SEVISPersonDependentAssociationType'},
		Tuple{n21:String='DocumentSubjectCode',n21namespace:String=niem21_nc_URI,n3:String='DocumentSubject'},
		Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeSimpleType'},
		Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeType'},
		Tuple{n21:String='ScreeningIdentificationAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentationType'},
		Tuple{n21:String='AdditionalInformationAugmentationType',n21namespace:String=niem21_it_URI,n3:String='AdditionalInformationType'},
		
		Tuple{n21:String='ConveyanceAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentationType'},
		Tuple{n21:String='DetentionType',n21namespace:String=niem21_scr_URI,n3:String='AlienDetentionType'},
		Tuple{n21:String='DepartureType',n21namespace:String=niem21_scr_URI,n3:String='ScreeningDepartureType'},
		Tuple{n21:String='ConveyanceAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentationType'},
//		Tuple{n21:String='AlertType',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentationType'},
	
		Tuple{n21:String='AdditionalDocumentAugmentationType',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentType'},
		Tuple{n21:String='PaymentAugmentationType',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentationType'},
		Tuple{n21:String='OriginType',n21namespace:String=niem21_it_URI,n3:String='GoodsOriginType'},
		Tuple{n21:String='ContainerReferencedIDType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerReferenceIDType'},
		Tuple{n21:String='ContainerLastLocationType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLastLocationType'},
		Tuple{n21:String='ContainerIdentificationType',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerIdentificationType'},
		Tuple{n21:String='PersonLocationDetailsAugmentationType',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentationType'},
//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentationType'},
//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='PersonIdentityAssociationType<'},
// this one changes name as well as inheritance, stereotypes
//		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentationType'},
		Tuple{n21:String='EmploymentAugmentationType',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentationType'},
		Tuple{n21:String='AlarmLocationAugmentationType',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentationType'},
		//Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
	// PersonItemAssociationType
		Tuple{n21:String='PersonItemAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ItemEntityAssociationType'},
		
		Tuple{n21:String='AlienCitizenshipType',n21namespace:String=niem21_im_URI,n3:String='ForeignBornChildOfCitizenRoleType'},
		Tuple{n21:String='AlienType',n21namespace:String=niem21_im_URI,n3:String='AlienRoleType'},
			// "ansi-nist:COLCodeType - > biom:PhysicalFeatureColorCodeType
		// "ansi-nist:COLCodeSimpleType - > biom:PhysicalFeatureColorCodeSimpleType
		// ansi-nist:PCCCodeType       -> "biom:PhysicalFeatureClassCodeType"
		// ansi-nist:PCCCodeSimpleType       -> "biom:PhysicalFeatureClassCodeSimpleType"
		// ansi-nist:PSCCodeType ->biom:PhysicalFeatureSubClassCodeType
		// ansi-nist:PSCCodeSimpleType ->biom:PhysicalFeatureSubClassCodeSimpleType
		// ansi-nist:SMDCodeType -> biom:PhysicalFeatureCategoryCodeType
		// ansi-nist:SMDCodeSimpleType -> biom:PhysicalFeatureCategoryCodeSimpleType
		// PhysicalFeatureColorCodeType COLCodeType
		// SMDCodeType PhysicalFeatureCategoryCodeType
		Tuple{n21:String='SMDCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeType'},
		Tuple{n21:String='COLCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeType'},
		Tuple{n21:String='NISTImageType',n21namespace:String=niem21_ansi_nist_URI,n3:String='ImageType'},
		Tuple{n21:String='FingerprintType',n21namespace:String=niem21_ansi_nist_URI,n3:String='MinutiaeType'},
		//Tuple{n21:String='FPCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeSimpleType'},
		//Tuple{n21:String='FPCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='FingerPositionCodeType'},
		Tuple{n21:String='COLCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeType'},
		Tuple{n21:String='COLCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureColorCodeSimpleType'},
		Tuple{n21:String='PCCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureClassCodeType'},
		Tuple{n21:String='PCCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureClassCodeSimpleType'},
		Tuple{n21:String='PSCCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureSubClassCodeType'},
		Tuple{n21:String='PSCCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureSubClassCodeSimpleType'},
		Tuple{n21:String='SMDCodeType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeType'},
		Tuple{n21:String='SMDCodeSimpleType',n21namespace:String=niem21_ansi_nist_URI,n3:String='PhysicalFeatureCategoryCodeSimpleType'},
	// 		// nc:SubstanceQuantityMeasure -> nc:MeasureType
		Tuple{n21:String='SubstanceQuantityMeasure',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
	
	// CaseType, AppellateCaseType
		Tuple{n21:String='BondType',n21namespace:String=niem21_j_URI,n3:String='BailBondType'},
		Tuple{n21:String='PersonToothAugmentationType',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentationType'},
		Tuple{n21:String='PropertyDispositionAugmentationType',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentationType'},
//		Tuple{n21:String='TreatmentType',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentationType'},
		Tuple{n21:String='PropertySeizureType',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureType'},
		Tuple{n21:String='CrashLocationAugmentationType',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentationType'},
		Tuple{n21:String='CaseType',n21namespace:String=niem21_j_URI,n3:String='AppellateCaseType'},
		// MeasureRangeValueType --> DecimalRangeType
		Tuple{n21:String='MeasureRangeValueType',n21namespace:String=niem21_nc_URI,n3:String='DecimalRangeType'},
		Tuple{n21:String='PercentageSimpleType',n21namespace:String=niem21_nc_URI,n3:String='PercentSimpleType'},
		Tuple{n21:String='PercentageType',n21namespace:String=niem21_nc_URI,n3:String='PercentType'},
//		Tuple{n21:String='ComputerType',n21namespace:String=niem21_nc_URI,n3:String='DeviceType'},
//		Tuple{n21:String='TelecommunicationDeviceType',n21namespace:String=niem21_nc_URI,n3:String='DeviceType'},
		//Tuple{n21:String='TelecommunicationDeviceType',n21namespace:String=niem21_nc_URI,n3:String='DeviceInformationAssociationType'},
		
	// "IdentityAssociationType"
		Tuple{n21:String='IdentityAssociationType',n21namespace:String=niem21_nc_URI,n3:String='PersonIdentityAssociationType'},
	// TimeMeasureType, MeasureType
		Tuple{n21:String='EmailType',n21namespace:String=niem21_nc_URI,n3:String='MessageType'},
		Tuple{n21:String='TimeMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
		Tuple{n21:String='SpeedMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'},
		Tuple{n21:String='ActivityInvolvedPersonAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ActivityPersonAssociationType'},
//		Tuple{n21:String='ReferralProperty',n21namespace:String=niem21_nc_URI,n3:String='ReferralItem'},
		Tuple{n21:String='TangibleItemType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
//		Tuple{n21:String='PropertyType',n21namespace:String=niem21_nc_URI,n3:String='ItemType'},
		
		Tuple{n21:String='OrganizationItemAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ItemEntityAssociationType'},
//		Tuple{n21:String='StructuredAddressType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'},
		Tuple{n21:String='TwoDimensionalGeographicCoordinateType',n21namespace:String=niem21_nc_URI,n3:String='Location2DGeospatialCoordinateType'},
		Tuple{n21:String='OrganizationContactInformationAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ContactInformationAssociationType'},
		Tuple{n21:String='PersonContactInformationAssociationType',n21namespace:String=niem21_nc_URI,n3:String='ContactInformationAssociationType'},
		Tuple{n21:String='LengthMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'}
		//Tuple{n21:String='WeightMeasureType',n21namespace:String=niem21_nc_URI,n3:String='MeasureType'}
		//Tuple{n21:String='MeasurePointValueType',n21namespace:String=niem21_nc_URI,n3:String='AddressType'}, 
		//Tuple{n21:String='TelephoneNumberAugmentationType',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberType'}, 
};


property property21to3Remove:Sequence(Tuple(n21:String,n21namespace:String)) = Sequence{
	
		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='DNAImage',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DNALocus',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='VehicleTower',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='SubstanceCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ManifestCategoryCodeDescriptionText',n21namespace:String=niem21_scr_URI},

		Tuple{n21:String='DriverLicenseEndorsement',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='Warrant',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Conveyance',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='TelephoneNumber',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DocumentIssueDate',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FingerprintAnnotationDetail',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonPhysicalMarking',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonEmploymentAssociation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='FamilyAssociation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonAssociation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MessageID',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Passport',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Organization',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='OrganizationIncorporationDate',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MedicalCondition',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='MarriageAssociation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Location',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='OrganizationLocation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScreeningDocumentPhoto',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ImageCapture',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ScreeningIdentification',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Fingerprint',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='EncounterDeviceID',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='BinaryBase64Object',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentStatusClassification',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Charge',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Biometric',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Arrest',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='DeportationDepartProofText',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Address',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='ElectronicAddress',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='Vehicle',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='TreatmentProvider',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Supervision',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='SupervisionPerson',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Securities',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Referral',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Property',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Person',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonName',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonName',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonVeinPattern',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonUrine',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonThermalImage',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonThermalHandImage',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonThermalFaceImage',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonSpeechPattern',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonSemen',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonSaliva',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonRetina',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonLipMovement',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonKeystrokeDynamics',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonIrisFeatures',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonHandGeometry',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonGait',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonFootPrint',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonFingerGeometry',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonFacialFeatures',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonEarShape',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonBodyOdor',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Organization',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Disposition',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='radAbsorbedDoseUnitsCode',n21namespace:String=niem21_cbrn_URI},
	
		Tuple{n21:String='CommercialVehicleReference',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwaySideRoadLanesNumberCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayMainlineLanesNumberCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayDelineatorPresenceCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayBikewayCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingMaterialCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayPavementLongitudinalMarkingFunctionColorCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='RoadwayInclinationNumber',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ItemPartialLotCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DrivingIncidentLegalSpeedRate',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DrivingIncidentRecordedSpeedRate',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Person',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FacilityID',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Person',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Payment',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Facility',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Document',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Address',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Person',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='PersonMedicalCondition',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='PersonLocationDetails',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='Identification',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='Biometric',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='Biometric',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='Status',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='RelativeLocation',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='Program',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='PersonName',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='Employment',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='ContactInformationIsNightIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsEveningIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsDayIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsEmergencyIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsPrimaryIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='MarriageAssociation',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='Location',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='JudicialOfficial',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FirearmCategoryDescriptionCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentCreator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentRelationText',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentApplicationName',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AreaCircularDescriptionText',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AreaPolygonDescriptionText',n21namespace:String=niem21_nc_URI},
	
		Tuple{n21:String='CrashLocation',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Jurisdiction',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertySeizurePropertyHoldingOrganization',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Item',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertyDisposition',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CrashInjury',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Injury',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Incident',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='IncidentWeatherCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='IncidentGeneralCategoryCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Image',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='EvidenceObject',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CrashDrivingRestriction',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DrivingIncidentBloodAlcoholContentNumberText',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CrashDriverLicensePermit',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Document',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='DisciplinaryAction',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CommercialCarrierStateIdentification',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CommercialCarrierUSDOTNumber',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='UnderrideOverrideCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='InjuryTreatmentStartDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='InjuryTreatmentEndDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ImageOperator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FacilityCommercialIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='EncounterCategoryDescriptionText',n21namespace:String=niem21_nc_URI},
	
		Tuple{n21:String='CrashVehicleLegalSpeedCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Case',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Activity',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='NonMotoristConditionCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='CrashDriverConditionCode',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FacilityMemberCategoryText',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FacilitySecurityLevelText',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FacilityCapacityDescriptionText',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FacilityCapacityQuantity',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='ArrestBloodAlcoholContentNumberText',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='Measure',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='DepartureDate',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='DepartureFacility',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Container',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='TransportMeansCargoFacility',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='DepartureConveyanceFacility',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ArrivalConveyanceFacility',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='AdditionalDocumentIssuingPlace',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='AdditionalInformationAugmentation',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='ImmigrationStatusCodeText',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='PersonMarriage',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='CitizenshipNaturalizationText',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='LocationIdentification',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='LocationIdentification',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='SentenceDate',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='CitizenshipNaturalizationDate',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='CitizenshipNaturalizationCityName',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienLawfullyAdmittedPermanentResidenceEndDate',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienLawfullyAdmittedPermanentResidentIndicator',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienLawfullyAdmittedPermanentResidenceBeginDate',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienEnforcementEncounter',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienReligionCode',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienNonImmigrantStatus',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='MaritalStatusCode',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienImmigrationStatus',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienResidencyCountryName',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienBirthCountryName',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienChildrenQuantity',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienFamilyMembers',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FingerprintCaptureTechnique',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='AlertExpirationDate',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='languageCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='transliterationCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='scriptCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='formCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ConveyancePassengerFemaleQuantity',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ConveyancePassengerMaleQuantity',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonFingerprintSet',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonTooth',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonTooth',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonDNA',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='MGRSCoordinateSquareID',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='QualityValidityCode',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='QualityCommentTitleText',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='LanguageText',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='InsuranceEndDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsWorkIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ContactInformationIsHomeIndicator',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AdditionalDocumentAugmentation',n21namespace:String=niem21_it_URI},
		Tuple{n21:String='Train',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='PersonCapability',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='Identity',n21namespace:String=niem21_intel_URI},
		Tuple{n21:String='ReceiptNumberText',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='PersonNameCategoryCode',n21namespace:String=niem21_scr_URI},
		
		Tuple{n21:String='PersonDependent',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='VehicleMotorCarrierIdentification',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FirearmGaugeText',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonAlternateName',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FingerprintSet',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonFingerprintSet',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PersonFingerprintSetAugmentation',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='AdoptionEffectiveDate',n21namespace:String=niem21_scr_URI},
		Tuple{n21:String='PhysicalFeatureDescriptionDetail',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='SecuritiesCollectionEndDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='ObligationEndDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AssociationEndDate',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonGuardian',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonAuthorityFigure',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonParent',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonChild',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FamilyKinshipCategory',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='AlienCitizenship',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienCitizenshipCountryName',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='AlienCitizenshipType',n21namespace:String=niem21_im_URI},
		Tuple{n21:String='FamilyKinshipCategory',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='FaceImageSubjectPoseCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='AddressRepresentation',n21namespace:String=niem21_nc_URI},
		Tuple{n21:String='PersonPalmPrint',n21namespace:String=niem21_j_URI},
		Tuple{n21:String='FaceImageAttribute',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeAbstract',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageSubjectPose',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='personNameCategoryCode',n21namespace:String=niem21_j_URI},
		/*
		Tuple{n21:String='AcknowledgementData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AcknowledgementDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AcknowledgementID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AcknowledgingActivityName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AcknowledgingAgency',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AcknowledgingAgencyCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ActivityName',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ActivityUserLogonID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AddressDetails',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmAcknowledgementCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmAudibleIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmDescriptionCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmDuration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlarmID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmCreatorName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmImplementationVersionID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmParameterSet',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='algorithmTechnicalVersionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmVersion',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmVersionDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AlgorithmVersionReleaseDate',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AnalysisAlgorithm',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AnalysisEndDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AnalysisOrgCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AnalysisStartDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ArealDensityValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ArrayXY',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AtomicNumberValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='AzimuthOffset',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='BackgroundCountValues',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='BackgroundSpectrumID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='BackgroundSubtractionIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='BinaryUTF8Object',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='BooleanList',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CalibrationCreationDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CalibrationID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='calibrationKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='calibrationMeasurementUUID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CalibrationNuclide',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CalibrationSpectrumID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CargoDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseClosedIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseEventDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseKindCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='CaseLocationDescription',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='CaseMetadata',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseOfInterestUUID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CasePriorityCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseRelationshipDescriptionText',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='CaseRelationshipKindCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='CaseRequestCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='CaseResponseCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='CaseSet',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseSetQuantity',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseStartDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseStatus',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseStatusCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseStatusDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseStatusIssuerCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseThreatLevelCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseUUID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseWindowEndDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CaseWindowStartDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CBRNECase',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CBRNEncounterDevice',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='cepValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='channelQuantity',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ClassificationReasonText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ClassifiedByText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='compressionCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConfidenceAssessment',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConfidenceCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConfidencePointValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConfidenceRangeValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='convergenceDuration',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='Conveyance',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ConveyanceAugmentation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceBoundForCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceConveyanceRelationship',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ConveyanceID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceIdentification',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ConveyanceKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceOrgRelationship',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceOrgRelationshipKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyancePrimaryColorCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ConveyanceRegistration',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ConveyanceRegistrationAugmentation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceRelationshipKindCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ConveyanceRelationshipOriginID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ConveyanceRelationshipTargetID',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ConveyanceSecondaryColorCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ConveyanceSequenceNumber',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ConveyanceWeightDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CoordinateDuration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CoordinateList',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CoordinatesDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CoordinateSet',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CoordinatesMethodCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CountDoseData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='CountValues',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='CredentialsAuthenticatedCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='CurrentVersionID',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='DataFileCaptureData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DataFileCompressionDescriptionText',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='DataFileDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DataFileMetadata',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DataFileName',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='DataFileSequence',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='DataFileSequenceDescriptionText',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='DataFileSequenceIdentifier',n21namespace:String=niem21_cbrn_URI},
   
   Tuple{n21:String='DataFileSubjectCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DataFileUUID',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='dataFormatCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='dataQualityCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='DeclassDate',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeclassEventText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeclassExceptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeclassManualReviewIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEvent',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventAlarmData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventAnalysisResult',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventAnalyzedMeasurementData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventAssessmentData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventAssessmentID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='detectionEventCategoryCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventDataFile',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventDeviceCalibrationData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventDeviceData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventDeviceMeasurementData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='detectionEventKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventLocation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventSiteID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectionEventUserEntryData',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='DetectionEventUUID',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='DetectorDesignatorText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DetectorKindText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceDeviceRelationship',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceIdentifierData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceInfoDateTime',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='DeviceOperatorComments',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='DeviceOperatorID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameter',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterMaxValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterMinValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterPointValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterSettableIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterStatusIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterUOMText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterValueIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterValueListName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterValueListText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterValueText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceParameterVendorName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceRelationshipKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DeviceRelationshipStatusCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DocumentPrivacyActIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='DwellDuration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ElapsedSweepsQuantity',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Elevation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ElevationOffset',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EmployeeIdentifier',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceAssetID',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='EncounterDeviceCategoryCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='EncounterDeviceCategoryLevelCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceConfiguration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceCoordinates',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceHealthStatusCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceIdentification',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceLocation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceLocationName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceMeasurementID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceMfgID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceOperatorComments',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceOperatorText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceProbe',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceProbeID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceProbeKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceProbeModelName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceQualityControl',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceSpatialOrientation',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceStatus',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceStatusDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceStatusParameters',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceToItemBearing',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EncounterDeviceToItemDistance',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='EncounterDeviceVersion',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='EncounterRelationship',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='endEnergyValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EnergyCalibrationAdjustCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EnergyCalibrationAdjustIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EnergyDeviationValues',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EntryPersonID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Equation',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='EquationCoefficients',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EquationCovarianceMatrix',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='EquationDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EquationKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ErrorCodeDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ErrorCodeText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ErrorDescription',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ErrorNodeName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='EventOnsetDateTime',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='FileCaptureDeviceCategoryCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileCaptureDeviceID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileCaptureDuration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileCaptureStartTime',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='FileSet',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileSetDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileSetMember',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='FileSetName',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='FileSetQuantity',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='FileSetUUID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='GeographicCoordinates',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='GeoPosition',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='GrossCountData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='GrossCountQuantity',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='IdAcquisitionMethodCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='IdConfidenceCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ImagePerspectiveCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='InServiceIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='InspectionActivityCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='InspectionData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='InspectionDate',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='InspectionEventDateTime',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='InspectionResolutionCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='InspectionThreatFindingCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ItemDispositionStatusCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ItemPosition',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ItemSpectrumID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ItemSpeed',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Latitude',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Layer',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LayerDensityValue',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='LayerMaterialDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LayerMaterialKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LayerQuantity',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LayerSequenceNumber',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='listModeCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LiveTimeDuration',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LocationDirectionsText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Longitude',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='LowerLimitValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MapGuideBrandCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='MapGuideGridNumber',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='MapGuideLocation',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='MapGuideName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MapGuidePageNumber',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='MaximumProcessedDataValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MaximumSigmaValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeanPhotonValue',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='MeasuredItem',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='MeasuredItemDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasuredItemGeometryDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasuredItemID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasuredItemIdentification',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='MeasuredItemIDKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasuredItemKindCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='MeasuredItemQuantity',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasuredItemReferenceDate',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasurementStartDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MeasurementStopDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageContentError',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageContentHeader',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageCreationDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageDestination',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageDispatchDateTime',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageHandlingError',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageKindCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageOrigin',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageOriginOrDestination',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessagePriorityCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageStatus',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageStatusCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MessageVersionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MIMEContentCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='MIMEEncodingCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NetCountRateValues',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NonLinearityCorrection',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NonLinearityCorrectionIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NRCLicenseID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='Nuclide',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='nuclideActivityUnitsCode',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NuclideActivityValue',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='nuclideBetaEndPointEnergyValue',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='NuclideCategoryCode',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='NuclideCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='NuclideEstimatedPosition',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NuclideEstimatedShielding',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NuclideIdConfidence',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NuclideIdentification',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='NuclideSourceID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='occupiedIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='OffsetXValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='OffsetYValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='OffsetZValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='OperationalIndicator',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterNames',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterSet',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='parameterSetID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterSetList',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterSetPair',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='parameterUnitsText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterValues',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterValueText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ParameterValueUnitsText',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='ParentDeviceCategoryCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='ParentDeviceID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PersonName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotonData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotonEnergyValue',n21namespace:String=niem21_cbrn_URI},
   */
   Tuple{n21:String='PhotonSourceCode',n21namespace:String=niem21_cbrn_URI},
   /*
   Tuple{n21:String='PhotopeakContinuumValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakEnergyValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakIntensityValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakLibraryName',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakNetAreaValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakNuclide',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakResolutionValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PhotopeakSigmaValue',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PointXY',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PositionID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PositiveIntegerList',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='PriorVersionID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedChannelData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedGrossCountData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedGrossCountDataDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedSpectrumData',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedSpectrumDescriptionText',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedSpectrumID',n21namespace:String=niem21_cbrn_URI},
   Tuple{n21:String='ProcessedSpectrumImage',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='radAbsorbedDoseRateUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='radCountRateUnitsCode',n21namespace:String=niem21_cbrn_URI},
		
		Tuple{n21:String='radDoseRateUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='radDoseUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='radExposureRateUnitsCode',n21namespace:String=niem21_cbrn_URI},
		
		/*
		Tuple{n21:String='RadExposureRateValues',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='radExposureUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='radEnergyUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='radFWHMUnitsCode',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='radAbsorbedDoseRateUnitsCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadSourceActivity',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadSourceKindCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadTotalAbsorbedDoseValues',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RadTotalExposureValues',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RawDataProcessingMethodDescriptionText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RawDataStartStopIDList',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackFindingsText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackReasonText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackRecommendationCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackRecommendationDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReachbackRequestCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RealTimeDuration',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RefAlarmID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RefBackgroundSpectrumID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RefCalibrationSpectrumID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RefItemSpectrumID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RelatedCase',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RelatedCaseUUID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RelationshipBeginDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RelationshipEndDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RelativePositionOriginText',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='RemarkText',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='Report',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ReportDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestAgency',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestAgencyCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RequestScopeCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ResendRequestIndicator',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ResponseReport',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='RotationalOffset',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='sampleNumeric',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ScanIdentificationData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ScanIdentifierData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ScanQualityCode',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='SecondaryInspectionKindCode',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='SecondaryInspectionReferral',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SecondaryInspectionReferralID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SecondaryInspectionReferralReasonCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SecondaryInspectionResolution',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SecurityClassificationCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='sequenceNumeric',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='Shielding',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SimplexIndicator',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SiteLocation',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SiteMobileDescriptionText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SiteMobileIndicator',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SiteSpecialInfoText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SourceSystemFindingCategoryText',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SpectrumChannelData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SpectrumData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SpectrumID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SpectrumImageDataFile',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='spectrumKindCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SpectrumOverflowValue',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='startEnergyValue',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='subEquationNumber',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='subEquationNumeric',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='SystemEvent',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='SystemEventDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='systemOperatingModeCode',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='TemplateLibraryName',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TemplateRankedNuclide',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TemplateRankingData',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='ThreatDescriptionText',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='ThreatLevelDeterminationCode',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='ToDeviceID',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='Traversal',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TraversalBeginDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TraversalEndDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='TraversalID',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='TraversalOperatingModeCode',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='TrueNorthOffset',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='UpperLimitValue',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='UserName',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='VelocityUnitCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VersionEffectiveDateTime',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VersionIdentifier',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VersionKindCode',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VerticalOffset',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='VoltageAppliedValue',n21namespace:String=niem21_cbrn_URI},
		Tuple{n21:String='XDescriptionText',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='XValue',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='YDescriptionText',n21namespace:String=niem21_cbrn_URI},
		*/
		Tuple{n21:String='YValue',n21namespace:String=niem21_cbrn_URI},
		/*
		Tuple{n21:String='ActivityAgencyNotificationIndicator',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ActivityApprovalDate',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ActivityAugmentation',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ActivityEndTimeZoneCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ActivityAgencyNotificationIndicator',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ActivityTimeZoneCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDate',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='CaptureDescription',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='CaptureDescriptionCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDescriptionText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='CaptureDeviceGlobalIdentification',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='CaptureDeviceIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDeviceMakeText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDeviceModelText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDeviceMonitoringMode',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='CaptureDeviceMonitoringModeCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='CaptureDeviceMonitoringModeText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureDeviceSerialNumberText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureHorizontalPixelDensityValue',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureOrganization',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureResolution',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureResolutionCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureResolutionText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='CaptureSource',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='CaptureSourceCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureSourceText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CaptureVerticalPixelDensityValue',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFFormatCategoryIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFFormatOwnerIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFImage',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CBEFFVersionIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CharacterSetCommonNameCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CharacterSetIndexCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CharacterSetVersionIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='CodeManualCount',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ContentFirstRecordCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ContentRecordCount',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ContentRecordSummary',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='DomainVersionNumberIdentification',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FaceImage',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImage3DPoseAngle',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAcquisitionProfile',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FaceImageAcquisitionProfileCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FaceImageAcquisitionProfileText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttribute',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeAbstract',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FaceImageDescription',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageDescriptionCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FaceImageDescriptionText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FaceImageEyeColorAttribute',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FaceImageEyeColorAttributeCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageEyeColorAttributeText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FaceImageFeaturePoint',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageHairColorAttribute',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageHairColorAttributeCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FaceImageHairColorAttributeText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageAttributeText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImagePoseOffsetAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageSubjectPose',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageSubjectPoseCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FaceImageSubjectPoseText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FeaturePointCategory',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FeaturePointCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FeaturePointCategoryText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FeaturePointHorizontalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FeaturePointIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FeaturePointVerticalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerPattern',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerPatternCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerPatternCodeSourceCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerPatternText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerPositionCode',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FingerPositionIndicator',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FingerprintImage',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerprintImageImpressionCaptureCategory',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FingerprintImageImpressionCaptureCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FingerprintImageImpressionCaptureCategoryText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FingerprintImageMajorCasePrint',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FingerprintImageNISTQuality',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='FingerprintImagePosition',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='FingerprintImageSegmentationQuality',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='FingerprintPattern',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageBitsPerPixelQuantity',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageCaptureDetail',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='ImageCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='ImageColorSpace',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageColorSpaceCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageColorSpaceText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageCommentText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageCompressionAlgorithm',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='ImageCompressionAlgorithmCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='ImageCompressionAlgorithmText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageHorizontalLineLengthPixelQuantity',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageHorizontalPixelDensityValue',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='ImageQuality',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageRecordCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageReferenceIdentification',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageScaleUnitsCode',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='ImageVerticalLineLengthPixelQuantity',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='ImageVerticalPixelDensityValue',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='IrisEyeColorAttributeCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisEyePosition',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='IrisEyePositionCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisEyePositionText',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='IrisEyeRotationAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisEyeRotationUncertaintyValueText',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='IrisImage',n21namespace:String=niem21_ansi_nist_URI},
		*/
		Tuple{n21:String='IrisImageAcquisitionLightingSpectrumValue',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisImageCapture',n21namespace:String=niem21_ansi_nist_URI},
		/*
		Tuple{n21:String='IrisImageHorizontalOrientation',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisImageHorizontalOrientationCode',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisImageHorizontalOrientationText',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisImageScanCategory',n21namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='IrisImageScanCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
	

   Tuple{n21:String='IrisImageScanCategoryText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='IrisImageVerticalOrientation',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='IrisImageVerticalOrientationCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='IrisImageVerticalOrientationText',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='MajorCasePrintCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MajorCasePrintSegmentOffset',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MajorCasePrintText',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='MinutiaCategory',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaCategoryText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaDetail',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='Minutiae',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='MinutiaeFingerCorePosition',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeFingerDeltaPosition',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeFingerPatternDetail',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeFingerPosition',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='MinutiaeFingerPositionCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeFingerPositionText',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='MinutiaeFormatNISTStandardIndicator',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeImpressionCaptureCategory',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='MinutiaeImpressionCaptureCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeImpressionCaptureCategoryText',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='MinutiaeNISTStandard',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaePalmPosition',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='MinutiaePalmPositionCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaePalmPositionText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeQuantity',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeReadingSystem',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaeRidgeCountIndicator',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaIdentification',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='MinutiaPosition',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='MinutiaQualityValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='MinutiaRidgeCount',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='NativeScanningResolutionValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='NewsletterCount',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='NISTImage',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='NISTQualityMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='NominalTransmittingResolutionValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='OperatingManualCount',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='OrganizationDocumentCount',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='OrganizationName',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='PalmPosition',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PalmPositionCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PalmPositionText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PalmprintImage',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PatternCodeSourceCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PatternCorePosition',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PatternDeltaPosition',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PatternNISTStandardText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PatternUserText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureClassCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureColorDetail',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureDescriptionDetail',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureDescriptionText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureHeightMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureImage',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='PhysicalFeatureNCICCode',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='PhysicalFeaturePrimaryColorCode',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='PhysicalFeatureSecondaryColorCode',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='PhysicalFeatureSize',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureSubClassCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PhysicalFeatureWidthMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PosePitchAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PosePitchUncertaintyValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PoseRollAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PoseRollUncertaintyValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PoseYawAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PoseYawUncertaintyValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PositionBottomCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PositionDirectionDegreeValue',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='PositionHorizontalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PositionThetaAngleMeasure',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='PositionTopCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='PositionUncertaintyValue',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='PositionVerticalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='ProtectionOrderAugmentation',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='QualityAlgorithmProductIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='QualityAlgorithmVendorIdentification',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='QualityMeasureVendorIdentification',n21namespace:String=niem21_ansi_nist_URI},
   /*
   Tuple{n21:String='QualityValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='ReadingSystemCodingMethodCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='ReadingSystemName',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='ReadingSystemSubsystemIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='Record',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordForwardOrganizations',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordImage',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordRapSheetRequestIndicator',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordRetentionIndicator',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RecordTransactionData',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RidgeCountReferenceIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='RidgeCountValue',n21namespace:String=niem21_ansi_nist_URI},
   */
   Tuple{n21:String='SegmentBottomVerticalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentFingerText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentFingerViewCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentLeftHorizontalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentLocationCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentRightHorizontalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SegmentTopVerticalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI}
   /*
   Tuple{n21:String='SignatureCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SignatureImage',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SignatureImageVector',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SignatureImageVectorRepresentation',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='SignatureRepresentationCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TOUCount',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='Transaction',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionCharacterSetDirectory',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionContentSummary',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionControlIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionControlReferenceIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionDate',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionDestinationOrganization',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionDomain',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionHeaderText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionImageResolutionDetails',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionKeyText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionKeyTranslationText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionMajorVersionValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionMinorVersionValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionOrganization',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionOriginatingOrganization',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionPriorityValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionReasonText',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionSearchRequestCategoryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionSubmissionMilitaryCode',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionUserIdentification',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='TransactionUTCDate',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='VectorPenPressureValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='VectorPositionHorizontalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI},
   Tuple{n21:String='VectorPositionVerticalCoordinateValue',n21namespace:String=niem21_ansi_nist_URI}
*/
};



// properties having change of name within same namespace (and no extra handling)
property property21to3:Sequence(Tuple(n21:String,n21namespace:String,n3:String)) = Sequence{
		Tuple{n21:String='ReferralProperty',n21namespace:String=niem21_nc_URI,n3:String='ReferralItem'},

		Tuple{n21:String='BirthPlaceNearLargeCityName',n21namespace:String=niem21_scr_URI,n3:String='BirthplaceNearLargeCityName'},
		Tuple{n21:String='VisaFoilNumber',n21namespace:String=niem21_scr_URI,n3:String='VisaFoilNumberID'},
		Tuple{n21:String='LocaleJudicialDistrictCode',n21namespace:String=niem21_nc_URI,n3:String='LocaleJudicialDistrict'},
//		Tuple{n21:String='AreaGeographicCode',n21namespace:String=niem21_nc_URI,n3:String='AreaGeographic'},
		Tuple{n21:String='AlcoholTestResultQuantity',n21namespace:String=niem21_j_URI,n3:String='AlcoholTestResultQuantityText'},
		Tuple{n21:String='DutyTaxFeeRegimeCategory',n21namespace:String=niem21_it_URI,n3:String='DutyTaxFeeRegimeCategoryText'},
		Tuple{n21:String='BaggageReceiptNumber',n21namespace:String=niem21_im_URI,n3:String='BaggageReceiptNumberID'},
		Tuple{n21:String='VesselTrailerMake',n21namespace:String=niem21_nc_URI,n3:String='VesselTrailer'},
		Tuple{n21:String='PersonCitizenshipStatusCode',n21namespace:String=niem21_intel_URI,n3:String='PersonCitizenshipStatusCodeText'},
		Tuple{n21:String='AgencyInterestCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='AgencyInterestCategoryCodeText'},
//		Tuple{n21:String='ConveyanceIDIssuingJurisdictionCode',n21namespace:String=niem21_scr_URI,n3:String='ConveyanceIDIssuingJurisdiction'},
		Tuple{n21:String='Alert',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentation'},
		Tuple{n21:String='VehicleSubjectCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='VehicleSubjectCategoryCodeText'},
		Tuple{n21:String='VehicleCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='VehicleCategoryCodeText'},
//		Tuple{n21:String='SupportLevelCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='SupportLevelCategoryCodeText'},
		Tuple{n21:String='SoundexIndexValue',n21namespace:String=niem21_scr_URI,n3:String='SoundexIndexValueText'},
		Tuple{n21:String='SoftwareVersionNumber',n21namespace:String=niem21_scr_URI,n3:String='SoftwareVersionNumberID'},
//		Tuple{n21:String='ScreeningIdentificationAugmentation',n21namespace:String=niem21_scr_URI,n3:String='IdentificationAugmentation'},
		Tuple{n21:String='ReasonExcludedAdmissionCode',n21namespace:String=niem21_scr_URI,n3:String='ReasonExcludedAdmissionCodeText'},
		Tuple{n21:String='PersonConfidenceLevelPercentage',n21namespace:String=niem21_scr_URI,n3:String='PersonConfidenceLevelPercent'},
		Tuple{n21:String='NotificationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='NotificationCategoryCodeText'},
		Tuple{n21:String='InmateNumber',n21namespace:String=niem21_scr_URI,n3:String='InmateNumberID'},
//		Tuple{n21:String='ImmigrationStatus',n21namespace:String=niem21_scr_URI,n3:String='ScreeningImmigrationStatus'},
//		Tuple{n21:String='EncounterDeviceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonEncounterDeviceCategoryCode'},
		Tuple{n21:String='EmployeeCallNumber',n21namespace:String=niem21_scr_URI,n3:String='EmployeeCallNumberID'},
		Tuple{n21:String='EmployeeBadgeNumber',n21namespace:String=niem21_scr_URI,n3:String='EmployeeBadgeNumberID'},
//		Tuple{n21:String='Detention',n21namespace:String=niem21_scr_URI,n3:String='AlienDetention'},
		Tuple{n21:String='DepartureDate',n21namespace:String=niem21_scr_URI,n3:String='PersonDepartureDate'},
		
		Tuple{n21:String='Departure',n21namespace:String=niem21_scr_URI,n3:String='ScreeningDeparture'},
		Tuple{n21:String='CrossingReferralAgencyCode',n21namespace:String=niem21_scr_URI,n3:String='CrossingReferralAgencyCodeText'},
		Tuple{n21:String='CrossingAgencyCode',n21namespace:String=niem21_scr_URI,n3:String='CrossingAgencyCodeText'},
//		Tuple{n21:String='ConveyanceAugmentation',n21namespace:String=niem21_scr_URI,n3:String='VehicleAugmentation'},
		Tuple{n21:String='ArrivalDate',n21namespace:String=niem21_scr_URI,n3:String='PersonArrivalDate'},
		Tuple{n21:String='Arrival',n21namespace:String=niem21_scr_URI,n3:String='ScreeningArrival'},
		Tuple{n21:String='ApplicationStatusReason',n21namespace:String=niem21_scr_URI,n3:String='ApplicationStatusReasonText'},
		Tuple{n21:String='AlertCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ScreeningAlertCategoryCode'},
//		Tuple{n21:String='Alert',n21namespace:String=niem21_scr_URI,n3:String='AlertAugmentation'},
		Tuple{n21:String='UTMGridZoneSquareID',n21namespace:String=niem21_nc_URI,n3:String='MGRSGridZoneSquareID'},
		Tuple{n21:String='UTMGridZoneID',n21namespace:String=niem21_nc_URI,n3:String='MGRSGridZoneID'},
//		Tuple{n21:String='SecurityLevelText',n21namespace:String=niem21_nc_URI,n3:String='DocumentSensitivityText'},
		Tuple{n21:String='ReliabilityNumeric',n21namespace:String=niem21_nc_URI,n3:String='ReliabilityPercent'},
//		Tuple{n21:String='ReleaseProperty',n21namespace:String=niem21_nc_URI,n3:String='ReleaseItem'},
//		Tuple{n21:String='QualityCommentText',n21namespace:String=niem21_nc_URI,n3:String='QualityComment'},
		Tuple{n21:String='PropertyStyleText',n21namespace:String=niem21_nc_URI,n3:String='ItemStyleText'},
//		Tuple{n21:String='PropertyRecoveredValue',n21namespace:String=niem21_nc_URI,n3:String='ItemRecoveredValue'},
		Tuple{n21:String='PropertyDispositionLocationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemDispositionLocationAssociation'},
		Tuple{n21:String='PropertyCurrentResaleValue',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentResaleValue'},
		Tuple{n21:String='PropertyCurrentLocationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemCurrentLocationAssociation'},
//		Tuple{n21:String='ProgressPaymentAmountText',n21namespace:String=niem21_nc_URI,n3:String='ProgressPaymentAmount'},
		Tuple{n21:String='ProgramCapacityText',n21namespace:String=niem21_nc_URI,n3:String='ProgramCapacityQuantity'},
		Tuple{n21:String='ProbabilityNumeric',n21namespace:String=niem21_nc_URI,n3:String='ProbabilityPercent'},
		Tuple{n21:String='PersonDonorOrgan',n21namespace:String=niem21_nc_URI,n3:String='PersonOrganDonor'},
		Tuple{n21:String='PersonActivityInvolvementAssociation',n21namespace:String=niem21_nc_URI,n3:String='ActivityPersonAssociation'},
		Tuple{n21:String='Percentage',n21namespace:String=niem21_nc_URI,n3:String='Percent'},
//		Tuple{n21:String='MeasureText',n21namespace:String=niem21_nc_URI,n3:String='MeasureValueText'},
//		Tuple{n21:String='MeasureRangeValue',n21namespace:String=niem21_nc_URI,n3:String='MeasureDecimalRange'},
//		Tuple{n21:String='LocationGeographicElevation',n21namespace:String=niem21_nc_URI,n3:String='LocationElevation'},
//		Tuple{n21:String='LocationDepthMeasure',n21namespace:String=niem21_nc_URI,n3:String='LocationDepth'},
		Tuple{n21:String='LocaleEmergencyServicesCityName',n21namespace:String=niem21_nc_URI,n3:String='LocaleEmergencyServicesName'},
		Tuple{n21:String='IntellectualProperty',n21namespace:String=niem21_nc_URI,n3:String='IntellectualItem'},
//		Tuple{n21:String='InsuranceEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='InsuranceEffectiveDateRange'},
//		Tuple{n21:String='InsuranceCoveredProperty',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoveredItem'},
		Tuple{n21:String='InstantMessengerClientName',n21namespace:String=niem21_nc_URI,n3:String='InstantMessengerServiceName'},
		Tuple{n21:String='InjuryTreatmentText',n21namespace:String=niem21_nc_URI,n3:String='TreatmentText'},
		Tuple{n21:String='InjuryTreatmentProvider',n21namespace:String=niem21_nc_URI,n3:String='TreatmentProvider'},
		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIdentityAssociation'},
//		Tuple{n21:String='GeographicDatumCode',n21namespace:String=niem21_nc_URI,n3:String='GeographicDatumText'},
		Tuple{n21:String='EmailSubjectText',n21namespace:String=niem21_nc_URI,n3:String='MessageSubjectText'},
		Tuple{n21:String='EmailSentDate',n21namespace:String=niem21_nc_URI,n3:String='MessageSentDate'},
//		Tuple{n21:String='EmailSenderName',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderName'},
//		Tuple{n21:String='EmailSenderEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderEntity'},
		Tuple{n21:String='EmailSenderAddressID',n21namespace:String=niem21_nc_URI,n3:String='MessageSenderAddressID'},
		Tuple{n21:String='EmailSender',n21namespace:String=niem21_nc_URI,n3:String='MessageSender'},
//		Tuple{n21:String='EmailRecipientName',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientName'},
//		Tuple{n21:String='EmailRecipientEntity',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientEntity'},
		Tuple{n21:String='EmailRecipientAddressID',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipientAddressID'},
		Tuple{n21:String='EmailRecipient',n21namespace:String=niem21_nc_URI,n3:String='MessageRecipient'},
		Tuple{n21:String='EmailReceivedDate',n21namespace:String=niem21_nc_URI,n3:String='MessageReceivedDate'},
		Tuple{n21:String='EmailMessageText',n21namespace:String=niem21_nc_URI,n3:String='MessageText'},
		Tuple{n21:String='EmailID',n21namespace:String=niem21_nc_URI,n3:String='MessageID'},
//		Tuple{n21:String='EmailAttachmentImage',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentImage'},
//		Tuple{n21:String='EmailAttachmentDocument',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentDocument'},
//		Tuple{n21:String='EmailAttachmentBinary',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachmentBinary'},
		Tuple{n21:String='EmailAttachment',n21namespace:String=niem21_nc_URI,n3:String='MessageAttachment'},
		Tuple{n21:String='DrugMeasurement',n21namespace:String=niem21_nc_URI,n3:String='DrugMeasure'},
//		Tuple{n21:String='DrugDaysSupplyText',n21namespace:String=niem21_nc_URI,n3:String='DrugDaysSupplyQuantity'},
		Tuple{n21:String='DocumentSubmissionFee',n21namespace:String=niem21_nc_URI,n3:String='DocumentSubmissionAmount'},
//		Tuple{n21:String='DocumentOtherAddresseeName',n21namespace:String=niem21_nc_URI,n3:String='DocumentOtherRecipient'},
//		Tuple{n21:String='DocumentCoverageTextText',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageText'},
//		Tuple{n21:String='DocumentCoverageTextDate',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageDate'},
//		Tuple{n21:String='DocumentCoverageTextAddress',n21namespace:String=niem21_nc_URI,n3:String='DocumentCoverageAddress'},
//		Tuple{n21:String='DEAClassScheduleCode',n21namespace:String=niem21_nc_URI,n3:String='DEAClassScheduleText'},
//		Tuple{n21:String='ConveyanceSalesTaxPercentage',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceSalesTaxPercent'},
		Tuple{n21:String='BinaryLocationURI',n21namespace:String=niem21_nc_URI,n3:String='BinaryURI'},
//		Tuple{n21:String='BinaryFormatID',n21namespace:String=niem21_nc_URI,n3:String='BinaryFormatText'},
		Tuple{n21:String='BinaryAvailableLocationText',n21namespace:String=niem21_nc_URI,n3:String='BinaryLocationText'},
//		Tuple{n21:String='AddressBuildingText',n21namespace:String=niem21_nc_URI,n3:String='AddressBuildingName'},
//		Tuple{n21:String='VictimAffectedProperty',n21namespace:String=niem21_j_URI,n3:String='VictimAffectedItem'},
//		Tuple{n21:String='VehicleCargoBodyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCargoBodyCategoryCode'},
//		Tuple{n21:String='Treatment',n21namespace:String=niem21_j_URI,n3:String='TreatmentAugmentation'},
		Tuple{n21:String='TargetProperty',n21namespace:String=niem21_j_URI,n3:String='TargetItem'},
//		Tuple{n21:String='StatuteOffenseMinnesotaCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseAPCOCode'},

		Tuple{n21:String='StatuteOffenseEnhancibleIndicator',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseEnhanceableIndicator'},
		Tuple{n21:String='SentenceModificationConfinementCreditDayText',n21namespace:String=niem21_j_URI,n3:String='SentenceModificationConfinementCreditDayQuantity'},
//		Tuple{n21:String='SecuritiesRansomMoneyCode',n21namespace:String=niem21_j_URI,n3:String='SecuritiesRansomMoneyText'},
		Tuple{n21:String='RoadwayGradeSlopePercentage',n21namespace:String=niem21_j_URI,n3:String='RoadwayGradeSlopePercent'},
		Tuple{n21:String='RegisteredOffenderDescription',n21namespace:String=niem21_j_URI,n3:String='RegisteredOffenderDescriptionText'},
		Tuple{n21:String='RegisterActionTitle',n21namespace:String=niem21_j_URI,n3:String='RegisterActionTitleText'},
		Tuple{n21:String='PropertyTotalDamageValue',n21namespace:String=niem21_j_URI,n3:String='ItemTotalDamageValue'},
		Tuple{n21:String='PropertySightedIndicator',n21namespace:String=niem21_j_URI,n3:String='ItemSightedIndicator'},
		Tuple{n21:String='PropertySeizureWarrant',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureWarrant'},
//		Tuple{n21:String='PropertySeizureSeizingEnforcementOfficial',n21namespace:String=niem21_j_URI,n3:String='ItemSeizingEnforcementOfficial'},
		Tuple{n21:String='PropertySeizureReleaseConditionText',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureReleaseConditionText'},
		
		Tuple{n21:String='PropertySeizureProperty',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureItem'},
		Tuple{n21:String='PropertySeizurePossessingPerson',n21namespace:String=niem21_j_URI,n3:String='ItemSeizurePossessingPerson'},
		Tuple{n21:String='PropertySeizureOwningPerson',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureOwningPerson'},
		Tuple{n21:String='PropertySeizureMethodText',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureMethodText'},
		Tuple{n21:String='PropertySeizureDisposition',n21namespace:String=niem21_j_URI,n3:String='ItemSeizureDisposition'},
		Tuple{n21:String='PropertySeizure',n21namespace:String=niem21_j_URI,n3:String='ItemSeizure'},
		Tuple{n21:String='PropertyNCICIdentification',n21namespace:String=niem21_j_URI,n3:String='ItemNCICIdentification'},
		Tuple{n21:String='PropertyMissingValue',n21namespace:String=niem21_j_URI,n3:String='ItemMissingValue'},
		Tuple{n21:String='PropertyFederalIdentification',n21namespace:String=niem21_j_URI,n3:String='ItemFederalIdentification'},
//		Tuple{n21:String='PropertyDispositionCode',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionCode'},
//		Tuple{n21:String='PropertyDispositionAugmentation',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionAugmentation'},
		Tuple{n21:String='PropertyDetailValue',n21namespace:String=niem21_j_URI,n3:String='ItemDetailValue'},
		
		
//		Tuple{n21:String='PropertyDetailText',n21namespace:String=niem21_j_URI,n3:String='ItemDetailText'},
		Tuple{n21:String='PropertyDetailDescription',n21namespace:String=niem21_j_URI,n3:String='ItemDetailDescriptionText'},
//		Tuple{n21:String='PropertyDetailCode',n21namespace:String=niem21_j_URI,n3:String='ItemDetailCode'},
//		Tuple{n21:String='PropertyCategoryNIBRSPropertyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSPropertyCategoryCode'},
//		Tuple{n21:String='PropertyCategoryNIBRSCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSCode'},

//		Tuple{n21:String='PropertyCategoryNCICTYPCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPCode'},
//		Tuple{n21:String='PropertyCategoryNCICTYPACode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPACode'},
//		Tuple{n21:String='PersonToothAugmentation',n21namespace:String=niem21_j_URI,n3:String='ToothAugmentation'},
//		Tuple{n21:String='personNameCategoryCode',n21namespace:String=niem21_j_URI,n3:String='PersonNameCategoryCode'},

//		Tuple{n21:String='PersonJewelryCategoryText',n21namespace:String=niem21_j_URI,n3:String='JewelryCategoryText'},
		Tuple{n21:String='PersonIssuedPropertyTitleAbstract',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitleAbstract'},
//		Tuple{n21:String='PersonIssuedPropertyTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemTitle'},
//		Tuple{n21:String='PersonIssuedPropertyRegistrationTitle',n21namespace:String=niem21_j_URI,n3:String='PersonIssuedItemRegistrationTitle'},
//		Tuple{n21:String='PersonInjurySeverityCode',n21namespace:String=niem21_j_URI,n3:String='InjurySeverityCode'},
//		Tuple{n21:String='PersonInjuryLocationCode',n21namespace:String=niem21_j_URI,n3:String='InjuryLocationCode'},
//		Tuple{n21:String='PersonHitResultsCode',n21namespace:String=niem21_j_URI,n3:String='PersonHitResultsText'},
//		Tuple{n21:String='PassagePointMethodText',n21namespace:String=niem21_j_URI,n3:String='PassagePointMethodOfAccessText'},
		Tuple{n21:String='MotorCarrierHAZMATTransportationIndicator',n21namespace:String=niem21_j_URI,n3:String='MotorCarrierHazMatTransportationIndicator'},
		Tuple{n21:String='IncidentStolenProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentStolenItem'},
		Tuple{n21:String='IncidentSeizedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentSeizedItem'},
		Tuple{n21:String='IncidentRecoveredProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentRecoveredItem'},
		Tuple{n21:String='IncidentPropertyDisposition',n21namespace:String=niem21_j_URI,n3:String='IncidentItemDisposition'},
		Tuple{n21:String='IncidentInvolvedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentInvolvedItem'},
		Tuple{n21:String='IncidentFormComment',n21namespace:String=niem21_j_URI,n3:String='IncidentFormCommentText'},
		Tuple{n21:String='IncidentDamagedProperty',n21namespace:String=niem21_j_URI,n3:String='IncidentDamagedItem'},
		Tuple{n21:String='ForceWeaponProperty',n21namespace:String=niem21_j_URI,n3:String='ForceWeaponItem'},
		Tuple{n21:String='ForceToolProperty',n21namespace:String=niem21_j_URI,n3:String='ForceToolItem'},
		Tuple{n21:String='EvidenceDocumentBinary',n21namespace:String=niem21_j_URI,n3:String='EvidenceDocumentationBinary'},
//		Tuple{n21:String='DrugDEACode',n21namespace:String=niem21_j_URI,n3:String='DrugCategoryDEACode'},
		Tuple{n21:String='DriverLicenseCardID',n21namespace:String=niem21_j_URI,n3:String='DriverLicenseCardIdentification'},
//		Tuple{n21:String='CustodyTransferProperty',n21namespace:String=niem21_j_URI,n3:String='CustodyTransferItem'},
//		Tuple{n21:String='CrashLocationAugmentation',n21namespace:String=niem21_j_URI,n3:String='LocationAugmentation'},
//		Tuple{n21:String='CourtOrderDesignatedProperty',n21namespace:String=niem21_j_URI,n3:String='CourtOrderDesignatedItem'},
		Tuple{n21:String='CommercialVehiclePRISMPreviouslyTargetedIndicator',n21namespace:String=niem21_j_URI,n3:String='CommercialVehiclePreviouslyTargetedIndicator'},
		Tuple{n21:String='CommercialVehiclePRISMCurrentlyTargetedIndicator',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCurrentlyTargetedIndicator'},
//		Tuple{n21:String='BookingSeizedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingSeizedItem'},
//		Tuple{n21:String='BookingRetainedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingRetainedItem'},
//		Tuple{n21:String='BookingDepositedProperty',n21namespace:String=niem21_j_URI,n3:String='BookingDepositedItem'},
		Tuple{n21:String='Bond',n21namespace:String=niem21_j_URI,n3:String='BailBond'},
//		Tuple{n21:String='ArrestInvolvedProperty',n21namespace:String=niem21_j_URI,n3:String='ArrestInvolvedItem'},
//		Tuple{n21:String='WCODocumentNameCategory',n21namespace:String=niem21_it_URI,n3:String='WCODocumentNameCategoryCode'},
		Tuple{n21:String='ValuationAdjustmentPercentage',n21namespace:String=niem21_it_URI,n3:String='ValuationAdjustmentPercent'},
//		Tuple{n21:String='ValuationAdditionsIndicator',n21namespace:String=niem21_it_URI,n3:String='ValuationAdditionsCode'},
//		Tuple{n21:String='UnloadingLocationCategory',n21namespace:String=niem21_it_URI,n3:String='UnloadingLocationCategoryCode'},
		Tuple{n21:String='UNDGContactIDCode',n21namespace:String=niem21_it_URI,n3:String='UNDGContactIDCategory'},
		Tuple{n21:String='TransshipmentPlace',n21namespace:String=niem21_it_URI,n3:String='TransshipmentPlaceName'},
		Tuple{n21:String='TransportMeansOwnerIDCode',n21namespace:String=niem21_it_URI,n3:String='TransportMeansOwnerIDCategory'},
		Tuple{n21:String='TransportMeansOperatorIDCode',n21namespace:String=niem21_it_URI,n3:String='TransportMeansOperatorIDCategory'},
		Tuple{n21:String='StuffingEstablishmentIDCode',n21namespace:String=niem21_it_URI,n3:String='StuffingEstablishmentIDCategory'},
		Tuple{n21:String='StevedoreIDCode',n21namespace:String=niem21_it_URI,n3:String='StevedoreIDCategory'},
		Tuple{n21:String='SequenceNumber',n21namespace:String=niem21_it_URI,n3:String='SequenceNumeric'},
		Tuple{n21:String='SellerIDCode',n21namespace:String=niem21_it_URI,n3:String='SellerIDCategory'},
		Tuple{n21:String='SealInformation',n21namespace:String=niem21_it_URI,n3:String='Seal'},
		Tuple{n21:String='RateOfExchange',n21namespace:String=niem21_it_URI,n3:String='RateOfExchangePercent'},
		Tuple{n21:String='ProcessingEstablishmentIDCode',n21namespace:String=niem21_it_URI,n3:String='ProcessingEstablishmentIDCategory'},
		Tuple{n21:String='ProcessingEstablishment',n21namespace:String=niem21_it_URI,n3:String='ProcessingEstablishmentText'},
		Tuple{n21:String='PreviousCustomsDocumentNumber',n21namespace:String=niem21_it_URI,n3:String='PreviousCustomsDocumentNumberID'},
//		Tuple{n21:String='PaymentAugmentation',n21namespace:String=niem21_it_URI,n3:String='ObligationAugmentation'},
		Tuple{n21:String='NTNPassportNumber',n21namespace:String=niem21_it_URI,n3:String='NTNPassportNumberID'},
		Tuple{n21:String='NotifyPartyIdCode',n21namespace:String=niem21_it_URI,n3:String='NotifyPartyIDCategory'},
		Tuple{n21:String='NonVesselOperatingCarrierIdCode',n21namespace:String=niem21_it_URI,n3:String='NonVesselOperatingCarrierIDCategory'},
		Tuple{n21:String='MasterIdCode',n21namespace:String=niem21_it_URI,n3:String='MasterIDCategory'},
		Tuple{n21:String='ManufacturerIdCode',n21namespace:String=niem21_it_URI,n3:String='ManufacturerIDCategory'},
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_it_URI,n3:String='LocationCategoryCodeText'},
//		Tuple{n21:String='LoadingLocationCode',n21namespace:String=niem21_it_URI,n3:String='LoadingLocationCategoryText'},
		Tuple{n21:String='InvoiceSequenceNumber',n21namespace:String=niem21_it_URI,n3:String='InvoiceSequenceNumeric'},
		Tuple{n21:String='InvoiceLineNumber',n21namespace:String=niem21_it_URI,n3:String='InvoiceLineNumberID'},
		Tuple{n21:String='IntermediateConsigneeIdCode',n21namespace:String=niem21_it_URI,n3:String='IntermediateConsigneeIDCategory'},
		Tuple{n21:String='IntermediateCarrierIdCode',n21namespace:String=niem21_it_URI,n3:String='IntermediateCarrierIDCategory'},
		Tuple{n21:String='ImporterIdCode',n21namespace:String=niem21_it_URI,n3:String='ImporterIDCategory'},
		Tuple{n21:String='HandlingInstructions',n21namespace:String=niem21_it_URI,n3:String='HandlingInstructionsText'},
		Tuple{n21:String='GuaranteeReferenceIdentifier',n21namespace:String=niem21_it_URI,n3:String='GuaranteeReferenceID'},
		Tuple{n21:String='GoodsTariffCodeNumberCategory',n21namespace:String=niem21_it_URI,n3:String='GoodsTariffCodeNumberCategoryText'},
		Tuple{n21:String='GoodsStatisticalValue',n21namespace:String=niem21_it_URI,n3:String='GoodsItemStatisticalValue'},
		Tuple{n21:String='GoodsReceivedPlace',n21namespace:String=niem21_it_URI,n3:String='GoodsReceivedPlaceName'},
		Tuple{n21:String='GoodsPackaging',n21namespace:String=niem21_it_URI,n3:String='GoodsItemPackagingText'},
//		Tuple{n21:String='GoodsNetWeight',n21namespace:String=niem21_it_URI,n3:String='GoodsNetWeightMeasure'},
//		Tuple{n21:String='GoodsManufacturedRegionOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedRegionOriginCode'},
//		Tuple{n21:String='GoodsManufacturedCountryOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedCountryOriginCode'},
//		Tuple{n21:String='GoodsLocationCode',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationCategoryText'},
		Tuple{n21:String='GoodsLocation',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationText'},
		Tuple{n21:String='GoodsItem',n21namespace:String=niem21_it_URI,n3:String='GoodsItemMaterialText'},
		Tuple{n21:String='GoodsConsignedPlace',n21namespace:String=niem21_it_URI,n3:String='GoodsConsignedPlaceName'},
		Tuple{n21:String='ExporterIDCode',n21namespace:String=niem21_it_URI,n3:String='ExporterIDCategory'},
		Tuple{n21:String='EquipmentIdentifier',n21namespace:String=niem21_it_URI,n3:String='EquipmentID'},
		Tuple{n21:String='DutyTaxFeeCategory',n21namespace:String=niem21_it_URI,n3:String='DutyTaxFeeCategoryText'},
		Tuple{n21:String='DeconsolidatorIDCode',n21namespace:String=niem21_it_URI,n3:String='DeconsolidatorIDCategory'},
		Tuple{n21:String='DeclarationTotalItemsNumber',n21namespace:String=niem21_it_URI,n3:String='DeclarationTotalItemsQuantity'},
		Tuple{n21:String='CustomsValuation',n21namespace:String=niem21_it_URI,n3:String='CustomsValuationAmount'},
		Tuple{n21:String='CustomsProcedure',n21namespace:String=niem21_it_URI,n3:String='CustomsProcedureText'},
//		Tuple{n21:String='CustomsOfficeDutyTaxPayment',n21namespace:String=niem21_it_URI,n3:String='CustomsOfficeDutyTaxPaymentText'},
		Tuple{n21:String='ContainerTerminalOperatorIDCode',n21namespace:String=niem21_it_URI,n3:String='ContainerTerminalOperatorIDCategory'},
		
		Tuple{n21:String='ContainerReferencedID',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerReferenceID'},
		Tuple{n21:String='ContainerLoadedWeight',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLoadedWeight'},
		Tuple{n21:String='ContainerLoadedText',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLoadedText'},
		Tuple{n21:String='ContainerLegalStatusIndicator',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLegalStatusIndicator'},
		Tuple{n21:String='ContainerLastLocation',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerLastLocation'},
		Tuple{n21:String='ContainerIdentification',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerIdentification'},
		Tuple{n21:String='ContainerCargoItem',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerCargoItem'},
		Tuple{n21:String='ConsortiumCarrierIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsortiumCarrierIDCategory'},
		Tuple{n21:String='ConsolidatorIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsolidatorIDCategory'},
		Tuple{n21:String='ConsignorIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsignorIDCategory'},
		Tuple{n21:String='ConsigneeIDCode',n21namespace:String=niem21_it_URI,n3:String='ConsigneeIDCategory'},
		Tuple{n21:String='CarrierIDCode',n21namespace:String=niem21_it_URI,n3:String='CarrierIDCategory'},
		Tuple{n21:String='BuyerIDCode',n21namespace:String=niem21_it_URI,n3:String='BuyerIDCategory'},
		Tuple{n21:String='BrokerIDCode',n21namespace:String=niem21_it_URI,n3:String='BrokerIDCategory'},
		Tuple{n21:String='AgentAuthorizationCodeText',n21namespace:String=niem21_it_URI,n3:String='AgentAuthorizationIDCategory'},
		Tuple{n21:String='AdditionalDocumentRefNumber',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentRefNumberID'},
		
//		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode'},
		Tuple{n21:String='SystemIdentifier',n21namespace:String=niem21_intel_URI,n3:String='SystemIdentification'},
		Tuple{n21:String='SubjectHandlingCode',n21namespace:String=niem21_intel_URI,n3:String='SubjectHandlingCodeText'},
		Tuple{n21:String='SubjectCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='SubjectCategoryCodeText'},
		Tuple{n21:String='StateINACode',n21namespace:String=niem21_intel_URI,n3:String='StateINACodeText'},
//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='PhysicalFeatureCategoryCodeText'},
		Tuple{n21:String='PersonSystemIdentifier',n21namespace:String=niem21_intel_URI,n3:String='PersonSystemIdentification'},
		Tuple{n21:String='PersonLocationUsageCode',n21namespace:String=niem21_intel_URI,n3:String='PersonLocationUsageCodeText'},
//		Tuple{n21:String='PersonLocationDetailsAugmentation',n21namespace:String=niem21_intel_URI,n3:String='LocationAugmentation'},
		Tuple{n21:String='PersonEducationDegreeCode',n21namespace:String=niem21_intel_URI,n3:String='PersonEducationDegreeCodeText'},
//		Tuple{n21:String='LocationCountryFIPS10-4PlusNCTCCode',n21namespace:String=niem21_intel_URI,n3:String='LocationCountryFIPS10-4PlusNCTCCodeText'},
//		Tuple{n21:String='IdentityAssociation',n21namespace:String=niem21_intel_URI,n3:String='IdentityAssociationAugmentation'},
		Tuple{n21:String='GlobalRegionCode',n21namespace:String=niem21_intel_URI,n3:String='GlobalRegionCodeText'},
		Tuple{n21:String='CBEFF',n21namespace:String=niem21_intel_URI,n3:String='CBEFFText'},
		Tuple{n21:String='AgencySubjectHandlingFBICode',n21namespace:String=niem21_intel_URI,n3:String='AgencySubjectHandlingFBICodeText'},
		Tuple{n21:String='SevisID',n21namespace:String=niem21_im_URI,n3:String='SEVISID'},
		Tuple{n21:String='SentenceTime',n21namespace:String=niem21_im_URI,n3:String='SentenceTimeNumeric'},
		Tuple{n21:String='PL9484AmendedIndicator',n21namespace:String=niem21_im_URI,n3:String='PL94-484AmendedIndicator'},
		Tuple{n21:String='EndDate',n21namespace:String=niem21_im_URI,n3:String='LocationAssociationEndDate'},
//		Tuple{n21:String='EmploymentAugmentation',n21namespace:String=niem21_im_URI,n3:String='PersonEmploymentAssociationAugmentation'},
		Tuple{n21:String='BeginDate',n21namespace:String=niem21_im_URI,n3:String='LocationAssociationBeginDate'},
		
		Tuple{n21:String='DisciplinaryAction',n21namespace:String=niem21_im_URI,n3:String='AlienStudentDisciplinaryAction'},
//		Tuple{n21:String='Dependent',n21namespace:String=niem21_im_URI,n3:String='SEVISPersonDependentAssociation'},
//		Tuple{n21:String='Alien',n21namespace:String=niem21_im_URI,n3:String='AlienRole'},
		Tuple{n21:String='ValueListURN',n21namespace:String=niem21_em_URI,n3:String='ValueListURNText'},
		
		Tuple{n21:String='ResourceRequestedArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceRequestedArrivalDateTime'},
		Tuple{n21:String='ResourceFundCode',n21namespace:String=niem21_em_URI,n3:String='ResourceFundCodeText'},
		Tuple{n21:String='ResourceEstimatedDepartureDate',n21namespace:String=niem21_em_URI,n3:String='ResourceEstimatedDepartureDateTime'},
		Tuple{n21:String='ResourceEstimatedArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceEstimatedArrivalDateTime'},
		Tuple{n21:String='ResourceAnticipatedReturnDate',n21namespace:String=niem21_em_URI,n3:String='ResourceAnticipatedReturnDateTime'},
		Tuple{n21:String='ResourceActualDepartureDate',n21namespace:String=niem21_em_URI,n3:String='ResourceActualDepartureDateTime'},
		Tuple{n21:String='ResourceActualArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ResourceActualArrivalDateTime'},
//		Tuple{n21:String='NotificationRecipientContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationRecipientContactEmailID'},
//		Tuple{n21:String='NotificationOriginatorContactEmail',n21namespace:String=niem21_em_URI,n3:String='NotificationOriginatorContactEmailID'},
		Tuple{n21:String='MessageSentDate',n21namespace:String=niem21_em_URI,n3:String='MessageSentDateTime'},
		Tuple{n21:String='InventoryRefreshDate',n21namespace:String=niem21_em_URI,n3:String='InventoryRefreshDateTime'},
		Tuple{n21:String='EMSOffloadAmbulance',n21namespace:String=niem21_em_URI,n3:String='EMSOffloadAmbulanceCapability'},
		Tuple{n21:String='EMSOffloadAirTransport',n21namespace:String=niem21_em_URI,n3:String='EMSOffloadAirTransportCapability'},
		Tuple{n21:String='DepartureDate',n21namespace:String=niem21_em_URI,n3:String='DepartureDateTime'},
		Tuple{n21:String='BinaryChecksumDigest',n21namespace:String=niem21_em_URI,n3:String='BinaryChecksumDigestID'},
		Tuple{n21:String='ArrivalDate',n21namespace:String=niem21_em_URI,n3:String='ArrivalDateTime'},
//		Tuple{n21:String='AlertHandlingIdentification',n21namespace:String=niem21_em_URI,n3:String='AlertHandlingID'},
//		Tuple{n21:String='AlarmMonitoringServiceProviderIdentification',n21namespace:String=niem21_em_URI,n3:String='AlarmMonitoringServiceProviderID'},
//		Tuple{n21:String='AlarmLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='LocationAugmentation'},

		Tuple{n21:String='AlarmEventLocationAugmentation',n21namespace:String=niem21_em_URI,n3:String='AlarmEventLocation'},
		Tuple{n21:String='BondAmount',n21namespace:String=niem21_j_URI,n3:String='BailBondAmount'},
		Tuple{n21:String='BondConditionDescriptionText',n21namespace:String=niem21_j_URI,n3:String='BailBondConditionDescriptionText'},
		
		Tuple{n21:String='BondIssuerEntity',n21namespace:String=niem21_j_URI,n3:String='BailBondIssuerEntity'},
		Tuple{n21:String='BondPaymentDescriptionText',n21namespace:String=niem21_j_URI,n3:String='BailBondPaymentDescriptionText'},
		Tuple{n21:String='BondRevokeDate',n21namespace:String=niem21_j_URI,n3:String='BailBondRevokeDate'},
//		Tuple{n21:String='BondSuretyName',n21namespace:String=niem21_j_URI,n3:String='BailBondSuretyEntity'},
		Tuple{n21:String='BondTerminationDate',n21namespace:String=niem21_j_URI,n3:String='BailBondTerminationDate'},
		Tuple{n21:String='BondTerminationCategoryText',n21namespace:String=niem21_j_URI,n3:String='BailBondTerminationCategoryText'},
		Tuple{n21:String='RangeMinimumValue',n21namespace:String=niem21_nc_URI,n3:String='RangeMinimumDecimalValue'},
		Tuple{n21:String='RangeMaximumValue',n21namespace:String=niem21_nc_URI,n3:String='RangeMaximumDecimalValue'},
		Tuple{n21:String='RegistrationJurisdiction',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionAbstract'},
		Tuple{n21:String='StatusText',n21namespace:String=niem21_nc_URI,n3:String='StatusCommentText'},
		Tuple{n21:String='AreaPolygonGeographicCoordinate',n21namespace:String=niem21_nc_URI,n3:String='PolygonCoordinate'},
//		Tuple{n21:String='PersonActivityInvolvementText',n21namespace:String=niem21_nc_URI,n3:String='ActivityInvolvementText'},
//		Tuple{n21:String='LocationAddressGrid',n21namespace:String=niem21_nc_URI,n3:String='AddressGrid'},
//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='TelephoneNumberCategoryText'},
		Tuple{n21:String='MeasureCategoryText',n21namespace:String=niem21_nc_URI,n3:String='MeasureMethodText'}
//		Tuple{n21:String='MeasureUnitText',n21namespace:String=niem21_j_URI,n3:String='GeographicDatumText'}
};
////////////////////////// name, namespace, substitutionGroup override
property property21to3NameNamespaceSubstitutionGroup:Sequence(Tuple(n21:String,n21namespace:String,n3:String,n3namespace:String,sgName:String,sgNamespace:String)) = Sequence{
		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='AdditionalDocumentCategory',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='VehicleUseCode',n21namespace:String=niem21_j_URI,n3:String='VehicleUseCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleUse',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TelephoneNumberAugmentation',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberAugmentation',n3namespace:String=niem21_scr_URI,sgName:String='TelephoneNumberAugmentationPoint',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ConveyanceRegistrationIdentification',n21namespace:String=niem21_intel_URI,n3:String='ConveyanceRegistrationIdentification',n3namespace:String=niem21_intel_URI,sgName:String='RegistrationIdentification',sgNamespace:String=niem21_j_URI	},

		Tuple{n21:String='AircraftFuselageColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftFuselageColorCode',n3namespace:String=niem21_j_URI,sgName:String='AircraftFuselageColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='AircraftMakeCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftMakeCode',n3namespace:String=niem21_j_URI,sgName:String='AircraftMake',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='AircraftModelCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftModelCode',n3namespace:String=niem21_j_URI,sgName:String='AircraftModel',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='AircraftStyleCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftStyleCode',n3namespace:String=niem21_j_URI,sgName:String='AircraftStyle',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='AircraftWingColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftWingColorCode',n3namespace:String=niem21_j_URI,sgName:String='AircraftWingColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='AlcoholInvolvementSuspicionCode',n21namespace:String=niem21_j_URI,n3:String='AlcoholInvolvementSuspicionCode',n3namespace:String=niem21_j_URI,sgName:String='AlcoholInvolvementSuspicion',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='AlcoholTestCategoryCode',n21namespace:String=niem21_j_URI,n3:String='AlcoholTestCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='AlcoholTestCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='AlcoholTestResultCode',n21namespace:String=niem21_j_URI,n3:String='AlcoholTestResultCode',n3namespace:String=niem21_j_URI,sgName:String='AlcoholTestResult',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='AlcoholTestStatusCode',n21namespace:String=niem21_j_URI,n3:String='AlcoholTestStatusCode',n3namespace:String=niem21_j_URI,sgName:String='AlcoholTestStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ArrestCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ArrestCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ArrestCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ArrestSubjectCountCode',n21namespace:String=niem21_j_URI,n3:String='ArrestSubjectCountCode',n3namespace:String=niem21_j_URI,sgName:String='ArrestSubjectCount',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CDLHolderCode',n21namespace:String=niem21_j_URI,n3:String='CDLHolderCode',n3namespace:String=niem21_j_URI,sgName:String='CDLHolder',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ChargeNCICCode',n21namespace:String=niem21_j_URI,n3:String='ChargeNCICCode',n3namespace:String=niem21_j_URI,sgName:String='ChargeNCIC',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ChargeUCRCode',n21namespace:String=niem21_j_URI,n3:String='ChargeUCRCode',n3namespace:String=niem21_j_URI,sgName:String='ChargeUCR',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleCargoBodyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleCargoBodyCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='CommercialVehicleCargoBodyCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CommercialVehicleConfigurationCode',n21namespace:String=niem21_j_URI,n3:String='CommercialVehicleConfigurationCode',n3namespace:String=niem21_j_URI,sgName:String='CommercialVehicleConfiguration',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorPrimaryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VehicleColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorSecondaryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ConveyanceFuelCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceFuelCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceFuelCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ConveyancePartBrandCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartBrandCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyancePartBrand',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyancePartCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyancePartCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceRegistrationPlateCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceRegistrationPlateCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceRegistrationPlateColorCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceRegistrationPlateColor',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceRegistrationStatusCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceRegistrationStatusAbstract',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ConveyanceRegistrationStatusDetailCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailCode',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceRegistrationStatusDetail',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CourtCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CourtCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='CourtCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverContributingCircumstancesCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverContributingCircumstancesCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDriverContributingCircumstances',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverDistractionCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverDistractionCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDriverDistraction',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverLicenseCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverLicenseCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDriverLicenseCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverLicenseClassCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverLicenseClassCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDriverLicenseClass',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverLicensePermitStatusCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverLicensePermitStatusCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicensePermitStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDriverViolationCode',n21namespace:String=niem21_j_URI,n3:String='CrashDriverViolationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDriverViolation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDrivingRestrictionCode',n21namespace:String=niem21_j_URI,n3:String='CrashDrivingRestrictionCode',n3namespace:String=niem21_j_URI,sgName:String='DrivingRestrictionValue',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashDrivingViolationCode',n21namespace:String=niem21_j_URI,n3:String='CrashDrivingViolationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashDrivingViolation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashEnvironmentContributingCircumstancesCode',n21namespace:String=niem21_j_URI,n3:String='CrashEnvironmentContributingCircumstancesCode',n3namespace:String=niem21_j_URI,sgName:String='CrashEnvironmentContributingCircumstances',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashFirstHarmfulEventCode',n21namespace:String=niem21_j_URI,n3:String='CrashFirstHarmfulEventCode',n3namespace:String=niem21_j_URI,sgName:String='CrashFirstHarmfulEvent',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashFirstHarmfulEventLocationCode',n21namespace:String=niem21_j_URI,n3:String='CrashFirstHarmfulEventLocationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashFirstHarmfulEventLocation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashJunctionRelationCode',n21namespace:String=niem21_j_URI,n3:String='CrashJunctionRelationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashJunctionRelation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashLightConditionCode',n21namespace:String=niem21_j_URI,n3:String='CrashLightConditionCode',n3namespace:String=niem21_j_URI,sgName:String='CrashLightCondition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashMannerCode',n21namespace:String=niem21_j_URI,n3:String='CrashMannerCode',n3namespace:String=niem21_j_URI,sgName:String='CrashManner',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashRoadContributingCircumstancesCode',n21namespace:String=niem21_j_URI,n3:String='CrashRoadContributingCircumstancesCode',n3namespace:String=niem21_j_URI,sgName:String='CrashRoadContributingCircumstances',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashRoadSurfaceConditionCode',n21namespace:String=niem21_j_URI,n3:String='CrashRoadSurfaceConditionCode',n3namespace:String=niem21_j_URI,sgName:String='CrashRoadSurfaceCondition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashSchoolBusRelatedCode',n21namespace:String=niem21_j_URI,n3:String='CrashSchoolBusRelatedCode',n3namespace:String=niem21_j_URI,sgName:String='CrashSchoolBusRelated',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashVehicleCategoryCode',n21namespace:String=niem21_j_URI,n3:String='CrashVehicleCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='CrashVehicleCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashVehicleEmergencyUseIndicationCode',n21namespace:String=niem21_j_URI,n3:String='CrashVehicleEmergencyUseIndicationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashVehicleEmergencyUseIndication',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashWeatherConditionCode',n21namespace:String=niem21_j_URI,n3:String='CrashWeatherConditionCode',n3namespace:String=niem21_j_URI,sgName:String='CrashWeatherCondition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CrashWorkZoneIndicationCode',n21namespace:String=niem21_j_URI,n3:String='CrashWorkZoneIndicationCode',n3namespace:String=niem21_j_URI,sgName:String='CrashWorkZoneIndication',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='CriminalTraitEthnicityCode',n21namespace:String=niem21_j_URI,n3:String='CriminalTraitEthnicityCode',n3namespace:String=niem21_j_URI,sgName:String='CriminalTraitEthnicity',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DecalPeriodCode',n21namespace:String=niem21_nc_URI,n3:String='DecalPeriodCode',n3namespace:String=niem21_j_URI,sgName:String='DecalPeriod',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='DriverConvictionCMVCode',n21namespace:String=niem21_j_URI,n3:String='DriverConvictionCMVCode',n3namespace:String=niem21_j_URI,sgName:String='DriverConvictionCMV',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverConvictionHazMatCode',n21namespace:String=niem21_j_URI,n3:String='DriverConvictionHazMatCode',n3namespace:String=niem21_j_URI,sgName:String='DriverConvictionHazMat',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverConvictionOffenseCode',n21namespace:String=niem21_j_URI,n3:String='DriverConvictionOffenseCode',n3namespace:String=niem21_j_URI,sgName:String='DriverConvictionOffense',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseCommercialClassCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseCommercialClass',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseCommercialStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseEndorsementCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseEndorsementAbstract',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseHMEThreatCode',n21namespace:String=niem21_j_URI,n3:String='DriverLicenseHMEThreatCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseHMEThreat',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseIssuingCountryCode',n21namespace:String=niem21_j_URI,n3:String='DriverLicenseIssuingCountryCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseIssuingCountry',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseNonCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseNonCommercialStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicensePermitStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicensePermitStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseREALIDComplianceCode',n21namespace:String=niem21_j_URI,n3:String='DriverLicenseREALIDComplianceCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseREALIDCompliance',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalActionCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalAction',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalBasisCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalBasis',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalValue',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalDueProcessStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalEligibilityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalEligibility',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalExtentCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalExtent',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalIssuingAuthority',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingAccidentSeverityCode',n21namespace:String=niem21_j_URI,n3:String='DrivingAccidentSeverityCode',n3namespace:String=niem21_j_URI,sgName:String='DrivingAccidentSeverity',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingIncidentCMVCode',n21namespace:String=niem21_j_URI,n3:String='DrivingIncidentCMVCode',n3namespace:String=niem21_j_URI,sgName:String='DrivingIncidentCMV',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingIncidentHazMatCode',n21namespace:String=niem21_j_URI,n3:String='DrivingIncidentHazMatCode',n3namespace:String=niem21_j_URI,sgName:String='DrivingIncidentHazMat',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingJurisdictionAuthorityANSID20Code',n21namespace:String=niem21_j_URI,n3:String='JurisdictionANSID20AuthorityCode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingJurisdictionAuthorityNCICLSTACode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionNCICLSTACode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='IdentificationJurisdictionNCICLSTACode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionNCICLSTACode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrivingRestrictionCode',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionCode',n3namespace:String=niem21_j_URI,sgName:String='DrivingRestrictionValue',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrugCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionCode',n3namespace:String=niem21_j_URI,sgName:String='SubstanceCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='DrugDEACode',n21namespace:String=niem21_j_URI,n3:String='DrugCategoryDEACode',n3namespace:String=niem21_j_URI,sgName:String='SubstanceCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='DrugInvolvementSuspicionCode',n21namespace:String=niem21_j_URI,n3:String='DrugInvolvementSuspicionCode',n3namespace:String=niem21_j_URI,sgName:String='DrugInvolvementSuspicion',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrugTestCategoryCode',n21namespace:String=niem21_j_URI,n3:String='DrugTestCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='DrugTestCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrugTestResultCode',n21namespace:String=niem21_j_URI,n3:String='DrugTestResultCode',n3namespace:String=niem21_j_URI,sgName:String='DrugTestResult',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='DrugTestStatusCode',n21namespace:String=niem21_j_URI,n3:String='DrugTestStatusCode',n3namespace:String=niem21_j_URI,sgName:String='DrugTestStatus',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='EngineDisplacementUnitCode',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementUnitCode',n3namespace:String=niem21_j_URI,sgName:String='EngineDisplacementUnit',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='EventSequenceCode',n21namespace:String=niem21_j_URI,n3:String='EventSequenceCode',n3namespace:String=niem21_j_URI,sgName:String='EventSequence',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ExplosiveComponentCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentCode',n3namespace:String=niem21_j_URI,sgName:String='ExplosiveComponent',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ExplosiveContainerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerCode',n3namespace:String=niem21_j_URI,sgName:String='ExplosiveContainer',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ExplosiveFillerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerCode',n3namespace:String=niem21_j_URI,sgName:String='ExplosiveFiller',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ExplosiveIgnitionCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionCode',n3namespace:String=niem21_j_URI,sgName:String='ExplosiveIgnition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='FirearmCaliberCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeNCICCode',n3namespace:String=niem21_j_URI,sgName:String='FirearmBoreSize',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='FirearmCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='FirearmCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='FirearmMakeCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmMakeCode',n3namespace:String=niem21_j_URI,sgName:String='FirearmMake',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='HazMatCargoReleaseCode',n21namespace:String=niem21_j_URI,n3:String='HazMatCargoReleaseCode',n3namespace:String=niem21_j_URI,sgName:String='HazMatCargoRelease',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='HazMatPlacardDisplayedCode',n21namespace:String=niem21_j_URI,n3:String='HazMatPlacardDisplayedCode',n3namespace:String=niem21_j_URI,sgName:String='HazMatPlacardDisplayed',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='HazMatPlacardIndicationCode',n21namespace:String=niem21_j_URI,n3:String='HazMatPlacardIndicationCode',n3namespace:String=niem21_j_URI,sgName:String='HazMatPlacardIndication',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='HazardousMaterialCode',n21namespace:String=niem21_j_URI,n3:String='HazardousMaterialCode',n3namespace:String=niem21_j_URI,sgName:String='SubstanceDesignator',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='HitAndRunCode',n21namespace:String=niem21_j_URI,n3:String='HitAndRunCode',n3namespace:String=niem21_j_URI,sgName:String='HitAndRun',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ImageCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ImageCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ImageCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='IdentificationJurisdictionCanadianProvinceCode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionCanadianProvinceCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='IdentificationJurisdictionNCICLISCode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionNCICLISCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='IdentificationJurisdictionNCICRESCode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionNCICRESCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='IdentificationJurisdictionUSPostalServiceCode',n21namespace:String=niem21_j_URI,n3:String='JurisdictionUSPostalServiceCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
//		Tuple{n21:String='ImagePose',n21namespace:String=niem21_j_URI,n3:String='ImagePose',n3namespace:String=niem21_j_URI,sgName:String='ImagePose',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='IncidentCategoryCode',n21namespace:String=niem21_j_URI,n3:String='IncidentCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='IncidentGeneralCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='InformationSourceCategoryCode',n21namespace:String=niem21_j_URI,n3:String='InformationSourceCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='InformationSourceCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='InitialImpactAreaCode',n21namespace:String=niem21_j_URI,n3:String='InitialImpactAreaCode',n3namespace:String=niem21_j_URI,sgName:String='InitialImpactArea',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='InjuredTransportationSourceCode',n21namespace:String=niem21_j_URI,n3:String='InjuredTransportationSourceCode',n3namespace:String=niem21_j_URI,sgName:String='InjuredTransportationSource',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='InjuryCategoryCode',n21namespace:String=niem21_j_URI,n3:String='InjuryCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='InjuryCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonInjuryLocationCode',n21namespace:String=niem21_j_URI,n3:String='InjuryLocationCode',n3namespace:String=niem21_j_URI,sgName:String='InjuryLocation',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonInjurySeverityCode',n21namespace:String=niem21_j_URI,n3:String='InjurySeverityCode',n3namespace:String=niem21_j_URI,sgName:String='InjurySeverity',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='InsuranceCoverageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoverageCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='InsuranceCoverageCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='IntersectionCategoryCode',n21namespace:String=niem21_j_URI,n3:String='IntersectionCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='IntersectionCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='IntoxicationIntoxicantCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='IntoxicationIntoxicantCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PropertyCategoryNCICTYPACode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPACode',n3namespace:String=niem21_j_URI,sgName:String='ItemCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PropertyCategoryNCICTYPCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNCICTYPCode',n3namespace:String=niem21_j_URI,sgName:String='ItemCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PropertyCategoryNIBRSCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSCode',n3namespace:String=niem21_j_URI,sgName:String='ItemCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PropertyCategoryNIBRSPropertyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='ItemCategoryNIBRSPropertyCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PropertyDetailCode',n21namespace:String=niem21_j_URI,n3:String='ItemDetailCode',n3namespace:String=niem21_j_URI,sgName:String='ItemDetailValue',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PropertyDispositionCode',n21namespace:String=niem21_j_URI,n3:String='ItemDispositionCode',n3namespace:String=niem21_j_URI,sgName:String='ItemDisposition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ItemTitleDocumentCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleDocumentCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemTitleDocumentCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='JewelryCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='JewelryCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='JewelryCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RegistrationJurisdictionANSID20JurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionANSID20AuthorityCode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionNCICLISCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionNCICLISCode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionNCICLSTACode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionNCICLSTACode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionNCICRESCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionNCICRESCode',n3namespace:String=niem21_j_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LEOKACircumstanceCategoryCode',n21namespace:String=niem21_j_URI,n3:String='LEOKACircumstanceCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='LEOKACircumstanceCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='LesseeJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI,sgName:String='LesseeJurisdictionAuthority',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='LienReleaseReasonCode',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonCode',n3namespace:String=niem21_j_URI,sgName:String='LienReleaseReason',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='LocationCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='LocationCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LocationStateNCICLISCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLISCode',n3namespace:String=niem21_j_URI,sgName:String='LocationState',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LocationStateNCICLSTACode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLSTACode',n3namespace:String=niem21_j_URI,sgName:String='LocationState',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LocationStateNCICRESCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICRESCode',n3namespace:String=niem21_j_URI,sgName:String='LocationState',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ManeuverCode',n21namespace:String=niem21_j_URI,n3:String='ManeuverCode',n3namespace:String=niem21_j_URI,sgName:String='Maneuver',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='MostDamagedAreaCode',n21namespace:String=niem21_j_URI,n3:String='MostDamagedAreaCode',n3namespace:String=niem21_j_URI,sgName:String='MostDamagedArea',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='MostHarmfulEventCode',n21namespace:String=niem21_j_URI,n3:String='MostHarmfulEventCode',n3namespace:String=niem21_j_URI,sgName:String='MostHarmfulEvent',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='NonMotoristActionBeforeCrashCode',n21namespace:String=niem21_j_URI,n3:String='NonMotoristActionBeforeCrashCode',n3namespace:String=niem21_j_URI,sgName:String='NonMotoristActionBeforeCrash',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='NonMotoristCategoryCode',n21namespace:String=niem21_j_URI,n3:String='NonMotoristCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='NonMotoristCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='NonMotoristContributingCircumstancesCode',n21namespace:String=niem21_j_URI,n3:String='NonMotoristContributingCircumstancesCode',n3namespace:String=niem21_j_URI,sgName:String='NonMotoristContributingCircumstances',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='NonMotoristLocationCode',n21namespace:String=niem21_j_URI,n3:String='NonMotoristLocationCode',n3namespace:String=niem21_j_URI,sgName:String='NonMotoristLocation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='NonMotoristSafetyEquipmentCode',n21namespace:String=niem21_j_URI,n3:String='NonMotoristSafetyEquipmentCode',n3namespace:String=niem21_j_URI,sgName:String='NonMotoristSafetyEquipment',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantAirBagDeployedCode',n21namespace:String=niem21_j_URI,n3:String='OccupantAirBagDeployedCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantAirBagDeployed',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantEjectionCode',n21namespace:String=niem21_j_URI,n3:String='OccupantEjectionCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantEjection',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantProtectionSystemUseCode',n21namespace:String=niem21_j_URI,n3:String='OccupantProtectionSystemUseCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantProtectionSystemUse',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantSeatCode',n21namespace:String=niem21_j_URI,n3:String='OccupantSeatCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantSeat',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantSeatOtherLocationCode',n21namespace:String=niem21_j_URI,n3:String='OccupantSeatOtherLocationCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantSeatOtherLocation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OccupantSeatRowCode',n21namespace:String=niem21_j_URI,n3:String='OccupantSeatRowCode',n3namespace:String=niem21_j_URI,sgName:String='OccupantSeatRow',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OffenseFactorBiasMotivationCauseCode',n21namespace:String=niem21_j_URI,n3:String='OffenseFactorBiasMotivationCauseCode',n3namespace:String=niem21_j_URI,sgName:String='OffenseFactorBiasMotivationCause',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OffenseFactorBiasMotivationCode',n21namespace:String=niem21_j_URI,n3:String='OffenseFactorBiasMotivationCode',n3namespace:String=niem21_j_URI,sgName:String='OffenseFactorBiasMotivation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='OrganizationGovernmentLevelCode',n21namespace:String=niem21_j_URI,n3:String='OrganizationGovernmentLevelText',n3namespace:String=niem21_j_URI,sgName:String='OrganizationGovernmentLevel',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PersonBloodTypeCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBloodTypeCode',n3namespace:String=niem21_j_URI,sgName:String='PersonBloodType',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PersonBodyXRaysAvailableCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBodyXRaysAvailableCode',n3namespace:String=niem21_j_URI,sgName:String='PersonBodyXRaysAvailable',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonEthnicityCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEthnicityCode',n3namespace:String=niem21_j_URI,sgName:String='PersonEthnicity',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonEyeColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEyeColorCode',n3namespace:String=niem21_j_URI,sgName:String='PersonEyeColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonFirearmSalesDisqualifiedCode',n21namespace:String=niem21_j_URI,n3:String='PersonFirearmSalesDisqualifiedCode',n3namespace:String=niem21_j_URI,sgName:String='PersonFirearmSalesDisqualified',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PersonHairColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonHairColorCode',n3namespace:String=niem21_j_URI,sgName:String='PersonHairColor',sgNamespace:String=niem21_nc_URI	},
//		Tuple{n21:String='PersonHitResultsCode',n21namespace:String=niem21_j_URI,n3:String='PersonHitResultsText',n3namespace:String=niem21_j_URI,sgName:String='PersonHitResults',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='PersonRaceCode',n21namespace:String=niem21_nc_URI,n3:String='PersonRaceCode',n3namespace:String=niem21_j_URI,sgName:String='PersonRace',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonResidentCode',n21namespace:String=niem21_nc_URI,n3:String='PersonResidentCode',n3namespace:String=niem21_j_URI,sgName:String='PersonResident',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonSexCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSexCode',n3namespace:String=niem21_j_URI,sgName:String='PersonSex',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonSkinToneCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSkinToneCode',n3namespace:String=niem21_j_URI,sgName:String='PersonSkinTone',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='PhysicalFeatureCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='PhysicalFeatureCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PleaCategoryCode',n21namespace:String=niem21_j_URI,n3:String='PleaCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='PleaCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='ProtectionOrderConditionCode',n21namespace:String=niem21_j_URI,n3:String='ProtectionOrderConditionCode',n3namespace:String=niem21_j_URI,sgName:String='ProtectionOrderCondition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayAccessControlCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayAccessControlCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayAccessControl',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayFunctionalClassCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayFunctionalClassCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayFunctionalClass',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayGradeCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayGradeCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayGrade',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayHorizontalAlignmentCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayHorizontalAlignmentCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayHorizontalAlignment',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayIntersectionTrafficControlCategoryCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayIntersectionTrafficControlCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayIntersectionTrafficControlCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayLightingCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayLightingCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayLighting',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='RoadwayNationalHighwayPartCode',n21namespace:String=niem21_j_URI,n3:String='RoadwayNationalHighwayPartCode',n3namespace:String=niem21_j_URI,sgName:String='RoadwayNationalHighwayPart',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='SecuritiesCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='SecuritiesCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='SecuritiesCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='SecuritiesDenominationCode',n21namespace:String=niem21_nc_URI,n3:String='SecuritiesDenominationCode',n3namespace:String=niem21_j_URI,sgName:String='SecuritiesDenomination',sgNamespace:String=niem21_nc_URI	},
//		Tuple{n21:String='SecuritiesRansomMoneyCode',n21namespace:String=niem21_j_URI,n3:String='SecuritiesRansomMoneyText',n3namespace:String=niem21_j_URI,sgName:String='SecuritiesRansomMoney',sgNamespace:String=niem21_j_URI	},
//		Tuple{n21:String='StatuteOffenseMinnesotaCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseAPCOCode',n3namespace:String=niem21_j_URI,sgName:String='StatuteOffenseCode',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='StatuteOffenseUCRCode',n21namespace:String=niem21_j_URI,n3:String='StatuteOffenseUCRCode',n3namespace:String=niem21_j_URI,sgName:String='StatuteOffenseCode',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='SubjectCautionInformationCode',n21namespace:String=niem21_j_URI,n3:String='SubjectCautionInformationCode',n3namespace:String=niem21_j_URI,sgName:String='SubjectCautionInformation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='SubjectCriminalOrganizationInvolvementCode',n21namespace:String=niem21_j_URI,n3:String='SubjectCriminalOrganizationInvolvementCode',n3namespace:String=niem21_j_URI,sgName:String='SubjectClassificationAssessmentRiskLevel',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='SubstanceUnitCode',n21namespace:String=niem21_nc_URI,n3:String='SubstanceUnitCode',n3namespace:String=niem21_j_URI,sgName:String='SubstanceUnit',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='SupervisionRestrictionCode',n21namespace:String=niem21_j_URI,n3:String='SupervisionRestrictionCode',n3namespace:String=niem21_j_URI,sgName:String='SupervisionRestrictionDesignator',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TargetSectorCode',n21namespace:String=niem21_j_URI,n3:String='TargetSectorCode',n3namespace:String=niem21_j_URI,sgName:String='TargetSector',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TipClassCode',n21namespace:String=niem21_j_URI,n3:String='TipClassCode',n3namespace:String=niem21_j_URI,sgName:String='TipClass',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TipDomainCode',n21namespace:String=niem21_j_URI,n3:String='TipDomainCode',n3namespace:String=niem21_j_URI,sgName:String='TipDomain',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TrafficwayDescriptionCode',n21namespace:String=niem21_j_URI,n3:String='TrafficwayDescriptionCode',n3namespace:String=niem21_j_URI,sgName:String='TrafficwayDescription',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='TravelDirectionBeforeCrashCode',n21namespace:String=niem21_j_URI,n3:String='TravelDirectionBeforeCrashCode',n3namespace:String=niem21_j_URI,sgName:String='TravelDirectionBeforeCrash',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBodyCategoryCode',n21namespace:String=niem21_j_URI,n3:String='VehicleBodyCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleBodyCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBrandCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleBrandDesignation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBrandDamagePercentageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleBrandDamagePercentageCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBrandVehicleDispositionCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleBrandVehicleDisposition',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleBranderCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleBranderCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleContributingCircumstancesCode',n21namespace:String=niem21_j_URI,n3:String='VehicleContributingCircumstancesCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleContributingCircumstances',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleDamageExtentCode',n21namespace:String=niem21_j_URI,n3:String='VehicleDamageExtentCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleDamageExtent',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleInspectionJurisdictionAuthority',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleInspectionSmogCertificateCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSmogCertificateCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleInspectionSmogCertificate',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleMakeCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleMake',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VehicleModelCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleModelCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleModel',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VehicleOdometerReadingUnitCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleOdometerReadingUnitCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleOdometerReadingUnit',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VehicleStyleCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleStyleCode',n3namespace:String=niem21_j_URI,sgName:String='ItemStyle',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VehicleTrafficControlDeviceCategoryCode',n21namespace:String=niem21_j_URI,n3:String='VehicleTrafficControlDeviceCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleTrafficControlDeviceCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleTransmissionCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleTransmissionCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleTransmissionCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VehicleUseCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleUseANSID20Code',n3namespace:String=niem21_j_URI,sgName:String='ConveyanceUse',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='VesselCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorPrimaryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorSecondaryCode',n3namespace:String=niem21_j_URI,sgName:String='ItemColor',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselHullMaterialCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullMaterialCode',n3namespace:String=niem21_j_URI,sgName:String='VesselHullMaterial',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselHullShapeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullShapeCode',n3namespace:String=niem21_j_URI,sgName:String='VesselHullShape',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselMakeCode',n3namespace:String=niem21_j_URI,sgName:String='VesselMake',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselPropulsionCode',n21namespace:String=niem21_nc_URI,n3:String='VesselPropulsionCode',n3namespace:String=niem21_j_URI,sgName:String='VesselPropulsion',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VesselTrailerMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselTrailerMakeCode',n3namespace:String=niem21_j_URI,sgName:String='VehicleMake',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='VictimAggravatedAssaultHomicideFactorCode',n21namespace:String=niem21_j_URI,n3:String='VictimAggravatedAssaultHomicideFactorCode',n3namespace:String=niem21_j_URI,sgName:String='VictimAggravatedAssaultHomicideFactor',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='VictimJustifiableHomicideFactorCode',n21namespace:String=niem21_j_URI,n3:String='VictimJustifiableHomicideFactorCode',n3namespace:String=niem21_j_URI,sgName:String='VictimJustifiableHomicideFactor',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='WorkZoneCategoryCode',n21namespace:String=niem21_j_URI,n3:String='WorkZoneCategoryCode',n3namespace:String=niem21_j_URI,sgName:String='WorkZoneCategory',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='WorkZoneCrashLocationCode',n21namespace:String=niem21_j_URI,n3:String='WorkZoneCrashLocationCode',n3namespace:String=niem21_j_URI,sgName:String='WorkZoneCrashLocation',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='WorkZoneWorkersPresenceIndicationCode',n21namespace:String=niem21_j_URI,n3:String='WorkZoneWorkersPresenceIndicationCode',n3namespace:String=niem21_j_URI,sgName:String='WorkZoneWorkersPresenceIndication',sgNamespace:String=niem21_j_URI	},
//		Tuple{n21:String='AdditionalDocumentCategory',n21namespace:String=niem21_it_URI,n3:String='AdditionalDocumentCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='AdditionalDocumentCategory',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='ConsignmentItemShapeCode',n21namespace:String=niem21_it_URI,n3:String='ConsignmentItemShapeCode',n3namespace:String=niem21_it_URI,sgName:String='ConsignmentItemShape',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='CurrencyIdentifierCode',n21namespace:String=niem21_it_URI,n3:String='CurrencyIdentifierCode',n3namespace:String=niem21_it_URI,sgName:String='CurrencyIdentifierAbstract',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='DutyTaxPaymentMethodCode',n21namespace:String=niem21_it_URI,n3:String='DutyTaxPaymentMethodCode',n3namespace:String=niem21_it_URI,sgName:String='DutyTaxPaymentMethod',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='ExaminationPlaceCode',n21namespace:String=niem21_it_URI,n3:String='ExaminationPlaceCode',n3namespace:String=niem21_it_URI,sgName:String='ExaminationPlace',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='GoodsCountryExportCode',n21namespace:String=niem21_it_URI,n3:String='GoodsCountryExportCode',n3namespace:String=niem21_it_URI,sgName:String='GoodsCountryExport',sgNamespace:String=niem21_it_URI	},
//		Tuple{n21:String='GoodsLocationCode',n21namespace:String=niem21_it_URI,n3:String='GoodsLocationCategoryText',n3namespace:String=niem21_it_URI,sgName:String='TextType',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ItineraryLocationKindCode',n21namespace:String=niem21_it_URI,n3:String='ItineraryLocationKindCode',n3namespace:String=niem21_it_URI,sgName:String='ItineraryLocationKind',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='GoodsManufacturedCountryOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedCountryOriginCode',n3namespace:String=niem21_it_URI,sgName:String='GoodsManufacturedCountryOrigin',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='GoodsManufacturedRegionOrigin',n21namespace:String=niem21_it_URI,n3:String='GoodsManufacturedRegionOriginCode',n3namespace:String=niem21_it_URI,sgName:String='GoodsManufacturedRegionOrigin',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='LocationActivityCode',n21namespace:String=niem21_it_URI,n3:String='LocationActivityCode',n3namespace:String=niem21_it_URI,sgName:String='LocationActivity',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_it_URI,n3:String='LocationCategoryCodeText',n3namespace:String=niem21_it_URI,sgName:String='LocationCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LocationFunctionCode',n21namespace:String=niem21_it_URI,n3:String='LocationFunctionCode',n3namespace:String=niem21_it_URI,sgName:String='LocationFunctionDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='MeasureUnitCategoryCode',n21namespace:String=niem21_it_URI,n3:String='MeasureUnitCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='MeasureUnit',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PackageItemCategoryCode',n21namespace:String=niem21_it_URI,n3:String='PackageItemCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='PackageItemCategory',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='RoleOfOrganizationCategoryCode',n21namespace:String=niem21_it_URI,n3:String='RoleOfOrganizationCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='RoleOfOrganizationCategoryDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='RoleOfPartyCategoryCode',n21namespace:String=niem21_it_URI,n3:String='RoleOfPartyCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='RoleOfPartyCategoryDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='SealIntactStatusCode',n21namespace:String=niem21_it_URI,n3:String='SealIntactStatusCode',n3namespace:String=niem21_it_URI,sgName:String='SealIntactStatus',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='SealVerificationStatusCode',n21namespace:String=niem21_it_URI,n3:String='SealVerificationStatusCode',n3namespace:String=niem21_it_URI,sgName:String='SealVerificationStatus',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='ShippingContainerISO6346Code',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerISO6346Code',n3namespace:String=niem21_it_URI,sgName:String='ShippingContainerISO6346',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='ShippingContainerKindCode',n21namespace:String=niem21_it_URI,n3:String='ShippingContainerKindCode',n3namespace:String=niem21_it_URI,sgName:String='ShippingContainerKind',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='TradePartyCode',n21namespace:String=niem21_it_URI,n3:String='TradePartyCode',n3namespace:String=niem21_it_URI,sgName:String='TradePartyDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='TransportMeansModeOfTransportationCode',n21namespace:String=niem21_it_URI,n3:String='TransportMeansModeOfTransportationCode',n3namespace:String=niem21_it_URI,sgName:String='TransportMeansModeOfTransportation',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='UnloadingLocationCategory',n21namespace:String=niem21_it_URI,n3:String='UnloadingLocationCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='UnloadingLocationCategory',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='WCODocumentCategoryCode',n21namespace:String=niem21_it_URI,n3:String='WCODocumentCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='WCODocumentCategoryDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='WCODocumentFunctionCategoryCode',n21namespace:String=niem21_it_URI,n3:String='WCODocumentFunctionCategoryCode',n3namespace:String=niem21_it_URI,sgName:String='WCODocumentFunctionCategoryDesignator',sgNamespace:String=niem21_it_URI	},
		Tuple{n21:String='ActivityProcessCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ActivityProcessCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ActivityProcessCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ActivityRequestCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ActivityRequestCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ActivityRequestCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ActivityResponseCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ActivityResponseCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ActivityResponseCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ActivityResultsCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ActivityResultsCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ActivityResultsCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='AddressClassificationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='AddressClassificationCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='AddressClassificationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='AlertCategoryClassificationCode',n21namespace:String=niem21_scr_URI,n3:String='AlertCategoryClassificationCode',n3namespace:String=niem21_scr_URI,sgName:String='AlertCategoryClassification',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='AlienStatusWhenFoundCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='AlienStatusWhenFoundCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='AlienStatusWhenFoundCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ArrestMethodCode',n21namespace:String=niem21_scr_URI,n3:String='ArrestMethodCode',n3namespace:String=niem21_scr_URI,sgName:String='ArrestMethodCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='BenefitApplicationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='BenefitApplicationCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='BenefitApplicationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='BenefitApplicationClassificationCode',n21namespace:String=niem21_scr_URI,n3:String='BenefitApplicationClassificationCode',n3namespace:String=niem21_scr_URI,sgName:String='BenefitApplicationClassification',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='BenefitApplicationStatusCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='BenefitApplicationStatusCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='BenefitApplicationStatusCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='BenefitDocumentCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='BenefitDocumentCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='BenefitDocumentCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='BenefitDocumentStatusCode',n21namespace:String=niem21_scr_URI,n3:String='BenefitDocumentStatusCode',n3namespace:String=niem21_scr_URI,sgName:String='BenefitDocumentStatusCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ChargeCategoryClassificationCode',n21namespace:String=niem21_scr_URI,n3:String='ChargeCategoryClassificationCode',n3namespace:String=niem21_scr_URI,sgName:String='ChargeCategoryClassification',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ClassOfAdmissionClassificationCode',n21namespace:String=niem21_scr_URI,n3:String='ClassOfAdmissionClassificationCode',n3namespace:String=niem21_scr_URI,sgName:String='ClassOfAdmissionClassification',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ComplexionCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ComplexionCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ComplexionCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ConfidenceLevelCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ConfidenceLevelCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ConfidenceLevelCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ConveyanceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ConveyanceCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ConveyanceCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ConveyanceIDIssuingJurisdictionCode',n21namespace:String=niem21_scr_URI,n3:String='ConveyanceIDIssuingJurisdictionCode',n3namespace:String=niem21_scr_URI,sgName:String='ConveyanceIDIssuingJurisdiction',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='CountrySubdivisionCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='CountrySubdivisionCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='CountrySubdivisionCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DepartureCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='DepartureCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='DepartureCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DerogatoryStatusCode',n21namespace:String=niem21_scr_URI,n3:String='DerogatoryStatusCode',n3namespace:String=niem21_scr_URI,sgName:String='DerogatoryStatus',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DesignationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='DesignationCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='DesignationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DocumentCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='DocumentCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='DocumentCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DocumentStatusCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='DocumentStatusCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='DocumentStatusCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EncounterCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='EncounterCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EncounterCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EncounterMethodCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='EncounterMethodCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EncounterMethodCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EncounterDeviceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonEncounterDeviceCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EncounterDeviceCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EncounterStatusCode',n21namespace:String=niem21_scr_URI,n3:String='EncounterStatusCode',n3namespace:String=niem21_scr_URI,sgName:String='EncounterStatus',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EnforcementCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='EnforcementCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EnforcementCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EnrollmentCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='EnrollmentCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EnrollmentCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EntryStatusCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='EntryStatusCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='EntryStatusCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='EscortCode',n21namespace:String=niem21_scr_URI,n3:String='EscortCode',n3namespace:String=niem21_scr_URI,sgName:String='Escort',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='IdentityStatusCode',n21namespace:String=niem21_scr_URI,n3:String='IdentityStatusCode',n3namespace:String=niem21_scr_URI,sgName:String='IdentityStatus',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='LeadSourceCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='LeadSourceCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='LeadSourceCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='LeadStatusCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='LeadStatusCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='LeadStatusCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='LocationCategoryClassificationCode',n21namespace:String=niem21_scr_URI,n3:String='LocationCategoryClassificationCode',n3namespace:String=niem21_scr_URI,sgName:String='LocationCategoryClassification',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='LocationElementCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='LocationElementCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='LocationElementCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ManifestCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ManifestCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ManifestCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='OrganizationClassificationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='OrganizationClassificationCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='OrganizationClassificationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='OrganizationStatusClassificationCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='OrganizationStatusClassificationCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='OrganizationStatusClassificationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonAlertStatusCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonAlertStatusCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonAlertStatusCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonCategoryCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonCrossingCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonCrossingCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonCrossingCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonDesignatorCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonDesignatorCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='IdentificationCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonEncounterCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonEncounterCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonEncounterCategoryCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonMedicalConditionCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonMedicalConditionCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonMedicalConditionCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonMedicalConditionStatusCode',n21namespace:String=niem21_scr_URI,n3:String='PersonMedicalConditionStatusCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonMedicalConditionStatusCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonRoleCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='PersonRoleCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonRoleCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='PersonRoleCode',n21namespace:String=niem21_scr_URI,n3:String='PersonRoleCode',n3namespace:String=niem21_scr_URI,sgName:String='PersonRoleCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='ReleaseReasonCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='ReleaseReasonCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='ReleaseReasonCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='SupportLevelCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='SupportLevelCategoryCodeText',n3namespace:String=niem21_scr_URI,sgName:String='SupportLevelCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='TelephoneCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryCode',n3namespace:String=niem21_nc_URI,sgName:String='TelephoneNumberCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='TimeInUSCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TimeInUSCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='TimeInUSCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='TravelDocumentCode',n21namespace:String=niem21_scr_URI,n3:String='TravelDocumentCode',n3namespace:String=niem21_scr_URI,sgName:String='TravelDocumentCodeAbstract',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='TravelModeCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TravelModeCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='TravelModeCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='VisaCancelCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='VisaCancelCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='VisaCancelCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='WarrantCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='WarrantCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='WarrantCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='WatchlistCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='WatchlistCategoryCode',n3namespace:String=niem21_scr_URI,sgName:String='WatchlistCategory',sgNamespace:String=niem21_scr_URI	},
		Tuple{n21:String='DEAClassScheduleCode',n21namespace:String=niem21_nc_URI,n3:String='DEAClassScheduleText',n3namespace:String=niem21_nc_URI,sgName:String='DEAClassSchedule',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='DocumentIntelligenceCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='DocumentIntelligenceCategoryCode',n3namespace:String=niem21_nc_URI,sgName:String='DocumentIntelligenceCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='DriverLicenseWithdrawalReasonReferenceCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReasonReferenceCode',n3namespace:String=niem21_j_URI,sgName:String='DriverLicenseWithdrawalReasonReference',sgNamespace:String=niem21_j_URI	},
		Tuple{n21:String='IdentificationJurisdictionFIPS10-4Code',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionFIPS10-4Code',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='IdentificationJurisdictionISO3166Alpha3Code',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionISO3166Alpha3Code',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionCanadianProvinceCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionCanadianProvinceCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionFIPS10-4InternationalCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionFIPS10-4InternationalCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionFIPS5-2AlphaCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionFIPS5-2AlphaCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionFIPS5-2NumericCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionFIPS5-2NumericCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='RegistrationJurisdictionUSPostalServiceCode',n21namespace:String=niem21_nc_URI,n3:String='JurisdictionUSPostalServiceCode',n3namespace:String=niem21_nc_URI,sgName:String='JurisdictionAbstract',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PassportCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='PassportCategoryCode',n3namespace:String=niem21_nc_URI,sgName:String='PassportCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PersonUnionStatusCode',n21namespace:String=niem21_nc_URI,n3:String='PersonUnionStatusCode',n3namespace:String=niem21_nc_URI,sgName:String='PersonUnionStatus',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='TimeUnitCode',n21namespace:String=niem21_nc_URI,n3:String='TimeUnitCode',n3namespace:String=niem21_nc_URI,sgName:String='MeasureUnit',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='WeightUnitCode',n21namespace:String=niem21_nc_URI,n3:String='WeightUnitCode',n3namespace:String=niem21_nc_URI,sgName:String='MeasureUnit',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='HazmatDeclarationUNHazmatCode',n21namespace:String=niem21_m_URI,n3:String='HazmatDeclarationUNHazmatCode',n3namespace:String=niem21_m_URI,sgName:String='SubstanceDesignator',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='LocationCountryFIPS10-4PlusNCTCCode',n21namespace:String=niem21_intel_URI,n3:String='LocationCountryFIPS10-4PlusNCTCCodeText',n3namespace:String=niem21_intel_URI,sgName:String='LocationCountry',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_intel_URI,n3:String='PhysicalFeatureCategoryCodeText',n3namespace:String=niem21_intel_URI,sgName:String='PhysicalFeatureCategory',sgNamespace:String=niem21_nc_URI	},
		Tuple{n21:String='ImmigrationStatusCode',n21namespace:String=niem21_im_URI,n3:String='ImmigrationStatusCode',n3namespace:String=niem21_im_URI,sgName:String='StatusDesignator',sgNamespace:String=niem21_nc_URI	}
};
/*

				
  //////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////// 
  

*/

////////////////////////////////////////namespace change		
property property21to3WithNamespace:Sequence(Tuple(n21:String,n21namespace:String,n3:String,n3namespace:String)) = Sequence{
	
		Tuple{n21:String='SystemName',n21namespace:String=niem21_intel_URI,n3:String='SystemName',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='Manifest',n21namespace:String=niem21_scr_URI,n3:String='Manifest',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='PatientMedicalFacility',n21namespace:String=niem21_j_URI,n3:String='PatientMedicalFacility',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='ContactInformation',n21namespace:String=niem21_it_URI,n3:String='ContactInformation',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='ContactInformation',n21namespace:String=niem21_intel_URI,n3:String='ContactInformation',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='FacilityID',n21namespace:String=niem21_it_URI,n3:String='FacilityID',n3namespace:String=niem21_cbrn_URI	},
		Tuple{n21:String='FacilityID',n21namespace:String=niem21_it_URI,n3:String='FacilityID',n3namespace:String=niem21_cbrn_URI	},

		Tuple{n21:String='SecondaryDocument',n21namespace:String=niem21_scr_URI,n3:String='SecondaryDocument',n3namespace:String=niem21_nc_URI	},
		Tuple{n21:String='DocumentIssueDate',n21namespace:String=niem21_it_URI,n3:String='DocumentIssueDate',n3namespace:String=niem21_nc_URI	},
		//Tuple{n21:String='PersonIntoxication',n21namespace:String=niem21_nc_URI,n3:String='PersonIntoxication',n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='PropertyHolding',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizureDisposition',n3namespace:String=niem21_j_URI	},
		Tuple{n21:String='RoleOfItemReference',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizureItem',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertySeizedLocation',n21namespace:String=niem21_nc_URI,n3:String='ItemSeizedLocation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PropertyRegistrationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistrationAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationAuthorityName',n21namespace:String=niem21_nc_URI,n3:String='RegistrationAuthorityName',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationDuplicateQuantity',n21namespace:String=niem21_nc_URI,n3:String='RegistrationDuplicateQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='RegistrationEffectiveDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ActivityFacilityAssociation',n21namespace:String=niem21_j_URI,n3:String='ActivityFacilityAssociation',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='LocationCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='LocationCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lessee',n21namespace:String=niem21_nc_URI,n3:String='Lessee',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LesseeJurisdictionAuthority',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthority',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LesseeJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LesseeJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='LesseeJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lessor',n21namespace:String=niem21_nc_URI,n3:String='Lessor',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LessorIdentification',n21namespace:String=niem21_nc_URI,n3:String='LessorIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Lien',n21namespace:String=niem21_nc_URI,n3:String='Lien',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienAmount',n21namespace:String=niem21_nc_URI,n3:String='LienAmount',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienDate',n21namespace:String=niem21_nc_URI,n3:String='LienDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienHolder',n21namespace:String=niem21_nc_URI,n3:String='LienHolder',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienReleaseDate',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='LienReleaseReason',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReason',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='LienReleaseReasonCode',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonCode',n3namespace:String=niem21_j_URI},
// here
//		Tuple{n21:String='LienReleaseReasonText',n21namespace:String=niem21_nc_URI,n3:String='LienReleaseReasonText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationIdentification',n21namespace:String=niem21_nc_URI,n3:String='RegistrationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='RegistrationItem',n21namespace:String=niem21_nc_URI,n3:String='RegistrationItem',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftWingColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftWingColorCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftStyleCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftStyleCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftModelCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftModelCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftMakeCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='AircraftFuselageColorCode',n21namespace:String=niem21_nc_URI,n3:String='AircraftFuselageColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartID',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartID',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartBrand',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartBrand',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartCategory',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategory',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartDescriptionText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePart',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePart',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ConveyancePartAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='ConveyancePartCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='ConveyancePartCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartCategoryText',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='InsuranceCoverageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='InsuranceCoverageCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleOfCertifyingOfficerText',n21namespace:String=niem21_im_URI,n3:String='TitleOfCertifyingOfficerText',n3namespace:String=niem21_j_URI},
		
		Tuple{n21:String='DriverLicense',n21namespace:String=niem21_nc_URI,n3:String='DriverLicense',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseAssociation',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseBase',n21namespace:String=niem21_nc_URI,n3:String=			'DriverLicenseBase',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='DriverLicenseCommercialClass',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClass',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='DriverLicenseCommercialClassCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='DriverLicenseCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialClassText',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonEthnicityCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEthnicityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonEyeColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonEyeColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonGangAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonGangAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonHairColorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonHairColorCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonIntoxication',n21namespace:String=niem21_nc_URI,n3:String='PersonIntoxication',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonInvolvedInDrivingIncidentAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonInvolvedInDrivingIncidentAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='SubstanceUnitCode',n21namespace:String=niem21_nc_URI,n3:String='SubstanceUnitCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='Title',n21namespace:String=niem21_nc_URI,n3:String='Title',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleCategoryText',n21namespace:String=niem21_nc_URI,n3:String='TitleCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleDuplicateQuantity',n21namespace:String=niem21_nc_URI,n3:String='TitleDuplicateQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleHolder',n21namespace:String=niem21_nc_URI,n3:String='TitleHolder',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIdentification',n21namespace:String=niem21_nc_URI,n3:String='TitleIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssueDate',n21namespace:String=niem21_nc_URI,n3:String='TitleIssueDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssuingAuthorityName',n21namespace:String=niem21_nc_URI,n3:String='TitleIssuingAuthorityName',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleIssuingJurisdiction',n21namespace:String=niem21_nc_URI,n3:String='TitleIssuingJurisdiction',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleItem',n21namespace:String=niem21_nc_URI,n3:String='TitleItem',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleLienIndicator',n21namespace:String=niem21_nc_URI,n3:String='TitleLienIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleStatus',n21namespace:String=niem21_nc_URI,n3:String='TitleStatus',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='TitleStatusCode',n21namespace:String=niem21_nc_URI,n3:String='TitleStatusCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='ToothPositionIDCode',n21namespace:String=niem21_nc_URI,n3:String='ToothPositionIDCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrand',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrand',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDamagePercentageCategory',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategory',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandDamagePercentageCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDamagePercentageCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandDesignation',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandDesignation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrander',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrander',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBranderCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBranderIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleBranderIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandSalvagePercentage',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandSalvagePercent',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandVehicleDisposition',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDisposition',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandVehicleDispositionCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleBrandVehicleDispositionText',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleDispositionText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleBrandVehicleSourceName',n21namespace:String=niem21_nc_URI,n3:String='VehicleBrandVehicleSourceName',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorPrimaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceColorSecondaryCode',n3namespace:String=niem21_j_URI},
		
		Tuple{n21:String='VehicleEmissionInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleEmissionInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleEmissionInspectionQuantity',n21namespace:String=niem21_nc_URI,n3:String='VehicleEmissionInspectionQuantity',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleGarage',n21namespace:String=niem21_nc_URI,n3:String='VehicleGarage',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleGarageIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleGarageIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionAddress',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionAddress',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionEmissionCertificationIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionEmissionCertificationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionEmissionPassIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionEmissionPassIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionInspectorIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionInspectorIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionJurisdictionAuthority',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthority',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionJurisdictionAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionJurisdictionAuthorityText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionSafetyPassIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSafetyPassIndicator',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleInspectionSmogCertificateCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionSmogCertificateCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionStationIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionStationIdentification',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInspectionTestCategoryText',n21namespace:String=niem21_nc_URI,n3:String='VehicleInspectionTestCategoryText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInvoiceDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleInvoiceDate',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleInvoiceIdentification',n21namespace:String=niem21_nc_URI,n3:String='VehicleInvoiceIdentification',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleOdometerReadingUnitCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleOdometerReadingUnitCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehiclePaperMCOIssuedIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehiclePaperMCOIssuedIndicator',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleSafetyInspection',n21namespace:String=niem21_nc_URI,n3:String='VehicleSafetyInspection',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleShipDate',n21namespace:String=niem21_nc_URI,n3:String='VehicleShipDate',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleStyleCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleStyleCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTaxableAmount',n21namespace:String=niem21_nc_URI,n3:String='VehicleTaxableAmount',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTitle',n21namespace:String=niem21_nc_URI,n3:String='VehicleTitle',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleTitleAssociation',n21namespace:String=niem21_nc_URI,n3:String='VehicleTitleAssociation',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VehicleTransmissionCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VehicleTransmissionCategoryCode',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleVINAText',n21namespace:String=niem21_nc_URI,n3:String='VehicleVINAText',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='VehicleWantedIndicator',n21namespace:String=niem21_nc_URI,n3:String='VehicleWantedIndicator',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselColorPrimaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorPrimaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselColorSecondaryCode',n21namespace:String=niem21_nc_URI,n3:String='VesselColorSecondaryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselHullMaterialCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullMaterialCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselHullShapeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselHullShapeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselPropulsionCode',n21namespace:String=niem21_nc_URI,n3:String='VesselPropulsionCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='VesselTrailerMakeCode',n21namespace:String=niem21_nc_URI,n3:String='VesselTrailerMakeCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonIssuedCourtOrderAssociation',n21namespace:String=niem21_nc_URI,n3:String='PersonIssuedCourtOrderAssociation',n3namespace:String=niem21_j_URI},
		Tuple{n21:String='PersonOrganDonorCode',n21namespace:String=niem21_nc_URI,n3:String='PersonOrganDonorCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonRaceCode',n21namespace:String=niem21_nc_URI,n3:String='PersonRaceCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonResidentCode',n21namespace:String=niem21_nc_URI,n3:String='PersonResidentCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonSexCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSexCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PersonSkinToneCode',n21namespace:String=niem21_nc_URI,n3:String='PersonSkinToneCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='PhysicalFeatureCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='PhysicalFeatureCategoryCode',n3namespace:String=niem21_j_URI},
//		Tuple{n21:String='TelephoneNumberAugmentation',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumber',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentAssociation',n21namespace:String=niem21_scr_URI,n3:String='DocumentAssociation',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='DocumentStatusDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='DocumentStatusDescriptionText',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='ManifestCategoryCodeDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='ManifestCategoryCodeDescriptionText',n3namespace:String=niem21_nc_URI},
		Tuple{n21:String='PrimaryDocument',n21namespace:String=niem21_scr_URI,n3:String='PrimaryDocument',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='TelephoneCategoryCode',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryCode',n3namespace:String=niem21_nc_URI},
//		Tuple{n21:String='TelephoneCategoryDescriptionText',n21namespace:String=niem21_scr_URI,n3:String='TelephoneNumberCategoryText',n3namespace:String=niem21_nc_URI},
//////////////////////next batch

		Tuple{n21:String='BiometricRepositoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricRepositoryDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricRepositoryOrganization',n21namespace:String=niem21_nc_URI,n3:String='BiometricRepositoryOrganization',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricAccuracyDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricAccuracyDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTestDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestDescriptionText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTestDate',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestDate',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricTestMethodText',n21namespace:String=niem21_nc_URI,n3:String='BiometricTestMethodText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricTester',n21namespace:String=niem21_nc_URI,n3:String='BiometricTester',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricCapturer',n21namespace:String=niem21_nc_URI,n3:String='BiometricCapturer',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricLabAnalysisText',n21namespace:String=niem21_nc_URI,n3:String='BiometricLabAnalysisText',n3namespace:String=niem21_ansi_nist_URI},
			Tuple{n21:String='BiometricBinary',n21namespace:String=niem21_nc_URI,n3:String='BiometricBinary',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricID',n21namespace:String=niem21_nc_URI,n3:String='BiometricID',n3namespace:String=niem21_ansi_nist_URI},
		Tuple{n21:String='BiometricValueText',n21namespace:String=niem21_nc_URI,n3:String='BiometricValueText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricEncodingMethodText',n21namespace:String=niem21_nc_URI,n3:String='BiometricEncodingMethodText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='BiometricDescriptionText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='BiometricStatus',n21namespace:String=niem21_nc_URI,n3:String='BiometricStatus',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='MaximumRangeIdentification',n21namespace:String=niem21_ansi_nist_URI,n3:String='MaximumRangeIdentification',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='MinimumRangeIdentification',n21namespace:String=niem21_ansi_nist_URI,n3:String='MinimumRangeIdentification',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='ProtectionOrderBradyIndicator',n21namespace:String=niem21_ansi_nist_URI,n3:String='ProtectionOrderBradyIndicator',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='ProtectionOrderConditionText',n21namespace:String=niem21_ansi_nist_URI,n3:String='ProtectionOrderConditionText',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='VehicleOwnershipNICB',n21namespace:String=niem21_ansi_nist_URI,n3:String='VehicleOwnershipNICB',n3namespace:String=niem21_j_URI},		
			Tuple{n21:String='DNALocusCategoryText',n21namespace:String=niem21_nc_URI,n3:String='DNALocusCategoryText',n3namespace:String=niem21_ansi_nist_URI},		
			Tuple{n21:String='DNALocusValue',n21namespace:String=niem21_nc_URI,n3:String='DNALocusValue',n3namespace:String=niem21_ansi_nist_URI},		
		Tuple{n21:String='ItemRegistration',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistration',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemRegistrationHolder',n21namespace:String=niem21_nc_URI,n3:String='ItemRegistrationHolder',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationHolder',n21namespace:String=niem21_nc_URI,n3:String='RegistrationHolder',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemReplacementTitle',n21namespace:String=niem21_nc_URI,n3:String='ItemReplacementTitle',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitle',n21namespace:String=niem21_nc_URI,n3:String='ItemTitle',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleAssociation',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ItemTitleDocumentCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleDocumentCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitlePurchaseDate',n21namespace:String=niem21_nc_URI,n3:String='ItemTitlePurchaseDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitlePurchasePriceAmount',n21namespace:String=niem21_nc_URI,n3:String='ItemTitlePurchasePriceAmount',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleReplacementAssociation',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleReplacementAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleSalesTaxAmount',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleSalesTaxAmount',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleSalesTaxPercentage',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleSalesTaxPercent',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ItemTitleTaxableValue',n21namespace:String=niem21_nc_URI,n3:String='ItemTitleTaxableValue',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Jewelry',n21namespace:String=niem21_nc_URI,n3:String='Jewelry',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryCaratText',n21namespace:String=niem21_nc_URI,n3:String='JewelryCaratText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationFee',n21namespace:String=niem21_nc_URI,n3:String='RegistrationFee',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationExpirationDate',n21namespace:String=niem21_nc_URI,n3:String='RegistrationExpirationDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseNonCommercialStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseNonCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseNonCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermit',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermit',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitClassificationText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitClassificationText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitQuantity',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitQuantity',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePermitStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicensePermitStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicensePermitStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePermitStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicensePerson',n21namespace:String=niem21_nc_URI,n3:String='DriverLicensePerson',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseCommercialStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseCommercialStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseCommercialStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseCommercialStatusText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseEndorsementCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseEndorsementText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseEndorsementText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseExpirationDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseExpirationDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Firearm',n21namespace:String=niem21_nc_URI,n3:String='Firearm',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCaliberCode',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeNCICCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCaliberText',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSizeText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmCaliber',n21namespace:String=niem21_nc_URI,n3:String='FirearmBoreSize',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmGripText',n21namespace:String=niem21_nc_URI,n3:String='FirearmGripText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmFinish',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinish',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmFinishText',n21namespace:String=niem21_nc_URI,n3:String='FirearmFinishText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmBarrelLengthMeasure',n21namespace:String=niem21_nc_URI,n3:String='FirearmBarrelLengthMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmAutomaticIndicator',n21namespace:String=niem21_nc_URI,n3:String='FirearmAutomaticIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='FirearmCategoryDescription',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescription',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='FirearmCategoryDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='FirearmCategoryDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationDecal',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationDecal',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationGrossWeightMeasure',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationGrossWeightMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationLocation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationLocation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPermanentIndicator',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPermanentIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateBackgroundText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateBackgroundText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateColor',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColor',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateColorCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateColorText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateColorText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistration',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistration',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationPlateCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateCategory',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateCategory',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationRoadIndicator',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationRoadIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationStatus',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatus',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationStatus',n21namespace:String=niem21_nc_URI,n3:String='RegistrationStatus',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationPlateIdentification',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationPlateIdentification',n3namespace:String=niem21_j_URI},
				
//		Tuple{n21:String='LocationStateNCICLISCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLISCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='LocationStateNCICLSTACode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICLSTACode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='LocationStateNCICRESCode',n21namespace:String=niem21_nc_URI,n3:String='LocationStateNCICRESCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceRegistrationStatusDetail',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetail',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceRegistrationStatusDetailText',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceRegistrationStatusDetailText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DecalPeriodCode',n21namespace:String=niem21_nc_URI,n3:String='DecalPeriodCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DisciplinaryActionFacility',n21namespace:String=niem21_nc_URI,n3:String='DisciplinaryActionFacility',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='OrganizationGangAssociation',n21namespace:String=niem21_nc_URI,n3:String='OrganizationGangAssociation',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='SecuritiesDenominationCode',n21namespace:String=niem21_nc_URI,n3:String='SecuritiesDenominationCode',n3namespace:String=niem21_j_URI},		
////////////////////////////////////////namespace change 
		Tuple{n21:String='EngineHorsepowerQuantity',n21namespace:String=niem21_nc_URI,n3:String='EngineHorsepowerQuantity',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='EngineDisplacementUnitCode',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementUnitCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='EngineID',n21namespace:String=niem21_nc_URI,n3:String='EngineID',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Explosive',n21namespace:String=niem21_nc_URI,n3:String='Explosive',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveComponent',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponent',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveComponentCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveComponentText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveComponentText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveContainer',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainer',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveContainerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveContainerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveContainerText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveFiller',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFiller',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveFillerCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveFillerText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveFillerText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ExplosiveIgnition',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnition',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveIgnitionCode',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ExplosiveIgnitionText',n21namespace:String=niem21_nc_URI,n3:String='ExplosiveIgnitionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='AlarmLocationDirectionText',n21namespace:String=niem21_em_URI,n3:String='LocationDirectionsText',n3namespace:String=niem21_nc_URI},		
		
		Tuple{n21:String='EngineDisplacementMeasure',n21namespace:String=niem21_nc_URI,n3:String='EngineDisplacementMeasure',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='EngineCylinderQuantity',n21namespace:String=niem21_nc_URI,n3:String='EngineCylinderQuantity',n3namespace:String=niem21_j_URI},	
		
		Tuple{n21:String='Engine',n21namespace:String=niem21_nc_URI,n3:String='Engine',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='ConveyanceFuelCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceFuelCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyanceEngineAssociation',n21namespace:String=niem21_nc_URI,n3:String='ConveyanceEngineAssociation',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingCategoryText',n21namespace:String=niem21_nc_URI,n3:String='ClothingCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingColorText',n21namespace:String=niem21_nc_URI,n3:String='ClothingColorText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='ClothingDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ClothingStyleText',n21namespace:String=niem21_nc_URI,n3:String='ClothingStyleText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Clothing',n21namespace:String=niem21_nc_URI,n3:String='Clothing',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ConveyancePartBrand',n21namespace:String=niem21_nc_URI,n3:String='ConveyancePartBrand',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseRestriction',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseRestriction',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawal',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawal',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalAction',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalAction',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalActionCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalActionText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalActionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalBasis',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasis',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalBasisCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalBasisText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalBasisText',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatus',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatus',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalDueProcessStatusText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalDueProcessStatusText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalEffectiveDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEffectiveDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalEligibilityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalEligibilityDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalEligibilityDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalExtent',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtent',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalExtentCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalExtentText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalExtentText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthority',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthority',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalIssuingAuthorityText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalIssuingAuthorityText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalLocatorReferenceIdentification',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalLocatorReferenceIdentification',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalPendingIndicator',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalPendingIndicator',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalReasonReferenceCode',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReasonReferenceCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalReinstatementDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalReinstatementDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DriverLicenseWithdrawalText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseWithdrawalValue',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseWithdrawalValue',n3namespace:String=niem21_j_URI},		
		
		
	//	Tuple{n21:String='DrugCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='DrugCategoryCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryMetalText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneMaterialText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='JewelryStone',n21namespace:String=niem21_nc_URI,n3:String='JewelryStone',n3namespace:String=niem21_j_URI},		
	
//		Tuple{n21:String='DrivingRestrictionCode',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestriction',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestriction',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionValue',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionValue',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DrivingRestrictionEndDate',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionEndDate',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='DrivingRestrictionText',n21namespace:String=niem21_nc_URI,n3:String='DrivingRestrictionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='ProgramPurposeText',n21namespace:String=niem21_im_URI,n3:String='ProgramPurposeText',n3namespace:String=niem21_nc_URI},	
		
		
		Tuple{n21:String='JewelryStoneQuantity',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneQuantity',n3namespace:String=niem21_j_URI},	
	
		Tuple{n21:String='JewelryStoneCutText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneCutText',n3namespace:String=niem21_j_URI},	
	
		Tuple{n21:String='JewelryStoneColorText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneColorText',n3namespace:String=niem21_j_URI},		
		
		Tuple{n21:String='DriverLicenseIdentification',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseIdentification',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseIssueDate',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseIssueDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='DriverLicenseNonCommercialClassText',n21namespace:String=niem21_nc_URI,n3:String='DriverLicenseNonCommercialClassText',n3namespace:String=niem21_j_URI},		
	
		Tuple{n21:String='JewelryStoneCaratText',n21namespace:String=niem21_nc_URI,n3:String='JewelryStoneCaratText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='Intoxication',n21namespace:String=niem21_nc_URI,n3:String='Intoxication',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationAlcoholInvolvedIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationAlcoholInvolvedIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationDrugInvolvedIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationDrugInvolvedIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationIntoxicantCategory',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategory',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='IntoxicationIntoxicantCategoryCode',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='IntoxicationIntoxicantCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationIntoxicantIllegalIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationIntoxicantIllegalIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationLevelText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationLevelText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationOverLimitIndicator',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationOverLimitIndicator',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationRelatedActivity',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationRelatedActivity',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestCategoryText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestCategoryText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestDate',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestDate',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTestDescriptionText',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTestDescriptionText',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='IntoxicationTester',n21namespace:String=niem21_nc_URI,n3:String='IntoxicationTester',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='PersonBloodTypeCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBloodTypeCode',n3namespace:String=niem21_j_URI},		
//		Tuple{n21:String='PersonBodyXRaysAvailableCode',n21namespace:String=niem21_nc_URI,n3:String='PersonBodyXRaysAvailableCode',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='PersonClothing',n21namespace:String=niem21_nc_URI,n3:String='PersonClothing',n3namespace:String=niem21_j_URI},		
		Tuple{n21:String='RegistrationOutsideJurisdictionIndicator',n21namespace:String=niem21_nc_URI,n3:String='RegistrationOutsideJurisdictionIndicator',n3namespace:String=niem21_j_URI},		
////////////////////////////////////////namespace change block end		




		Tuple{n21:String='TransmittedDate',n21namespace:String=niem21_scr_URI,n3:String='ManifestTransmittedDate',n3namespace:String=niem21_nc_URI}
};



property namespace21to3Remove:Sequence(Tuple(n21:String)) = Sequence{
	//property niem30_lasd_URI:String=baseNiemNamespace+'lasd/2.0'; // no match 
//property niem30_twpdes_URI:String=baseNiemNamespace+'twpdes/2.0'; // no match 
		Tuple{n21:String=niem21_lasd_URI},
		Tuple{n21:String=niem21_mn_off_URI},
		
		Tuple{n21:String=niem21_twpdes_URI}

};
// namespace changes
property namespace21to3:Sequence(Tuple(n21:String,n3:String)) = Sequence{
		Tuple{n21:String=niem21_ansi_nist_URI,n3:String=niem30_ansi_nist_URI},
		Tuple{n21:String=niem21_ansi_d20_URI,n3:String=niem30_ansi_d20_URI},
		Tuple{n21:String=niem21_apco_URI,n3:String=niem30_apco_URI},
		Tuple{n21:String=niem21_atf_URI,n3:String=niem30_atf_URI},
		Tuple{n21:String=niem21_can_URI,n3:String=niem30_can_URI},
		Tuple{n21:String=niem21_cap_URI,n3:String=niem30_cap_URI},
		Tuple{n21:String=niem21_cbrn_URI,n3:String=niem30_cbrn_URI},
		Tuple{n21:String=niem21_cbrncl_URI,n3:String=niem30_cbrncl_URI},
		Tuple{n21:String=niem21_census_URI,n3:String=niem30_census_URI},
		Tuple{n21:String=niem21_de_URI,n3:String=niem30_de_URI},
		Tuple{n21:String=niem21_dea_URI,n3:String=niem30_dea_URI},
		Tuple{n21:String=niem21_dod_jcs_pub2_0_URI,n3:String=niem30_dod_jcs_pub2_0_URI},
		Tuple{n21:String=niem21_edxl_URI,n3:String=niem30_edxl_URI},
		Tuple{n21:String=niem21_edxl_cap_URI,n3:String=niem30_edxl_cap_URI},
		Tuple{n21:String=niem21_edxl_de_URI,n3:String=niem30_edxl_de_URI},
		Tuple{n21:String=niem21_edxl_have_URI,n3:String=niem30_edxl_have_URI},
		Tuple{n21:String=niem21_em_URI,n3:String=niem30_em_URI},
		Tuple{n21:String=niem21_fbi_URI,n3:String=niem30_fbi_URI},
		Tuple{n21:String=niem21_fips_10_4_URI,n3:String=niem30_fips_10_4_URI},
		Tuple{n21:String=niem21_fips_5_2_URI,n3:String=niem30_fips_5_2_URI},
		Tuple{n21:String=niem21_fips_6_4_URI,n3:String=niem30_fips_6_4_URI},
		Tuple{n21:String=niem21_fs_URI,n3:String=niem30_fs_URI},
		Tuple{n21:String=niem21_gco_URI,n3:String=niem30_gco_URI},
		Tuple{n21:String=niem21_geo_URI,n3:String=niem30_geo_URI},
		Tuple{n21:String=niem21_gmd_URI,n3:String=niem30_gmd_URI},
		Tuple{n21:String=niem21_gml_URI,n3:String=niem30_gml_URI},
		Tuple{n21:String=niem21_gsr_URI,n3:String=niem30_gsr_URI},
		Tuple{n21:String=niem21_gss_URI,n3:String=niem30_gss_URI},
		Tuple{n21:String=niem21_gts_URI,n3:String=niem30_gts_URI},
		Tuple{n21:String=niem21_have_URI,n3:String=niem30_have_URI},
		Tuple{n21:String=niem21_have_codes_URI,n3:String=niem30_have_codes_URI},
		Tuple{n21:String=niem21_hazmat_URI,n3:String=niem30_hazmat_URI},
		Tuple{n21:String=niem21_im_URI,n3:String=niem30_im_URI},
		Tuple{n21:String=niem21_intel_URI,n3:String=niem30_intel_URI},
		Tuple{n21:String=niem21_ip_URI,n3:String=niem30_ip_URI},
		Tuple{n21:String=niem21_iso_3166_URI,n3:String=niem30_iso_3166_URI},
		Tuple{n21:String=niem21_iso_4217_URI,n3:String=niem30_iso_4217_URI},
		Tuple{n21:String=niem21_iso_639_3_URI,n3:String=niem30_iso_639_3_URI},
		Tuple{n21:String=niem21_it_URI,n3:String=niem30_it_URI},
		Tuple{n21:String=niem21_itis_URI,n3:String=niem30_itis_URI},
		Tuple{n21:String=niem21_j_URI,n3:String=niem30_j_URI},
		Tuple{n21:String=niem21_m_URI,n3:String=niem30_m_URI},
		Tuple{n21:String=niem21_mmucc_2_URI,n3:String=niem30_mmucc_2_URI},
		Tuple{n21:String=niem21_nc_URI,n3:String=niem30_nc_URI},
		Tuple{n21:String=niem21_nga_URI,n3:String=niem30_nga_URI},
		Tuple{n21:String=niem21_nlets_URI,n3:String=niem30_nlets_URI},
		Tuple{n21:String=niem21_sar_URI,n3:String=niem30_sar_URI},
		Tuple{n21:String=niem21_scr_URI,n3:String=niem30_scr_URI},
		Tuple{n21:String=niem21_ucr_URI,n3:String=niem30_ucr_URI},
		Tuple{n21:String=niem21_unece_URI,n3:String=niem30_unece_URI},
		Tuple{n21:String=niem21_usps_URI,n3:String=niem30_usps_URI},
		Tuple{n21:String=niem21_ut_offender_URI,n3:String=niem30_ut_offender_URI},
		Tuple{n21:String=niem21_xls_URI,n3:String=niem30_xls_URI}
};


