import mpd2pim;
import soamlPlatformBinding;
//import org.modeldriven.mda.qvto.web; // java blackbox; contains just a few helpers
//import soaml2wsdlannotations;
//modeltype UML "strict" uses 'http://www.eclipse.org/uml2/3.0.0/UML';
modeltype UML uses 'http://www.nomagic.com/magicdraw/UML/2.4.1';
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype XSD  uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype WSDL uses 'http://www.eclipse.org/wsdl/2003/WSDL';
//modeltype SOAP uses 'http://www.ibm.com/wsdl/2003/SOAP';
modeltype SOAP uses 'http://www.eclipse.org/wsdl/2003/SOAP';
//modeltype CAT  uses 'http://reference.niem.gov/niem/resource/mpd/catalog/1.0/';
modeltype CAT  uses 'urn:oasis:names:tc:entity:xmlns:xml:catalog';

// assume uml already is NIEM-UML; we add wsdl and wire it up with existing <<InformationModel>>s
//transformation wsdl2soaml(in wsdl:WSDL,inout uml:UML)
transformation wsdl2soaml(in cat:CAT,inout pimUml:UML,inout blackboxAdapter:CMOF)
	extends transformation
		mpd2pim 
		,soamlPlatformBinding
//		wsdl,
//		soaml2wsdlannotations
		;
	main() {
		wsdl2soamlRun();
	}	
helper wsdl2soamlRun(){
	// initialize soamlProfile stuff	
	mpdRootPackage:=
			pimUml.rootObjects()
			->select(r|r.oclIsKindOf(UML::Model)).oclAsType(UML::Model)
			->asSequence()->first();
	mpdRootPackage.oclAsType(UML::Model).initializeSoamlProfileGlobals();	
	mpd2pim_run();
}
// soaml uml to vanilla xsd; wsdl 	
/*
helper wsdl2soamlRun(){
		log('wsdl2soamlRun starting now '+uml.repr());
		blackboxHook:=blackboxAdapter.objectsOfType(CMOF::EPackage)->asSequence()->first();
		documentRoot:=cat.objectsOfType(CAT::DocumentRoot)->asSequence()->first();
		catalog:=cat.objectsOfType(CAT::CatalogType)->asSequence()->first();
		rootDirectory:=documentRoot.oclAsType(CMOF::EObject).getRootFileName();
		log('wsdl2soamlRun starting NIEMmpd2pim_run root at '+rootDirectory);
		NIEMmpd2pim_run();
		mapInit();
		// remove component if reference model
		log('wsdl2soamlRun end ');



		// initialize global values
		var pimRoot:UML::Package=uml.rootObjects()
			->select(root|root.oclIsKindOf(UML::Package)).oclAsType(UML::Package)
			->asSequence()->first();
		wsdl.objectsOfType(WSDL::Definition).map Participant(pimRoot);
		return;
}
*/
helper 	CAT::FileType::addFileType(inout pimComponent:UML::Component):UML::Usage
{
	var umlPackagePath:String=self.relativePathName.toRelativeMdpLocation();
	var ownerPackage:UML::Package=umlPackagePath.getOwnerPackage(mpdRootPackage);
	var fileTypePackage:UML::PackageableElement=null;
	if(self.relativePathName.endsWith('.xsd'))then{
		var schema:XSD::XSDSchema=self.oclAsType(CMOF::EObject).getSchemaAtRelativeURI(self.relativePathName).oclAsType(XSD::XSDSchema);
		if(not(schema.oclIsUndefined()))then{
			// and map it as schema
			fileTypePackage:=schema.mapAbstractXSDSchema();
			if(fileTypePackage.oclIsUndefined())then{return null;}endif;
			ownerPackage.packagedElement+=fileTypePackage;
			var stereotypeInstance:Stdlib::Element=fileTypePackage.getStereotypeApplication(NIEMInformationModelStereotype).oclAsType(Stdlib::Element);
			if(not(stereotypeInstance.oclIsUndefined()))then{
				
				schema.setModelInformationDefaultPurpose(self.purposeURI.expandURI(),stereotypeInstance);
			}endif;
		}endif;
	}endif;	
	if(self.relativePathName.endsWith('.wsdl'))then{
		fileTypePackage:=self.map FileTypeWsdl(ownerPackage,pimComponent);
		
	}endif;
	if((fileTypePackage=null))then{
		fileTypePackage:=self.map FileTypePackage(ownerPackage,pimComponent);
	}endif;
	return self.map FileType(fileTypePackage,pimComponent);
}
mapping 	CAT::FileType::FileTypeWsdl(inout ownerPackage:UML::Package,inout pimComponent:UML::Component):UML::Component@pimUml
{
	//var umlPackagePath:String=self.relativePathName.toRelativeMdpLocation();
	ownerPackage.packagedElement+=result;
	//result.name:=umlPackagePath.toBaseName();
	// if this is wsdl, then expand wsdl plus schemas, add mpdFileTypes for directly referenced schemas
	// wsdl definition becomes participant in this package
		var wsdlDefinition:WSDL::Definition=self.oclAsType(CMOF::EObject).getWsdlAtRelativeURI(self.relativePathName).oclAsType(WSDL::Definition);
		if(not(wsdlDefinition.oclIsUndefined()))then{
			// and map it as wsdl
//			wsdlDefinition.map WsdlDefinitions(result);// should result in schemas as required
			
//	pimOwner.packagedElement+=result;
	name:=wsdlDefinition.targetNamespace;
	var soamlParticipantInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlDefinitionsStereotype);
	wsdlDefinition.eServices.map ServicePoint(result);
	// TODO: Definition specific 
			
			
			// TODO: hook up schemas to mpd component
			if(not(wsdlDefinition.eTypes.oclIsUndefined()))then{
				wsdlDefinition.eTypes.getSchemas().oclAsType(XSD::XSDSchema)->forEach(schema){
					// this will be schema embedded in wsdl; need to go one more level
					schema.contents->select(content|content.oclIsKindOf(XSD::XSDImport)).oclAsType(XSD::XSDImport)->forEach(xsdImport){
					
						xsdImport.importSchema();
						assert error (not(xsdImport.resolvedSchema.oclIsUndefined())) with log('failed to resolve schema at '+xsdImport.schemaLocation+' from schema '+xsdImport.schema.targetNamespace+' at '+xsdImport.schema.schemaLocation);
					
						var importedSchema:XSD::XSDSchema=xsdImport.resolvedSchema;
						//var importedSchema:XSD::XSDSchema=xsdImport.getResolvedSchema();
						var fileTypePackage:UML::Package=importedSchema.mapAbstractXSDSchema();
						// TODO: set owner of fileTypePackage?, purpose is exchange, and <<MPDFile>>
						if(not(fileTypePackage.oclIsUndefined()))then{
							// apply the <<MPDFileType>> to a Usage from component to <<InformationModel>>
							fileTypePackage.map WsdlSchemaFileType(pimComponent);
						}endif;
					};
				};
			}endif;
		}endif;
	
}

mapping 	CAT::FileType::FileTypePackage(inout ownerPackage:UML::Package,inout pimComponent:UML::Component):UML::Package@pimUml
{
	var umlPackagePath:String=self.relativePathName.toRelativeMdpLocation();
	ownerPackage.packagedElement+=result;
	result.name:=umlPackagePath.toBaseName();
	// if this is wsdl, then expand wsdl plus schemas, add mpdFileTypes for directly referenced schemas
	// wsdl definition becomes participant in this package
	
}
mapping 	UML::Package::WsdlSchemaFileType(inout pimComponent:UML::Component):UML::Usage@pimUml
{
	supplier+=self;
	client+=pimComponent;
	pimComponent.packagedElement+=result;
	var pimNdrSchemaInstance:Stdlib::Element=result.applyStereotype(NIEMModelPackageDescriptionFileStereotype);
	// set version, conformant, purpose
	//pimNdrSchemaInstance.setFileTypeDescriptionText(self.descriptionText);
	//pimNdrSchemaInstance.setFileTypeExternalURI(self.externalURI.expandURI());
//	pimNdrSchemaInstance.setFileTypeNatureCode(self.natureURI.expandURI());
//	pimNdrSchemaInstance.setFileTypePurposeCode(self.purposeURI.expandURI());
	pimNdrSchemaInstance.setFileTypeNatureCode(natureXsdURI);
	pimNdrSchemaInstance.setFileTypePurposeCode(purposeExchangeSchemaURI);
}
property purposeExchangeSchemaURI:String=purposeURI+'exchange-schema';

	/*
helper XSD::XSDImport::getResolvedSchema():XSD::XSDSchema{
	var annotation:CMOF::EAnnotation=new CMOF::EAnnotation('getResolvedSchema');
	annotation._references+=self.oclAsType(CMOF::EObject);
	blackboxHook.eAnnotations+=annotation;
	return annotation._references->select(r|r<>self)->asSequence()->first().oclAsType(XSD::XSDSchema);
	}
*/
//////////////////////////////////////////////////////////////////////////////////////////wsdl leaf mapping
/*
mapping WSDL::Definition::WsdlDefinitions(inout pimOwner:UML::Package):UML::Collaboration 
{
	pimOwner.packagedElement+=result;
	name:=self.targetNamespace;
	self.eServices.map ParticipantRole(result);
	// TODO: Definition specific 
	var soamlParticipantInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlDefinitionsStereotype);
/ *
	targetNamespace:=self.getTargetNamespace();
	result.setQName(self.getName());
	location:=self.getWsdlLocation();
	ePortTypes+=self.getRealizedInterfaces().map PortType();
	eMessages+=ePortTypes.eOperations->select(o|not(o.eInput.oclIsUndefined())).eInput.eMessage
		->union(ePortTypes.eOperations->select(o|not(o.eOutput.oclIsUndefined())).eOutput.eMessage)
		->union(ePortTypes.eOperations.eFaults.eMessage)->asSet();
	// import the schemas
	eImports+=self.allSchemaPackages().map Import(self,result);
	self.DefinitionWsdlAnnotation(result);
	* /
}

mapping WSDL::Service::ParticipantRole(inout pimOwner:UML::Collaboration):UML::Property 
{
	pimOwner.ownedAttribute+=result;
//	name:=self.name;
	name:=self.getServiceQNameLocalPart();
	type:=self.map WsdlService(pimOwner.getNearestPackage());
}
*/

mapping WSDL::Service::ServicePoint(inout pimOwner:UML::Component):UML::Port 
{
	pimOwner.ownedAttribute+=result;
//	name:=self.name;
	name:=self.getServiceQNameLocalPart();
	var soamlParticipantInstance:Stdlib::Element=result.applyStereotype(soamlServicePointStereotype);
	type:=self.map WsdlService(pimOwner);
}
mapping WSDL::Service::WsdlService(inout pimOwner:UML::Component):UML::Class 
{
	pimOwner.packagedElement+=result;
//	name:=self.name;
	name:=self.getServiceQNameLocalPart();
	self.ePorts.map WsdlPort(result);
	// TODO: Definition specific 
	var soamlParticipantInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlServiceStereotype);
}
/*
mapping 	WSDL::Port::AbstractWsdlPort(umlContainer:UML::Class):UML::Generalization 
disjuncts 
	WSDL::Port::WsidIdentity,
	WSDL::Port::WsaEndpointReference,
	WSDL::Port::SoapAddress,
	WSDL::Port::WsdlPort
	{}
mapping WSDL::Port::WsdlPort_common(inout pimOwner:UML::Class):UML::Generalization
{
	specific:=pimOwner;
	//pimOwner.ownedAttribute+=result;
	//name:=self.name;
	name:=self.getPortQNameLocalPart();
	general:=self.eBinding.map AbstractWsdlBinding(pimOwner.owner.oclAsType(UML::Component));
}
*/
mapping WSDL::Port::WsdlPort(inout pimOwner:UML::Class):UML::Generalization
//inherits WSDL::Port::WsdlPort_common
{
	specific:=pimOwner;
	//pimOwner.ownedAttribute+=result;
	//name:=self.name;
	//name:=self.getPortQNameLocalPart();
	general:=self.eBinding.map AbstractWsdlBinding(pimOwner.owner.oclAsType(UML::Component));
	var wsdlPortInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlPortStereotype);
	wsdlPortInstance.setWsdlPortName(self.name);
		self.eExtensibilityElements
			->select(e|e.oclIsKindOf(SOAP::SOAPAddress)).oclAsType(SOAP::SOAPAddress)
			->forEach(soapAddress){
				var soapAddressInstance:Stdlib::Element=result.applyStereotype(wsdlSoapAddressStereotype);
				soapAddressInstance.setSoapAddressLocation(soapAddress.locationURI);
				soapAddressInstance.setSoapAddressWsdlRequired(soapAddress.required);
				};
		self.eExtensibilityElements
			->select(e|e.getExtensibilityElementQNameLocalPart()='EndpointReference')
			->forEach(endpointReference){
				var endpointReferenceInstance:Stdlib::Element=result.applyStereotype(wsdlWsaEndpointReferenceStereotype);
				//endpointReferenceInstance.setEndpointReferenceAddress(endpointReference.getEndpointReferenceAddress());
				
				};
	
}helper  Stdlib::Element::setSoapAddressLocation(location:String){
	self.setTagValueConditionally('location',location);
}
/* ?
helper  Stdlib::Element::setSoapAddressLocation(wsdlRequired:Boolean){
		
	}endif;
}
*/
/*
mapping WSDL::Port::SoapAddress(inout pimOwner:UML::Class):UML::Generalization
inherits WSDL::Port::WsdlPort_common
	when{self.eExtensibilityElements->select(e|e.oclIsKindOf(SOAP::SOAPAddress))->notEmpty()}
{
	var soamlServiceInstance:Stdlib::Element=result.applyStereotype(wsdlSoapAddressStereotype);
}
*/
mapping 	WSDL::Binding::AbstractWsdlBinding(umlContainer:UML::Component):UML::Class 
disjuncts 
	//WSDL::Binding::SoapBinding, // no longer exists?
	WSDL::Binding::WsdlBinding
	{}
mapping WSDL::Binding::WsdlBinding(inout pimOwner:UML::Component):UML::Class
//inherits WSDL::Binding::WsdlBinding_common
{
	pimOwner.packagedElement+=result;
	
	//name:=self.name;
	//name:=self.getBindingQNameLocalPart();// no longer exists?
	self.ePortType.map WsdlPortTypeRealization(result,self.ePortType.map WsdlPortType(pimOwner));
	self.eBindingOperations.map AbstractWsdlBindingOperation(result);
//	var soamlServiceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlBindingStereotype);// stereotype does not exist
}
/*
mapping WSDL::Binding::WsdlBinding_common(inout pimOwner:UML::Component):UML::Class
{
	pimOwner.packagedElement+=result;
	
	//name:=self.name;
	name:=self.getBindingQNameLocalPart();
	self.ePortType.map WsdlPortTypeRealization(result,self.ePortType.map WsdlPortType(pimOwner));
	self.eBindingOperations.map AbstractWsdlBindingOperation(result);
	
}
*/
mapping WSDL::PortType::WsdlPortTypeRealization(inout serviceInterface:UML::Class,in ifc:UML::Interface):UML::InterfaceRealization
{
	serviceInterface.interfaceRealization+=result;
	contract:=ifc;
}
mapping WSDL::PortType::WsdlPortType(inout participant:UML::Component):UML::Interface
{
//	name:=self.name;
//	name:=self.getPortTypeQNameLocalPart();// no longer exists?
	var soamlServiceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlPortTypeStereotype);
	self.eOperations.map Operation(result);
}

/*
mapping WSDL::Definition::Participant(inout pimOwner:UML::Package):UML::Component 
{
	pimOwner.packagedElement+=result;
	name:=self.targetNamespace;
	self.eServices.map Service(result);
	// TODO: Definition specific 
	var soamlParticipantInstance:Stdlib::Element=result.applyStereotype(soamlParticipantStereotype);
/ *
	targetNamespace:=self.getTargetNamespace();
	result.setQName(self.getName());
	location:=self.getWsdlLocation();
	ePortTypes+=self.getRealizedInterfaces().map PortType();
	eMessages+=ePortTypes.eOperations->select(o|not(o.eInput.oclIsUndefined())).eInput.eMessage
		->union(ePortTypes.eOperations->select(o|not(o.eOutput.oclIsUndefined())).eOutput.eMessage)
		->union(ePortTypes.eOperations.eFaults.eMessage)->asSet();
	// import the schemas
	eImports+=self.allSchemaPackages().map Import(self,result);
	self.DefinitionWsdlAnnotation(result);
	* /
}
	
mapping 	UML::Classifier::ServiceDefinition():WSDL::Definition@wsdl 
{
	targetNamespace:=self.getTargetNamespace()+'Service';
	result.setQName(self.getName());
	location:=self.getWsdlPartLocation('Service');
	eServices+=self.map Service(result);
	// import the bindings
	eImports+=self.getRealizedInterfaces().map ServiceImport(self,result);
	self.ServiceDefinitionWsdlAnnotation(result);
}
	
mapping 	UML::Classifier::BindingDefinition():WSDL::Definition@wsdl 
{
	targetNamespace:=self.getTargetNamespace()+'Binding';
	result.setQName(self.getName());
	location:=self.getWsdlPartLocation('Binding');
	eNamespaces+=new WSDL::Namespace(wsawsNamespace,wsawsPrefix);
	eNamespaces+=new WSDL::Namespace(soapNamespace,soapPrefix);
	eNamespaces+=new WSDL::Namespace(wspNamespace,wspPrefix);
	eNamespaces+=new WSDL::Namespace(wsuNamespace,wsuPrefix);
	eNamespaces+=new WSDL::Namespace(mpoNamespace,mpoPrefix);
	eNamespaces+=new WSDL::Namespace(wsrmNamespace,wsrmPrefix);
	eNamespaces+=new WSDL::Namespace(spNamespace,spPrefix);
	eBindings+=self.getRealizedInterfaces().map Binding(self);
	// import the portTypes
	eImports+=self.getRealizedInterfaces().map BindingImport(self,result);
	self.BindingDefinitionWsdlAnnotation(result);
}	

mapping WSDL::Service::Service(inout pimOwner:UML::Component):UML::Port
{
	pimOwner.ownedAttribute+=result;
	name:=self.getServiceQNameLocalPart();
	//self.ePorts.map ServiceInterface(result);
	self.map ServiceInterface(result);
	// TODO: Service specific here or in ServiceInterface 
	var soamlServiceInstance:Stdlib::Element=result.applyStereotype(soamlServiceStereotype);
/ *
	result.setQName(self.getName()+'Service');
	ePorts+=self.getRealizedInterfaces().map Port(definition,result,self);
	* /
}

mapping WSDL::Service::ServiceInterface(inout servicePort:UML::Port):UML::Component
{
	name:=self.getServiceQNameLocalPart();
	servicePort.owner.owner.oclAsType(UML::Package).packagedElement+=result;
	self.ePorts.map Interface(result);
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(soamlServiceInterfaceStereotype);
//	var soamlProviderInstance:Stdlib::Element=result.applyStereotype(soamlProviderStereotype);
	/ *
	eBinding:=self.map Binding(serviceInterface);
	// must define address
	eExtensibilityElements+=new SOAPAddress(self.locationURI());
	* /
}
mapping WSDL::Port::Interface(inout serviceInterface:UML::Component):UML::Interface
{
	name:=self.name;
	serviceInterface.owner.oclAsType(UML::Package).packagedElement+=result;
	self.map InterfaceRealization(serviceInterface,result);
	var binding:WSDL::Binding=self.eBinding;
	var portType:WSDL::PortType=binding.ePortType;
	portType.eOperations.map Operation(result,serviceInterface,binding);
	// TODO: Port specific stuff
	// TODO: Binding specific stuff
	// TODO: PortType specific stuff
	/ *
	eBinding:=self.map Binding(serviceInterface);
	// must define address
	eExtensibilityElements+=new SOAPAddress(self.locationURI());
	* /
}
mapping WSDL::Port::InterfaceRealization(inout serviceInterface:UML::Component,in ifc:UML::Interface):UML::InterfaceRealization
{
	serviceInterface.interfaceRealization+=result;
	contract:=ifc;
}
mapping WSDL::Operation::Operation(inout serviceInterface:UML::Interface,inout serviceInterfaceComponent:UML::Component,binding:WSDL::Binding):UML::Operation
*/

mapping WSDL::Operation::Operation(inout serviceInterface:UML::Interface):UML::Operation
{

	name:=self.name;
	serviceInterface.ownedOperation+=result;
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlOperationStereotype);
	if(not(self.eInput.oclIsUndefined()))then{
		self.eInput.map ParameterInput(result);
	}endif;
	if(not(self.eOutput.oclIsUndefined()))then{
		self.eOutput.map ParameterOutput(result);
	}endif;
	self.eFaults->forEach(wsdlFault){
		wsdlFault.map ParameterFault(result);
			
		};
	/*
	self.eInput->forEach(wsdlInput){
		wsdlInput.eMessage->forEach(message){
			message.eParts.map ParameterInput(result);
		};
	};	
	self.eOutput->forEach(wsdlOutput){
		wsdlOutput.eMessage->forEach(message){
			message.eParts.map ParameterOutput(result);
		};
	};	
	self.eFaults->forEach(wsdlFault){
		wsdlFault.eMessage->forEach(message){
			message.eParts->forEach(part){
				if(part.typeDefinition.oclIsUndefined())then{
					var umlType:UML::NamedElement=part.elementDeclaration.type.resolveSchemaContentReference();
					if(not(umlType.oclIsUndefined()))then{
//						type:=umlType.oclAsType(UML::Classifier);
						raisedException+=umlType.oclAsType(UML::Classifier);
					}endif;
				}else{
					var umlType:UML::NamedElement=part.typeDefinition.resolveSchemaContentReference();
					if(not(umlType.oclIsUndefined()))then{
						raisedException+=umlType.oclAsType(UML::Classifier);
					}endif;
				}endif;
			};
		};
	};
	*/	
//	binding.eBindingOperations->select(bo|bo.name=self.name).map BindingOperation(self,serviceInterfaceComponent);
	// TODO: Operation specific stuff
	// TODO: Input specific stuff
	// TODO: Output specific stuff
	// TODO: Fault specific stuff
	// TODO: Message specific stuff
}
mapping WSDL::BindingOperation::BindingOperation(inout serviceInterface:UML::Component):UML::Operation
{
	
	name:=self.name;
	serviceInterface.ownedOperation+=result;
	var portTypeOperation:WSDL::Operation=self.eOperation;
	if(not(portTypeOperation.eInput.oclIsUndefined()))then{
		portTypeOperation.eInput.map ParameterInput(result);
	}endif;
	if(not(portTypeOperation.eOutput.oclIsUndefined()))then{
		portTypeOperation.eOutput.map ParameterOutput(result);
	}endif;
	portTypeOperation.eFaults->forEach(wsdlFault){
		wsdlFault.map ParameterFault(result);
			
		};
	// TODO: Operation specific stuff
	// TODO: Input specific stuff
	// TODO: Output specific stuff
	// TODO: Fault specific stuff
	// TODO: Message specific stuff
}
mapping WSDL::Fault::ParameterFault(inout operation:UML::Operation):UML::Parameter
{
	operation.ownedParameter+=result;
	direction:=ParameterDirectionKind::_out;
	var message:WSDL::Message=self.eMessage;
	name:=self.name;
	type:=message.map Message(operation.owner.owner.oclAsType(UML::Component));
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlFaultStereotype);
}
mapping WSDL::Input::ParameterInput(inout operation:UML::Operation):UML::Parameter
{
	operation.ownedParameter+=result;
	direction:=ParameterDirectionKind::_in;
	var message:WSDL::Message=self.eMessage;
	name:=self.name;
	type:=message.map Message(operation.owner.owner.oclAsType(UML::Component));
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlParameterStereotype);
}
mapping WSDL::Output::ParameterOutput(inout operation:UML::Operation):UML::Parameter
{
	operation.ownedParameter+=result;
	direction:=ParameterDirectionKind::_out;
	name:=self.name;
	var message:WSDL::Message=self.eMessage;
	type:=message.map Message(operation.owner.owner.oclAsType(UML::Component));
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlParameterStereotype);
}
mapping WSDL::Message::Message(inout owner:UML::Component):UML::Class
{
//	name:=self.name;
	name:=self.getMessageQNameLocalPart();
	owner.packagedElement+=result;
	self.eParts.map Part(result);
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlMessageStereotype);
}
mapping WSDL::Part::Part(inout owner:UML::Class):UML::Property
{
	name:=self.name;
	owner.ownedAttribute+=result;
	var umlType:UML::NamedElement=null;
	if(self.typeDefinition.oclIsUndefined())then{
		umlType:=self.elementDeclaration.type.resolveSchemaContentReference();
	}else{
		umlType:=self.typeDefinition.resolveSchemaContentReference();
	}endif;
	if(not(umlType.oclIsUndefined()))then{
		type:=umlType.oclAsType(UML::Classifier);
	}endif;
	var soamlServiceInterfaceInstance:Stdlib::Element=result.applyStereotype(wsdlWsdlPartStereotype);
}
/*
mapping WSDL::Part::ParameterInput(inout operation:UML::Operation):UML::Parameter
{
	var message:WSDL::Message=self.eMessage;
	if(message.eParts->size()=1)then{
		name:=message.getMessageQNameLocalPart();
	}else{
		name:=message.getMessageQNameLocalPart()+'_'+self.name;
	}endif;

	operation.ownedParameter+=result;
	direction:=ParameterDirectionKind::_in;
	// multiple parts; multiple messageTypes; element references instead of type
	// map as one parameter per part, use type; any additional info via stereotypes
	if(self.typeDefinition.oclIsUndefined())then{
//		self.elementDeclaration.type.map MessageType(result);
		var umlType:UML::NamedElement=self.elementDeclaration.type.resolveSchemaContentReference();
		if(not(umlType.oclIsUndefined()))then{
			type:=umlType.oclAsType(UML::Classifier);
		}endif;
	}else{
//		self.typeDefinition.map MessageType(result);
		var umlType:UML::NamedElement=self.typeDefinition.resolveSchemaContentReference();
		if(not(umlType.oclIsUndefined()))then{
			type:=umlType.oclAsType(UML::Classifier);
		}endif;
	}endif;
	// TODO: Part specific stuff
	
}
mapping WSDL::Part::ParameterOutput(inout operation:UML::Operation):UML::Parameter
{
	var message:WSDL::Message=self.eMessage;
	if(message.eParts->size()=1)then{
		name:=message.getMessageQNameLocalPart();
	}else{
		name:=message.getMessageQNameLocalPart()+'_'+self.name;
	}endif;

//	name:=self.name;
	operation.ownedParameter+=result;
	direction:=ParameterDirectionKind::_out;
	// multiple parts; multiple messageTypes; element references instead of type
	// map as one parameter per part, use type; any additional info via stereotypes
	if(self.typeDefinition.oclIsUndefined())then{
		//self.elementDeclaration.type.map MessageType(result);
		//type:=self.elementDeclaration.type.map
		
		var umlType:UML::NamedElement=self.elementDeclaration.type.resolveSchemaContentReference();
		if(not(umlType.oclIsUndefined()))then{
			type:=umlType.oclAsType(UML::Classifier);
		}endif;
		
	}else{
//		self.typeDefinition.map MessageType(result);
		var umlType:UML::NamedElement=self.typeDefinition.resolveSchemaContentReference();
		if(not(umlType.oclIsUndefined()))then{
			type:=umlType.oclAsType(UML::Classifier);
		}endif;
	}endif;
	// TODO: Part specific stuff
}
*/
/*
mapping XSD::XSDTypeDefinition::MessageType(inout parameter:UML::Parameter):UML::Class
{
	name:=self.name;
	parameter.owner.owner.owner.oclAsType(UML::Package).packagedElement+=result;
	parameter.type:=result;
}
mapping XSD::XSDTypeDefinition::RaisedException(inout operation:UML::Operation):UML::Class
{
	name:=self.name;
	operation.owner.owner.oclAsType(UML::Package).packagedElement+=result;
	operation.raisedException+=result;
}
*/

/*
mapping UML::Interface::Port(in definition:WSDL::Definition,in service:WSDL::Service,serviceInterface:UML::Classifier):WSDL::Port@wsdl
{
	name:=self.getName()+'Port';
	eBinding:=self.map Binding(serviceInterface);
	// must define address
	eExtensibilityElements+=new SOAPAddress(self.locationURI());
}
mapping UML::Interface::Binding(serviceInterface:UML::Classifier):WSDL::Binding@wsdl
{
	ePortType:=self.map PortType();
	result.setQName(self.getName()+'Binding');
	eBindingOperations+=ePortType.eOperations.map BindingOperation(self);
	// must define binding
	eExtensibilityElements+=new SOAPBinding(self.transportURI(),self.style());
	//     	<wsaws:UsingAddressing/>
	eExtensibilityElements+=wsawsUsingAddressing();
	/ *
	if(serviceInterface.stereotypedBy(policyProfileAuthentication))then{
		eExtensibilityElements+=wspPolicyReference('#PasswordAuthenticationOverSSL');
	}else{}endif;
	if(serviceInterface.stereotypedBy(policyProfileReliability))then{
		eExtensibilityElements+=wspPolicyReference('#ReliableMessaging');
	}else{}endif;
	* /
}
mapping UML::Interface::PortType():WSDL::PortType@wsdl
{
	result.setQName(self.getName());
	eOperations+=self.allBehavioralFeatures().map Operation(result,self);
}
mapping WSDL::Operation::BindingOperation(context:UML::Interface):WSDL::BindingOperation@wsdl
{
	name:=self.name;
	eOperation:=self;
	var umlOperation:UML::BehavioralFeature=self.findUmlOperation();
	eExtensibilityElements+=new SOAPOperation(umlOperation.soapActionURI(),umlOperation.style());
	//result.setElementAttribute(mpoNamespace,'mpo:modifieable','');
	eBindingInput:=self.eInput.map BindingInput();
	eBindingOutput:=self.eOutput.map BindingOutput();
	eBindingFaults:=self.eFaults.map BindingFault();
}

mapping WSDL::Input::BindingInput():WSDL::BindingInput@wsdl
{
	name:=self.name;
	eInput:=self;
//	var umlOperation:UML::BehavioralFeature=self.getContainer().oclAsType(WSDL::Operation).findUmlOperation();
//	eExtensibilityElements+=new SOAPBody(umlOperation.use(),self.parts());
//	result.setElementAttribute(wsawsNamespace,'wsaws:Action',umlOperation.soapActionURI());
}
mapping WSDL::Output::BindingOutput():WSDL::BindingOutput@wsdl
{
	name:=self.name;
	eOutput:=self;
//	var umlOperation:UML::BehavioralFeature=self.getContainer().oclAsType(WSDL::Operation).findUmlOperation();
//	eExtensibilityElements+=new SOAPBody(umlOperation.use(),self.parts());
//	result.setElementAttribute(wsawsNamespace,'wsaws:Action',umlOperation.soapActionURI()+'Response');
}
mapping WSDL::Fault::BindingFault():WSDL::BindingFault@wsdl
{
	name:=self.name;
	eFault:=self;
//	var umlOperation:UML::BehavioralFeature=self.getContainer().oclAsType(WSDL::Operation).findUmlOperation();
//	eExtensibilityElements+=new SOAPFault(self.name,umlOperation.use());
}
	
mapping UML::BehavioralFeature::Operation(portType:WSDL::PortType,owningInterface:UML::Interface):WSDL::Operation@wsdl
{
	name:=self.getName();
	eInput:=self.getInputParameter().map Input(portType,owningInterface);
	eOutput:=self.getOutputParameter().map Output(portType);
	eFaults:=self.raisedException.map Fault(portType);
}
mapping UML::Type::Fault(portType:WSDL::PortType):WSDL::Fault@wsdl
{
	name:=self.getName();
	eMessage:=self.oclAsType(UML::Classifier).map Message(portType);
}
mapping UML::NamedElement::Input(portType:WSDL::PortType,owningInterface:UML::Interface):WSDL::Input@wsdl
{
	// name must be unique amongst all input/output names in portType 
	name:=self.getName()+self.uniqueInputNameSuffix(owningInterface);
	eMessage:=self.getUmlType().map Message(portType);
}
mapping UML::NamedElement::Output(portType:WSDL::PortType):WSDL::Output@wsdl
{
	name:=self.getName();
	eMessage:=self.getUmlType().map Message(portType);
}
mapping UML::Classifier::Message(in portType:WSDL::PortType):WSDL::Message@wsdl
{
	result.setQName(self.getName());
	eParts+=self.map Part(portType);
}
mapping UML::Classifier::Part(in portType:WSDL::PortType):WSDL::Part@wsdl
{
	name:=self.getName();
	typeDefinition:=self.map AbstractTypeDefinition();
}
mapping UML::Package::Import(referencingPackage:UML::Namespace,definition:WSDL::Definition):WSDL::Import@wsdl
{
	eSchema:=self.map Schema();
	namespaceURI:=eSchema.targetNamespace;
	locationURI:=self.getRelativeSchemaLocation(referencingPackage);
}
*/

///////////////////////////////////////////////Profile initialization
/*
property soamlProfileName:String='SoaML';
property soamlProfile:UML::Profile=null;
property soamlAgentStereotype:UML::Stereotype=null;
property soamlAttachmentStereotype:UML::Stereotype=null;
property soamlCapabilityStereotype:UML::Stereotype=null;
property soamlConsumerStereotype:UML::Stereotype=null;
property soamlCollaborationStereotype:UML::Stereotype=null;
property soamlCollaborationUseStereotype:UML::Stereotype=null;
property soamlExposeStereotype:UML::Stereotype=null;
property soamlMessageTypeStereotype:UML::Stereotype=null;
property soamlMilestoneStereotype:UML::Stereotype=null;
property soamlParticipantStereotype:UML::Stereotype=null;
property soamlPortStereotype:UML::Stereotype=null;
property soamlPropertyStereotype:UML::Stereotype=null;
property soamlProviderStereotype:UML::Stereotype=null;
property soamlRequestStereotype:UML::Stereotype=null;
property soamlServiceChannelStereotype:UML::Stereotype=null;
property soamlServiceContractStereotype:UML::Stereotype=null;
property soamlServiceStereotype:UML::Stereotype=null;
property soamlServiceInterfaceStereotype:UML::Stereotype=null;
property soamlServicesArchitectureStereotype:UML::Stereotype=null;
helper UML::Model::initializeSoamlProfileGlobals(){
		var pimRoot:UML::Model=self;
		var allSourceProfiles:Set(UML::Profile)=pimRoot.allSubobjectsOfType(UML::Profile).oclAsType(UML::Profile)->asSet();
		allSourceProfiles
			->select(p|p.name=soamlProfileName)->asSequence()->first().initSoamlProfileStereotypes();//getProvisioningProfile();
		return;
}
helper UML::Profile::initSoamlProfileStereotypes(){
		soamlProfile:=self;
		soamlAgentStereotype:=soamlProfile.getOwnedStereotype('Agent');
		soamlAttachmentStereotype:=soamlProfile.getOwnedStereotype('Attachment');
		soamlCapabilityStereotype:=soamlProfile.getOwnedStereotype('Capability');
		soamlConsumerStereotype:=soamlProfile.getOwnedStereotype('Consumer');
		soamlCollaborationStereotype:=soamlProfile.getOwnedStereotype('Collaboration');
		soamlCollaborationUseStereotype:=soamlProfile.getOwnedStereotype('CollaborationUse');
		soamlExposeStereotype:=soamlProfile.getOwnedStereotype('Expose');
		soamlMessageTypeStereotype:=soamlProfile.getOwnedStereotype('MessageType');
		soamlMilestoneStereotype:=soamlProfile.getOwnedStereotype('Milestone');
		soamlParticipantStereotype:=soamlProfile.getOwnedStereotype('Participant');
		soamlPortStereotype:=soamlProfile.getOwnedStereotype('Port');
		soamlPropertyStereotype:=soamlProfile.getOwnedStereotype('Property');
		soamlProviderStereotype:=soamlProfile.getOwnedStereotype('Provider');
		soamlRequestStereotype:=soamlProfile.getOwnedStereotype('Request');
		soamlServiceChannelStereotype:=soamlProfile.getOwnedStereotype('ServiceChannel');
		soamlServiceContractStereotype:=soamlProfile.getOwnedStereotype('ServiceContract');
		soamlServiceStereotype:=soamlProfile.getOwnedStereotype('Service');
		soamlServiceInterfaceStereotype:=soamlProfile.getOwnedStereotype('ServiceInterface');
		soamlServicesArchitectureStereotype:=soamlProfile.getOwnedStereotype('ServicesArchitecture');
	return;
}
*/